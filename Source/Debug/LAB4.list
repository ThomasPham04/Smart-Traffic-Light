
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003020  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800312c  0800312c  0001312c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003150  08003150  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003150  08003150  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003150  08003150  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003150  08003150  00013150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003154  08003154  00013154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000005c  080031b4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  080031b4  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c59  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd9  00000000  00000000  00029cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0002b8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  0002c3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fab  00000000  00000000  0002cd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c35b  00000000  00000000  00043d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082949  00000000  00000000  0005007e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d29c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a98  00000000  00000000  000d2a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003114 	.word	0x08003114

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003114 	.word	0x08003114

0800014c <isButton1Pressed>:

int Key3Reg3 = NORMAL_STATE;
int TimerForKey3Press = 200;


int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000078 	.word	0x20000078

08000170 <isButton2Pressed>:

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	2000007c 	.word	0x2000007c

08000194 <isButton3Pressed>:

int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000080 	.word	0x20000080

080001b8 <subKey1Process>:


void subKey1Process(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
	button1_flag = 1;
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <subKey1Process+0x14>)
 80001be:	2201      	movs	r2, #1
 80001c0:	601a      	str	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000078 	.word	0x20000078

080001d0 <getKey1Input>:
void subKey3Process(){
//	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
	button3_flag = 1;
}

void getKey1Input(){
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	Key1Reg0 = Key1Reg1;
 80001d4:	4b1f      	ldr	r3, [pc, #124]	; (8000254 <getKey1Input+0x84>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a1f      	ldr	r2, [pc, #124]	; (8000258 <getKey1Input+0x88>)
 80001da:	6013      	str	r3, [r2, #0]
	Key1Reg1 = Key1Reg2;
 80001dc:	4b1f      	ldr	r3, [pc, #124]	; (800025c <getKey1Input+0x8c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a1c      	ldr	r2, [pc, #112]	; (8000254 <getKey1Input+0x84>)
 80001e2:	6013      	str	r3, [r2, #0]
	Key1Reg2 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80001e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e8:	481d      	ldr	r0, [pc, #116]	; (8000260 <getKey1Input+0x90>)
 80001ea:	f001 ff67 	bl	80020bc <HAL_GPIO_ReadPin>
 80001ee:	4603      	mov	r3, r0
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b1a      	ldr	r3, [pc, #104]	; (800025c <getKey1Input+0x8c>)
 80001f4:	601a      	str	r2, [r3, #0]
	if ((Key1Reg0 == Key1Reg1) && (Key1Reg1 == Key1Reg2)){
 80001f6:	4b18      	ldr	r3, [pc, #96]	; (8000258 <getKey1Input+0x88>)
 80001f8:	681a      	ldr	r2, [r3, #0]
 80001fa:	4b16      	ldr	r3, [pc, #88]	; (8000254 <getKey1Input+0x84>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	429a      	cmp	r2, r3
 8000200:	d125      	bne.n	800024e <getKey1Input+0x7e>
 8000202:	4b14      	ldr	r3, [pc, #80]	; (8000254 <getKey1Input+0x84>)
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	4b15      	ldr	r3, [pc, #84]	; (800025c <getKey1Input+0x8c>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	429a      	cmp	r2, r3
 800020c:	d11f      	bne.n	800024e <getKey1Input+0x7e>
		if (Key1Reg3 != Key1Reg2){//nhan tha
 800020e:	4b15      	ldr	r3, [pc, #84]	; (8000264 <getKey1Input+0x94>)
 8000210:	681a      	ldr	r2, [r3, #0]
 8000212:	4b12      	ldr	r3, [pc, #72]	; (800025c <getKey1Input+0x8c>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	429a      	cmp	r2, r3
 8000218:	d00d      	beq.n	8000236 <getKey1Input+0x66>
			Key1Reg3 = Key1Reg2;
 800021a:	4b10      	ldr	r3, [pc, #64]	; (800025c <getKey1Input+0x8c>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a11      	ldr	r2, [pc, #68]	; (8000264 <getKey1Input+0x94>)
 8000220:	6013      	str	r3, [r2, #0]
			if (Key1Reg2 == PRESSED_STATE){
 8000222:	4b0e      	ldr	r3, [pc, #56]	; (800025c <getKey1Input+0x8c>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d111      	bne.n	800024e <getKey1Input+0x7e>
				//TODO
				subKey1Process();
 800022a:	f7ff ffc5 	bl	80001b8 <subKey1Process>
				TimerForKey1Press = 200;
 800022e:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <getKey1Input+0x98>)
 8000230:	22c8      	movs	r2, #200	; 0xc8
 8000232:	601a      	str	r2, [r3, #0]
			if (TimerForKey1Press == 0){
				Key1Reg3 = NORMAL_STATE;
			}
		}
	}
}
 8000234:	e00b      	b.n	800024e <getKey1Input+0x7e>
			TimerForKey1Press--;
 8000236:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <getKey1Input+0x98>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	3b01      	subs	r3, #1
 800023c:	4a0a      	ldr	r2, [pc, #40]	; (8000268 <getKey1Input+0x98>)
 800023e:	6013      	str	r3, [r2, #0]
			if (TimerForKey1Press == 0){
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <getKey1Input+0x98>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d102      	bne.n	800024e <getKey1Input+0x7e>
				Key1Reg3 = NORMAL_STATE;
 8000248:	4b06      	ldr	r3, [pc, #24]	; (8000264 <getKey1Input+0x94>)
 800024a:	2201      	movs	r2, #1
 800024c:	601a      	str	r2, [r3, #0]
}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000004 	.word	0x20000004
 8000258:	20000000 	.word	0x20000000
 800025c:	20000008 	.word	0x20000008
 8000260:	40010c00 	.word	0x40010c00
 8000264:	2000000c 	.word	0x2000000c
 8000268:	20000010 	.word	0x20000010

0800026c <getKey2Input>:

void getKey2Input(){
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	Key2Reg0 = Key2Reg1;
 8000270:	4b1f      	ldr	r3, [pc, #124]	; (80002f0 <getKey2Input+0x84>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a1f      	ldr	r2, [pc, #124]	; (80002f4 <getKey2Input+0x88>)
 8000276:	6013      	str	r3, [r2, #0]
	Key2Reg1 = Key2Reg2;
 8000278:	4b1f      	ldr	r3, [pc, #124]	; (80002f8 <getKey2Input+0x8c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a1c      	ldr	r2, [pc, #112]	; (80002f0 <getKey2Input+0x84>)
 800027e:	6013      	str	r3, [r2, #0]
	Key2Reg2 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000280:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000284:	481d      	ldr	r0, [pc, #116]	; (80002fc <getKey2Input+0x90>)
 8000286:	f001 ff19 	bl	80020bc <HAL_GPIO_ReadPin>
 800028a:	4603      	mov	r3, r0
 800028c:	461a      	mov	r2, r3
 800028e:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <getKey2Input+0x8c>)
 8000290:	601a      	str	r2, [r3, #0]
	if ((Key2Reg0 == Key2Reg1) && (Key2Reg1 == Key2Reg2)){
 8000292:	4b18      	ldr	r3, [pc, #96]	; (80002f4 <getKey2Input+0x88>)
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	4b16      	ldr	r3, [pc, #88]	; (80002f0 <getKey2Input+0x84>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	429a      	cmp	r2, r3
 800029c:	d126      	bne.n	80002ec <getKey2Input+0x80>
 800029e:	4b14      	ldr	r3, [pc, #80]	; (80002f0 <getKey2Input+0x84>)
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <getKey2Input+0x8c>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d120      	bne.n	80002ec <getKey2Input+0x80>
		if (Key2Reg3 != Key2Reg2){
 80002aa:	4b15      	ldr	r3, [pc, #84]	; (8000300 <getKey2Input+0x94>)
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	4b12      	ldr	r3, [pc, #72]	; (80002f8 <getKey2Input+0x8c>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d00e      	beq.n	80002d4 <getKey2Input+0x68>
			Key2Reg3 = Key2Reg2;
 80002b6:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <getKey2Input+0x8c>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a11      	ldr	r2, [pc, #68]	; (8000300 <getKey2Input+0x94>)
 80002bc:	6013      	str	r3, [r2, #0]
			if (Key2Reg2 == PRESSED_STATE){
 80002be:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <getKey2Input+0x8c>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d112      	bne.n	80002ec <getKey2Input+0x80>
				//TODO
				button2_flag = 1;
 80002c6:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <getKey2Input+0x98>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	601a      	str	r2, [r3, #0]
				TimerForKey2Press = 200;
 80002cc:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <getKey2Input+0x9c>)
 80002ce:	22c8      	movs	r2, #200	; 0xc8
 80002d0:	601a      	str	r2, [r3, #0]
			if (TimerForKey2Press == 0){
				Key2Reg3 = NORMAL_STATE;
			}
		}
	}
}
 80002d2:	e00b      	b.n	80002ec <getKey2Input+0x80>
			TimerForKey2Press--;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <getKey2Input+0x9c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	3b01      	subs	r3, #1
 80002da:	4a0b      	ldr	r2, [pc, #44]	; (8000308 <getKey2Input+0x9c>)
 80002dc:	6013      	str	r3, [r2, #0]
			if (TimerForKey2Press == 0){
 80002de:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <getKey2Input+0x9c>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d102      	bne.n	80002ec <getKey2Input+0x80>
				Key2Reg3 = NORMAL_STATE;
 80002e6:	4b06      	ldr	r3, [pc, #24]	; (8000300 <getKey2Input+0x94>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	601a      	str	r2, [r3, #0]
}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000018 	.word	0x20000018
 80002f4:	20000014 	.word	0x20000014
 80002f8:	2000001c 	.word	0x2000001c
 80002fc:	40010c00 	.word	0x40010c00
 8000300:	20000020 	.word	0x20000020
 8000304:	2000007c 	.word	0x2000007c
 8000308:	20000024 	.word	0x20000024

0800030c <getKey3Input>:


void getKey3Input(){
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	Key3Reg0 = Key3Reg1;
 8000310:	4b1f      	ldr	r3, [pc, #124]	; (8000390 <getKey3Input+0x84>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a1f      	ldr	r2, [pc, #124]	; (8000394 <getKey3Input+0x88>)
 8000316:	6013      	str	r3, [r2, #0]
	Key3Reg1 = Key3Reg2;
 8000318:	4b1f      	ldr	r3, [pc, #124]	; (8000398 <getKey3Input+0x8c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a1c      	ldr	r2, [pc, #112]	; (8000390 <getKey3Input+0x84>)
 800031e:	6013      	str	r3, [r2, #0]
	Key3Reg2 = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000320:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000324:	481d      	ldr	r0, [pc, #116]	; (800039c <getKey3Input+0x90>)
 8000326:	f001 fec9 	bl	80020bc <HAL_GPIO_ReadPin>
 800032a:	4603      	mov	r3, r0
 800032c:	461a      	mov	r2, r3
 800032e:	4b1a      	ldr	r3, [pc, #104]	; (8000398 <getKey3Input+0x8c>)
 8000330:	601a      	str	r2, [r3, #0]
	if ((Key3Reg0 == Key3Reg1) && (Key3Reg1 == Key3Reg2)){
 8000332:	4b18      	ldr	r3, [pc, #96]	; (8000394 <getKey3Input+0x88>)
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	4b16      	ldr	r3, [pc, #88]	; (8000390 <getKey3Input+0x84>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	429a      	cmp	r2, r3
 800033c:	d126      	bne.n	800038c <getKey3Input+0x80>
 800033e:	4b14      	ldr	r3, [pc, #80]	; (8000390 <getKey3Input+0x84>)
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	4b15      	ldr	r3, [pc, #84]	; (8000398 <getKey3Input+0x8c>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	429a      	cmp	r2, r3
 8000348:	d120      	bne.n	800038c <getKey3Input+0x80>
		if (Key3Reg3 != Key3Reg2){
 800034a:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <getKey3Input+0x94>)
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	4b12      	ldr	r3, [pc, #72]	; (8000398 <getKey3Input+0x8c>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	429a      	cmp	r2, r3
 8000354:	d00e      	beq.n	8000374 <getKey3Input+0x68>
			Key3Reg3 = Key3Reg2;
 8000356:	4b10      	ldr	r3, [pc, #64]	; (8000398 <getKey3Input+0x8c>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a11      	ldr	r2, [pc, #68]	; (80003a0 <getKey3Input+0x94>)
 800035c:	6013      	str	r3, [r2, #0]
			if (Key3Reg2 == PRESSED_STATE){
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <getKey3Input+0x8c>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d112      	bne.n	800038c <getKey3Input+0x80>
				//TODO
				button3_flag = 1;
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <getKey3Input+0x98>)
 8000368:	2201      	movs	r2, #1
 800036a:	601a      	str	r2, [r3, #0]
				TimerForKey3Press = 200;
 800036c:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <getKey3Input+0x9c>)
 800036e:	22c8      	movs	r2, #200	; 0xc8
 8000370:	601a      	str	r2, [r3, #0]
			if (TimerForKey3Press == 0){
				Key3Reg3 = NORMAL_STATE;
			}
		}
	}
}
 8000372:	e00b      	b.n	800038c <getKey3Input+0x80>
			TimerForKey3Press--;
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <getKey3Input+0x9c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	3b01      	subs	r3, #1
 800037a:	4a0b      	ldr	r2, [pc, #44]	; (80003a8 <getKey3Input+0x9c>)
 800037c:	6013      	str	r3, [r2, #0]
			if (TimerForKey3Press == 0){
 800037e:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <getKey3Input+0x9c>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d102      	bne.n	800038c <getKey3Input+0x80>
				Key3Reg3 = NORMAL_STATE;
 8000386:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <getKey3Input+0x94>)
 8000388:	2201      	movs	r2, #1
 800038a:	601a      	str	r2, [r3, #0]
}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}
 8000390:	2000002c 	.word	0x2000002c
 8000394:	20000028 	.word	0x20000028
 8000398:	20000030 	.word	0x20000030
 800039c:	40010c00 	.word	0x40010c00
 80003a0:	20000034 	.word	0x20000034
 80003a4:	20000080 	.word	0x20000080
 80003a8:	20000038 	.word	0x20000038

080003ac <fsm_automatic_run>:

// Counters to replace timers
int counter1 = 0;
int counter3 = 0;

void fsm_automatic_run() {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
    switch (status) {
 80003b0:	4b85      	ldr	r3, [pc, #532]	; (80005c8 <fsm_automatic_run+0x21c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	3b01      	subs	r3, #1
 80003b6:	2b04      	cmp	r3, #4
 80003b8:	f200 8166 	bhi.w	8000688 <fsm_automatic_run+0x2dc>
 80003bc:	a201      	add	r2, pc, #4	; (adr r2, 80003c4 <fsm_automatic_run+0x18>)
 80003be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c2:	bf00      	nop
 80003c4:	080003d9 	.word	0x080003d9
 80003c8:	08000401 	.word	0x08000401
 80003cc:	08000497 	.word	0x08000497
 80003d0:	08000535 	.word	0x08000535
 80003d4:	080005ed 	.word	0x080005ed
    case INIT:
        // TODO
        setTimeInit();
 80003d8:	f000 fac0 	bl	800095c <setTimeInit>
        setLightInit();
 80003dc:	f000 fa9a 	bl	8000914 <setLightInit>
        status = RED_GREEN;
 80003e0:	4b79      	ldr	r3, [pc, #484]	; (80005c8 <fsm_automatic_run+0x21c>)
 80003e2:	2202      	movs	r2, #2
 80003e4:	601a      	str	r2, [r3, #0]
        counter3 = 100;  // 100 * 10ms = 1 second
 80003e6:	4b79      	ldr	r3, [pc, #484]	; (80005cc <fsm_automatic_run+0x220>)
 80003e8:	2264      	movs	r2, #100	; 0x64
 80003ea:	601a      	str	r2, [r3, #0]
        counter1 = green_time * 10;  // green_time in seconds
 80003ec:	4b78      	ldr	r3, [pc, #480]	; (80005d0 <fsm_automatic_run+0x224>)
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	4613      	mov	r3, r2
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	4413      	add	r3, r2
 80003f6:	005b      	lsls	r3, r3, #1
 80003f8:	461a      	mov	r2, r3
 80003fa:	4b76      	ldr	r3, [pc, #472]	; (80005d4 <fsm_automatic_run+0x228>)
 80003fc:	601a      	str	r2, [r3, #0]
        break;
 80003fe:	e14c      	b.n	800069a <fsm_automatic_run+0x2ee>

    case RED_GREEN:
        setRed_1();
 8000400:	f000 faca 	bl	8000998 <setRed_1>
        setGreen_2();
 8000404:	f000 fb20 	bl	8000a48 <setGreen_2>

        if (counter3 > 0) counter3--;
 8000408:	4b70      	ldr	r3, [pc, #448]	; (80005cc <fsm_automatic_run+0x220>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2b00      	cmp	r3, #0
 800040e:	dd04      	ble.n	800041a <fsm_automatic_run+0x6e>
 8000410:	4b6e      	ldr	r3, [pc, #440]	; (80005cc <fsm_automatic_run+0x220>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	3b01      	subs	r3, #1
 8000416:	4a6d      	ldr	r2, [pc, #436]	; (80005cc <fsm_automatic_run+0x220>)
 8000418:	6013      	str	r3, [r2, #0]
        if (counter3 == 0) {
 800041a:	4b6c      	ldr	r3, [pc, #432]	; (80005cc <fsm_automatic_run+0x220>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d10c      	bne.n	800043c <fsm_automatic_run+0x90>
            red_time_temp--;
 8000422:	4b6d      	ldr	r3, [pc, #436]	; (80005d8 <fsm_automatic_run+0x22c>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	3b01      	subs	r3, #1
 8000428:	4a6b      	ldr	r2, [pc, #428]	; (80005d8 <fsm_automatic_run+0x22c>)
 800042a:	6013      	str	r3, [r2, #0]
            green_time_temp--;
 800042c:	4b6b      	ldr	r3, [pc, #428]	; (80005dc <fsm_automatic_run+0x230>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	3b01      	subs	r3, #1
 8000432:	4a6a      	ldr	r2, [pc, #424]	; (80005dc <fsm_automatic_run+0x230>)
 8000434:	6013      	str	r3, [r2, #0]
            counter3 = 100;  // Reset counter3 for the next 1 second
 8000436:	4b65      	ldr	r3, [pc, #404]	; (80005cc <fsm_automatic_run+0x220>)
 8000438:	2264      	movs	r2, #100	; 0x64
 800043a:	601a      	str	r2, [r3, #0]
        }

        if (counter1 > 0) counter1--;
 800043c:	4b65      	ldr	r3, [pc, #404]	; (80005d4 <fsm_automatic_run+0x228>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	dd04      	ble.n	800044e <fsm_automatic_run+0xa2>
 8000444:	4b63      	ldr	r3, [pc, #396]	; (80005d4 <fsm_automatic_run+0x228>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	3b01      	subs	r3, #1
 800044a:	4a62      	ldr	r2, [pc, #392]	; (80005d4 <fsm_automatic_run+0x228>)
 800044c:	6013      	str	r3, [r2, #0]
        if (counter1 <= 0) {
 800044e:	4b61      	ldr	r3, [pc, #388]	; (80005d4 <fsm_automatic_run+0x228>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	2b00      	cmp	r3, #0
 8000454:	dc0f      	bgt.n	8000476 <fsm_automatic_run+0xca>
            status = RED_AMBER;
 8000456:	4b5c      	ldr	r3, [pc, #368]	; (80005c8 <fsm_automatic_run+0x21c>)
 8000458:	2203      	movs	r2, #3
 800045a:	601a      	str	r2, [r3, #0]
            green_time_temp = green_time;
 800045c:	4b5c      	ldr	r3, [pc, #368]	; (80005d0 <fsm_automatic_run+0x224>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a5e      	ldr	r2, [pc, #376]	; (80005dc <fsm_automatic_run+0x230>)
 8000462:	6013      	str	r3, [r2, #0]
            counter1 = amber_time * 10;
 8000464:	4b5e      	ldr	r3, [pc, #376]	; (80005e0 <fsm_automatic_run+0x234>)
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	4613      	mov	r3, r2
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	4413      	add	r3, r2
 800046e:	005b      	lsls	r3, r3, #1
 8000470:	461a      	mov	r2, r3
 8000472:	4b58      	ldr	r3, [pc, #352]	; (80005d4 <fsm_automatic_run+0x228>)
 8000474:	601a      	str	r2, [r3, #0]
        }

        if (isButton1Pressed() == 1) {
 8000476:	f7ff fe69 	bl	800014c <isButton1Pressed>
 800047a:	4603      	mov	r3, r0
 800047c:	2b01      	cmp	r3, #1
 800047e:	f040 8105 	bne.w	800068c <fsm_automatic_run+0x2e0>
            setTimeInit();
 8000482:	f000 fa6b 	bl	800095c <setTimeInit>
            status = MAN_RED;
 8000486:	4b50      	ldr	r3, [pc, #320]	; (80005c8 <fsm_automatic_run+0x21c>)
 8000488:	220c      	movs	r2, #12
 800048a:	601a      	str	r2, [r3, #0]
            counter1 = 300;  // 3 seconds
 800048c:	4b51      	ldr	r3, [pc, #324]	; (80005d4 <fsm_automatic_run+0x228>)
 800048e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000492:	601a      	str	r2, [r3, #0]
        }
        break;
 8000494:	e0fa      	b.n	800068c <fsm_automatic_run+0x2e0>

    case RED_AMBER:
        setRed_1();
 8000496:	f000 fa7f 	bl	8000998 <setRed_1>
        setYellow_2();
 800049a:	f000 faeb 	bl	8000a74 <setYellow_2>

        if (counter3 > 0) counter3--;
 800049e:	4b4b      	ldr	r3, [pc, #300]	; (80005cc <fsm_automatic_run+0x220>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	dd04      	ble.n	80004b0 <fsm_automatic_run+0x104>
 80004a6:	4b49      	ldr	r3, [pc, #292]	; (80005cc <fsm_automatic_run+0x220>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	3b01      	subs	r3, #1
 80004ac:	4a47      	ldr	r2, [pc, #284]	; (80005cc <fsm_automatic_run+0x220>)
 80004ae:	6013      	str	r3, [r2, #0]
        if (counter3 == 0) {
 80004b0:	4b46      	ldr	r3, [pc, #280]	; (80005cc <fsm_automatic_run+0x220>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d10c      	bne.n	80004d2 <fsm_automatic_run+0x126>
            red_time_temp--;
 80004b8:	4b47      	ldr	r3, [pc, #284]	; (80005d8 <fsm_automatic_run+0x22c>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	3b01      	subs	r3, #1
 80004be:	4a46      	ldr	r2, [pc, #280]	; (80005d8 <fsm_automatic_run+0x22c>)
 80004c0:	6013      	str	r3, [r2, #0]
            amber_time_temp--;
 80004c2:	4b48      	ldr	r3, [pc, #288]	; (80005e4 <fsm_automatic_run+0x238>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	3b01      	subs	r3, #1
 80004c8:	4a46      	ldr	r2, [pc, #280]	; (80005e4 <fsm_automatic_run+0x238>)
 80004ca:	6013      	str	r3, [r2, #0]
            counter3 = 100;
 80004cc:	4b3f      	ldr	r3, [pc, #252]	; (80005cc <fsm_automatic_run+0x220>)
 80004ce:	2264      	movs	r2, #100	; 0x64
 80004d0:	601a      	str	r2, [r3, #0]
        }

        if (counter1 > 0) counter1--;
 80004d2:	4b40      	ldr	r3, [pc, #256]	; (80005d4 <fsm_automatic_run+0x228>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	dd04      	ble.n	80004e4 <fsm_automatic_run+0x138>
 80004da:	4b3e      	ldr	r3, [pc, #248]	; (80005d4 <fsm_automatic_run+0x228>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	3b01      	subs	r3, #1
 80004e0:	4a3c      	ldr	r2, [pc, #240]	; (80005d4 <fsm_automatic_run+0x228>)
 80004e2:	6013      	str	r3, [r2, #0]
        if (counter1 == 0) {
 80004e4:	4b3b      	ldr	r3, [pc, #236]	; (80005d4 <fsm_automatic_run+0x228>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d113      	bne.n	8000514 <fsm_automatic_run+0x168>
            status = GREEN_RED;
 80004ec:	4b36      	ldr	r3, [pc, #216]	; (80005c8 <fsm_automatic_run+0x21c>)
 80004ee:	2204      	movs	r2, #4
 80004f0:	601a      	str	r2, [r3, #0]
            amber_time_temp = amber_time;
 80004f2:	4b3b      	ldr	r3, [pc, #236]	; (80005e0 <fsm_automatic_run+0x234>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a3b      	ldr	r2, [pc, #236]	; (80005e4 <fsm_automatic_run+0x238>)
 80004f8:	6013      	str	r3, [r2, #0]
            red_time_temp = red_time;
 80004fa:	4b3b      	ldr	r3, [pc, #236]	; (80005e8 <fsm_automatic_run+0x23c>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a36      	ldr	r2, [pc, #216]	; (80005d8 <fsm_automatic_run+0x22c>)
 8000500:	6013      	str	r3, [r2, #0]
            counter1 = green_time * 10;
 8000502:	4b33      	ldr	r3, [pc, #204]	; (80005d0 <fsm_automatic_run+0x224>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	4613      	mov	r3, r2
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	4413      	add	r3, r2
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	461a      	mov	r2, r3
 8000510:	4b30      	ldr	r3, [pc, #192]	; (80005d4 <fsm_automatic_run+0x228>)
 8000512:	601a      	str	r2, [r3, #0]
        }

        if (isButton1Pressed() == 1) {
 8000514:	f7ff fe1a 	bl	800014c <isButton1Pressed>
 8000518:	4603      	mov	r3, r0
 800051a:	2b01      	cmp	r3, #1
 800051c:	f040 80b8 	bne.w	8000690 <fsm_automatic_run+0x2e4>
            setTimeInit();
 8000520:	f000 fa1c 	bl	800095c <setTimeInit>
            status = MAN_RED;
 8000524:	4b28      	ldr	r3, [pc, #160]	; (80005c8 <fsm_automatic_run+0x21c>)
 8000526:	220c      	movs	r2, #12
 8000528:	601a      	str	r2, [r3, #0]
            counter1 = 1000;  // 10 seconds
 800052a:	4b2a      	ldr	r3, [pc, #168]	; (80005d4 <fsm_automatic_run+0x228>)
 800052c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000530:	601a      	str	r2, [r3, #0]
        }
        break;
 8000532:	e0ad      	b.n	8000690 <fsm_automatic_run+0x2e4>

    case GREEN_RED:
        setGreen_1();
 8000534:	f000 fa46 	bl	80009c4 <setGreen_1>
        setRed_2();
 8000538:	f000 fa70 	bl	8000a1c <setRed_2>

        if (counter3 > 0) counter3--;
 800053c:	4b23      	ldr	r3, [pc, #140]	; (80005cc <fsm_automatic_run+0x220>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	dd04      	ble.n	800054e <fsm_automatic_run+0x1a2>
 8000544:	4b21      	ldr	r3, [pc, #132]	; (80005cc <fsm_automatic_run+0x220>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	3b01      	subs	r3, #1
 800054a:	4a20      	ldr	r2, [pc, #128]	; (80005cc <fsm_automatic_run+0x220>)
 800054c:	6013      	str	r3, [r2, #0]
        if (counter3 == 0) {
 800054e:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <fsm_automatic_run+0x220>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d10c      	bne.n	8000570 <fsm_automatic_run+0x1c4>
            red_time_temp--;
 8000556:	4b20      	ldr	r3, [pc, #128]	; (80005d8 <fsm_automatic_run+0x22c>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	3b01      	subs	r3, #1
 800055c:	4a1e      	ldr	r2, [pc, #120]	; (80005d8 <fsm_automatic_run+0x22c>)
 800055e:	6013      	str	r3, [r2, #0]
            green_time_temp--;
 8000560:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <fsm_automatic_run+0x230>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	3b01      	subs	r3, #1
 8000566:	4a1d      	ldr	r2, [pc, #116]	; (80005dc <fsm_automatic_run+0x230>)
 8000568:	6013      	str	r3, [r2, #0]
            counter3 = 100;
 800056a:	4b18      	ldr	r3, [pc, #96]	; (80005cc <fsm_automatic_run+0x220>)
 800056c:	2264      	movs	r2, #100	; 0x64
 800056e:	601a      	str	r2, [r3, #0]
        }

        if (counter1 > 0) counter1--;
 8000570:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <fsm_automatic_run+0x228>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	dd04      	ble.n	8000582 <fsm_automatic_run+0x1d6>
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <fsm_automatic_run+0x228>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	3b01      	subs	r3, #1
 800057e:	4a15      	ldr	r2, [pc, #84]	; (80005d4 <fsm_automatic_run+0x228>)
 8000580:	6013      	str	r3, [r2, #0]
        if (counter1 == 0) {
 8000582:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <fsm_automatic_run+0x228>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d10f      	bne.n	80005aa <fsm_automatic_run+0x1fe>
            status = AMBER_RED;
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <fsm_automatic_run+0x21c>)
 800058c:	2205      	movs	r2, #5
 800058e:	601a      	str	r2, [r3, #0]
            green_time_temp = green_time;
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <fsm_automatic_run+0x224>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a11      	ldr	r2, [pc, #68]	; (80005dc <fsm_automatic_run+0x230>)
 8000596:	6013      	str	r3, [r2, #0]
            counter1 = amber_time * 10;
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <fsm_automatic_run+0x234>)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	4613      	mov	r3, r2
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	4413      	add	r3, r2
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	461a      	mov	r2, r3
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <fsm_automatic_run+0x228>)
 80005a8:	601a      	str	r2, [r3, #0]
        }

        if (isButton1Pressed() == 1) {
 80005aa:	f7ff fdcf 	bl	800014c <isButton1Pressed>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d16f      	bne.n	8000694 <fsm_automatic_run+0x2e8>
            setTimeInit();
 80005b4:	f000 f9d2 	bl	800095c <setTimeInit>
            status = MAN_RED;
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <fsm_automatic_run+0x21c>)
 80005ba:	220c      	movs	r2, #12
 80005bc:	601a      	str	r2, [r3, #0]
            counter1 = 1000;  // 10 seconds
 80005be:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <fsm_automatic_run+0x228>)
 80005c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005c4:	601a      	str	r2, [r3, #0]
        }
        break;
 80005c6:	e065      	b.n	8000694 <fsm_automatic_run+0x2e8>
 80005c8:	2000003c 	.word	0x2000003c
 80005cc:	20000088 	.word	0x20000088
 80005d0:	20000044 	.word	0x20000044
 80005d4:	20000084 	.word	0x20000084
 80005d8:	20000098 	.word	0x20000098
 80005dc:	2000009c 	.word	0x2000009c
 80005e0:	20000048 	.word	0x20000048
 80005e4:	200000a0 	.word	0x200000a0
 80005e8:	20000040 	.word	0x20000040

    case AMBER_RED:
        setYellow_1();
 80005ec:	f000 fa00 	bl	80009f0 <setYellow_1>
        setRed_2();
 80005f0:	f000 fa14 	bl	8000a1c <setRed_2>

        if (counter3 > 0) counter3--;
 80005f4:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <fsm_automatic_run+0x2f4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	dd04      	ble.n	8000606 <fsm_automatic_run+0x25a>
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <fsm_automatic_run+0x2f4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	3b01      	subs	r3, #1
 8000602:	4a27      	ldr	r2, [pc, #156]	; (80006a0 <fsm_automatic_run+0x2f4>)
 8000604:	6013      	str	r3, [r2, #0]
        if (counter3 == 0) {
 8000606:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <fsm_automatic_run+0x2f4>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d10c      	bne.n	8000628 <fsm_automatic_run+0x27c>
            red_time_temp--;
 800060e:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <fsm_automatic_run+0x2f8>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	3b01      	subs	r3, #1
 8000614:	4a23      	ldr	r2, [pc, #140]	; (80006a4 <fsm_automatic_run+0x2f8>)
 8000616:	6013      	str	r3, [r2, #0]
            amber_time_temp--;
 8000618:	4b23      	ldr	r3, [pc, #140]	; (80006a8 <fsm_automatic_run+0x2fc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	3b01      	subs	r3, #1
 800061e:	4a22      	ldr	r2, [pc, #136]	; (80006a8 <fsm_automatic_run+0x2fc>)
 8000620:	6013      	str	r3, [r2, #0]
            counter3 = 100;
 8000622:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <fsm_automatic_run+0x2f4>)
 8000624:	2264      	movs	r2, #100	; 0x64
 8000626:	601a      	str	r2, [r3, #0]
        }

        if (counter1 > 0) counter1--;
 8000628:	4b20      	ldr	r3, [pc, #128]	; (80006ac <fsm_automatic_run+0x300>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	dd04      	ble.n	800063a <fsm_automatic_run+0x28e>
 8000630:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <fsm_automatic_run+0x300>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	3b01      	subs	r3, #1
 8000636:	4a1d      	ldr	r2, [pc, #116]	; (80006ac <fsm_automatic_run+0x300>)
 8000638:	6013      	str	r3, [r2, #0]
        if (counter1 == 0) {
 800063a:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <fsm_automatic_run+0x300>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d113      	bne.n	800066a <fsm_automatic_run+0x2be>
            status = RED_GREEN;
 8000642:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <fsm_automatic_run+0x304>)
 8000644:	2202      	movs	r2, #2
 8000646:	601a      	str	r2, [r3, #0]
            red_time_temp = red_time;
 8000648:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <fsm_automatic_run+0x308>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a15      	ldr	r2, [pc, #84]	; (80006a4 <fsm_automatic_run+0x2f8>)
 800064e:	6013      	str	r3, [r2, #0]
            amber_time_temp = amber_time;
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <fsm_automatic_run+0x30c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <fsm_automatic_run+0x2fc>)
 8000656:	6013      	str	r3, [r2, #0]
            counter1 = green_time * 10;
 8000658:	4b18      	ldr	r3, [pc, #96]	; (80006bc <fsm_automatic_run+0x310>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4613      	mov	r3, r2
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	4413      	add	r3, r2
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	461a      	mov	r2, r3
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <fsm_automatic_run+0x300>)
 8000668:	601a      	str	r2, [r3, #0]
        }

        if (isButton1Pressed() == 1) {
 800066a:	f7ff fd6f 	bl	800014c <isButton1Pressed>
 800066e:	4603      	mov	r3, r0
 8000670:	2b01      	cmp	r3, #1
 8000672:	d111      	bne.n	8000698 <fsm_automatic_run+0x2ec>
            setTimeInit();
 8000674:	f000 f972 	bl	800095c <setTimeInit>
            status = RED_GREEN;
 8000678:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <fsm_automatic_run+0x304>)
 800067a:	2202      	movs	r2, #2
 800067c:	601a      	str	r2, [r3, #0]
            counter1 = 1000;  // 10 seconds
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <fsm_automatic_run+0x300>)
 8000680:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000684:	601a      	str	r2, [r3, #0]
        }
        break;
 8000686:	e007      	b.n	8000698 <fsm_automatic_run+0x2ec>

    default:
        break;
 8000688:	bf00      	nop
 800068a:	e006      	b.n	800069a <fsm_automatic_run+0x2ee>
        break;
 800068c:	bf00      	nop
 800068e:	e004      	b.n	800069a <fsm_automatic_run+0x2ee>
        break;
 8000690:	bf00      	nop
 8000692:	e002      	b.n	800069a <fsm_automatic_run+0x2ee>
        break;
 8000694:	bf00      	nop
 8000696:	e000      	b.n	800069a <fsm_automatic_run+0x2ee>
        break;
 8000698:	bf00      	nop
    }
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000088 	.word	0x20000088
 80006a4:	20000098 	.word	0x20000098
 80006a8:	200000a0 	.word	0x200000a0
 80006ac:	20000084 	.word	0x20000084
 80006b0:	2000003c 	.word	0x2000003c
 80006b4:	20000040 	.word	0x20000040
 80006b8:	20000048 	.word	0x20000048
 80006bc:	20000044 	.word	0x20000044

080006c0 <fsm_manual_run>:

#include "fsm_manual.h"

int counter_led = 0;

void fsm_manual_run() {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
    switch (status) {
 80006c4:	4b8a      	ldr	r3, [pc, #552]	; (80008f0 <fsm_manual_run+0x230>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b0e      	cmp	r3, #14
 80006ca:	f000 80b1 	beq.w	8000830 <fsm_manual_run+0x170>
 80006ce:	2b0e      	cmp	r3, #14
 80006d0:	f300 8105 	bgt.w	80008de <fsm_manual_run+0x21e>
 80006d4:	2b0c      	cmp	r3, #12
 80006d6:	d002      	beq.n	80006de <fsm_manual_run+0x1e>
 80006d8:	2b0d      	cmp	r3, #13
 80006da:	d055      	beq.n	8000788 <fsm_manual_run+0xc8>
            status = SET_GREEN;
        }
        break;

    default:
        break;
 80006dc:	e0ff      	b.n	80008de <fsm_manual_run+0x21e>
        if (counter_led > 0) counter_led--;
 80006de:	4b85      	ldr	r3, [pc, #532]	; (80008f4 <fsm_manual_run+0x234>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	dd04      	ble.n	80006f0 <fsm_manual_run+0x30>
 80006e6:	4b83      	ldr	r3, [pc, #524]	; (80008f4 <fsm_manual_run+0x234>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	3b01      	subs	r3, #1
 80006ec:	4a81      	ldr	r2, [pc, #516]	; (80008f4 <fsm_manual_run+0x234>)
 80006ee:	6013      	str	r3, [r2, #0]
        if (counter_led == 0) {
 80006f0:	4b80      	ldr	r3, [pc, #512]	; (80008f4 <fsm_manual_run+0x234>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d104      	bne.n	8000702 <fsm_manual_run+0x42>
            setToggleRed();
 80006f8:	f000 f9d2 	bl	8000aa0 <setToggleRed>
            counter_led = 50;
 80006fc:	4b7d      	ldr	r3, [pc, #500]	; (80008f4 <fsm_manual_run+0x234>)
 80006fe:	2232      	movs	r2, #50	; 0x32
 8000700:	601a      	str	r2, [r3, #0]
        if (counter1 > 0) counter1--;
 8000702:	4b7d      	ldr	r3, [pc, #500]	; (80008f8 <fsm_manual_run+0x238>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	dd04      	ble.n	8000714 <fsm_manual_run+0x54>
 800070a:	4b7b      	ldr	r3, [pc, #492]	; (80008f8 <fsm_manual_run+0x238>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	3b01      	subs	r3, #1
 8000710:	4a79      	ldr	r2, [pc, #484]	; (80008f8 <fsm_manual_run+0x238>)
 8000712:	6013      	str	r3, [r2, #0]
        if (counter1 == 0) {
 8000714:	4b78      	ldr	r3, [pc, #480]	; (80008f8 <fsm_manual_run+0x238>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d106      	bne.n	800072a <fsm_manual_run+0x6a>
            status = RED_GREEN;
 800071c:	4b74      	ldr	r3, [pc, #464]	; (80008f0 <fsm_manual_run+0x230>)
 800071e:	2202      	movs	r2, #2
 8000720:	601a      	str	r2, [r3, #0]
            counter1 = 1000;
 8000722:	4b75      	ldr	r3, [pc, #468]	; (80008f8 <fsm_manual_run+0x238>)
 8000724:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000728:	601a      	str	r2, [r3, #0]
        if (isButton1Pressed() == 1) {
 800072a:	f7ff fd0f 	bl	800014c <isButton1Pressed>
 800072e:	4603      	mov	r3, r0
 8000730:	2b01      	cmp	r3, #1
 8000732:	d10a      	bne.n	800074a <fsm_manual_run+0x8a>
            red_time_temp = red_time;
 8000734:	4b71      	ldr	r3, [pc, #452]	; (80008fc <fsm_manual_run+0x23c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a71      	ldr	r2, [pc, #452]	; (8000900 <fsm_manual_run+0x240>)
 800073a:	6013      	str	r3, [r2, #0]
            status = MAN_AMBER;
 800073c:	4b6c      	ldr	r3, [pc, #432]	; (80008f0 <fsm_manual_run+0x230>)
 800073e:	220d      	movs	r2, #13
 8000740:	601a      	str	r2, [r3, #0]
            counter1 = 1000;
 8000742:	4b6d      	ldr	r3, [pc, #436]	; (80008f8 <fsm_manual_run+0x238>)
 8000744:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000748:	601a      	str	r2, [r3, #0]
        if (isButton2Pressed() == 1) {
 800074a:	f7ff fd11 	bl	8000170 <isButton2Pressed>
 800074e:	4603      	mov	r3, r0
 8000750:	2b01      	cmp	r3, #1
 8000752:	d10f      	bne.n	8000774 <fsm_manual_run+0xb4>
            red_time_temp++;
 8000754:	4b6a      	ldr	r3, [pc, #424]	; (8000900 <fsm_manual_run+0x240>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	3301      	adds	r3, #1
 800075a:	4a69      	ldr	r2, [pc, #420]	; (8000900 <fsm_manual_run+0x240>)
 800075c:	6013      	str	r3, [r2, #0]
            if (red_time_temp > 99) red_time_temp = 0;
 800075e:	4b68      	ldr	r3, [pc, #416]	; (8000900 <fsm_manual_run+0x240>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b63      	cmp	r3, #99	; 0x63
 8000764:	dd02      	ble.n	800076c <fsm_manual_run+0xac>
 8000766:	4b66      	ldr	r3, [pc, #408]	; (8000900 <fsm_manual_run+0x240>)
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
            counter1 = 1000;
 800076c:	4b62      	ldr	r3, [pc, #392]	; (80008f8 <fsm_manual_run+0x238>)
 800076e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000772:	601a      	str	r2, [r3, #0]
        if (isButton3Pressed() == 1) {
 8000774:	f7ff fd0e 	bl	8000194 <isButton3Pressed>
 8000778:	4603      	mov	r3, r0
 800077a:	2b01      	cmp	r3, #1
 800077c:	f040 80b1 	bne.w	80008e2 <fsm_manual_run+0x222>
            status = SET_RED;
 8000780:	4b5b      	ldr	r3, [pc, #364]	; (80008f0 <fsm_manual_run+0x230>)
 8000782:	2215      	movs	r2, #21
 8000784:	601a      	str	r2, [r3, #0]
        break;
 8000786:	e0ac      	b.n	80008e2 <fsm_manual_run+0x222>
        if (counter_led > 0) counter_led--;
 8000788:	4b5a      	ldr	r3, [pc, #360]	; (80008f4 <fsm_manual_run+0x234>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	dd04      	ble.n	800079a <fsm_manual_run+0xda>
 8000790:	4b58      	ldr	r3, [pc, #352]	; (80008f4 <fsm_manual_run+0x234>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	3b01      	subs	r3, #1
 8000796:	4a57      	ldr	r2, [pc, #348]	; (80008f4 <fsm_manual_run+0x234>)
 8000798:	6013      	str	r3, [r2, #0]
        if (counter_led == 0) {
 800079a:	4b56      	ldr	r3, [pc, #344]	; (80008f4 <fsm_manual_run+0x234>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d104      	bne.n	80007ac <fsm_manual_run+0xec>
            setToggleYellow();
 80007a2:	f000 f9c1 	bl	8000b28 <setToggleYellow>
            counter_led = 50;
 80007a6:	4b53      	ldr	r3, [pc, #332]	; (80008f4 <fsm_manual_run+0x234>)
 80007a8:	2232      	movs	r2, #50	; 0x32
 80007aa:	601a      	str	r2, [r3, #0]
        if (counter1 > 0) counter1--;
 80007ac:	4b52      	ldr	r3, [pc, #328]	; (80008f8 <fsm_manual_run+0x238>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	dd04      	ble.n	80007be <fsm_manual_run+0xfe>
 80007b4:	4b50      	ldr	r3, [pc, #320]	; (80008f8 <fsm_manual_run+0x238>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	4a4f      	ldr	r2, [pc, #316]	; (80008f8 <fsm_manual_run+0x238>)
 80007bc:	6013      	str	r3, [r2, #0]
        if (counter1 == 0) {
 80007be:	4b4e      	ldr	r3, [pc, #312]	; (80008f8 <fsm_manual_run+0x238>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d106      	bne.n	80007d4 <fsm_manual_run+0x114>
            status = RED_GREEN;
 80007c6:	4b4a      	ldr	r3, [pc, #296]	; (80008f0 <fsm_manual_run+0x230>)
 80007c8:	2202      	movs	r2, #2
 80007ca:	601a      	str	r2, [r3, #0]
            counter1 = 1000;
 80007cc:	4b4a      	ldr	r3, [pc, #296]	; (80008f8 <fsm_manual_run+0x238>)
 80007ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007d2:	601a      	str	r2, [r3, #0]
        if (isButton1Pressed() == 1) {
 80007d4:	f7ff fcba 	bl	800014c <isButton1Pressed>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d10a      	bne.n	80007f4 <fsm_manual_run+0x134>
            amber_time_temp = amber_time;
 80007de:	4b49      	ldr	r3, [pc, #292]	; (8000904 <fsm_manual_run+0x244>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a49      	ldr	r2, [pc, #292]	; (8000908 <fsm_manual_run+0x248>)
 80007e4:	6013      	str	r3, [r2, #0]
            status = MAN_GREEN;
 80007e6:	4b42      	ldr	r3, [pc, #264]	; (80008f0 <fsm_manual_run+0x230>)
 80007e8:	220e      	movs	r2, #14
 80007ea:	601a      	str	r2, [r3, #0]
            counter1 = 1000;
 80007ec:	4b42      	ldr	r3, [pc, #264]	; (80008f8 <fsm_manual_run+0x238>)
 80007ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007f2:	601a      	str	r2, [r3, #0]
        if (isButton2Pressed() == 1) {
 80007f4:	f7ff fcbc 	bl	8000170 <isButton2Pressed>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d10f      	bne.n	800081e <fsm_manual_run+0x15e>
            amber_time_temp++;
 80007fe:	4b42      	ldr	r3, [pc, #264]	; (8000908 <fsm_manual_run+0x248>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	3301      	adds	r3, #1
 8000804:	4a40      	ldr	r2, [pc, #256]	; (8000908 <fsm_manual_run+0x248>)
 8000806:	6013      	str	r3, [r2, #0]
            if (amber_time_temp > 99) amber_time_temp = 0;
 8000808:	4b3f      	ldr	r3, [pc, #252]	; (8000908 <fsm_manual_run+0x248>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b63      	cmp	r3, #99	; 0x63
 800080e:	dd02      	ble.n	8000816 <fsm_manual_run+0x156>
 8000810:	4b3d      	ldr	r3, [pc, #244]	; (8000908 <fsm_manual_run+0x248>)
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
            counter1 = 1000;
 8000816:	4b38      	ldr	r3, [pc, #224]	; (80008f8 <fsm_manual_run+0x238>)
 8000818:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800081c:	601a      	str	r2, [r3, #0]
        if (isButton3Pressed() == 1) {
 800081e:	f7ff fcb9 	bl	8000194 <isButton3Pressed>
 8000822:	4603      	mov	r3, r0
 8000824:	2b01      	cmp	r3, #1
 8000826:	d15e      	bne.n	80008e6 <fsm_manual_run+0x226>
            status = SET_AMBER;
 8000828:	4b31      	ldr	r3, [pc, #196]	; (80008f0 <fsm_manual_run+0x230>)
 800082a:	2216      	movs	r2, #22
 800082c:	601a      	str	r2, [r3, #0]
        break;
 800082e:	e05a      	b.n	80008e6 <fsm_manual_run+0x226>
        if (counter_led > 0) counter_led--;
 8000830:	4b30      	ldr	r3, [pc, #192]	; (80008f4 <fsm_manual_run+0x234>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	dd04      	ble.n	8000842 <fsm_manual_run+0x182>
 8000838:	4b2e      	ldr	r3, [pc, #184]	; (80008f4 <fsm_manual_run+0x234>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	3b01      	subs	r3, #1
 800083e:	4a2d      	ldr	r2, [pc, #180]	; (80008f4 <fsm_manual_run+0x234>)
 8000840:	6013      	str	r3, [r2, #0]
        if (counter_led == 0) {
 8000842:	4b2c      	ldr	r3, [pc, #176]	; (80008f4 <fsm_manual_run+0x234>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d104      	bne.n	8000854 <fsm_manual_run+0x194>
            setToggleGreen();
 800084a:	f000 f94b 	bl	8000ae4 <setToggleGreen>
            counter_led = 50;
 800084e:	4b29      	ldr	r3, [pc, #164]	; (80008f4 <fsm_manual_run+0x234>)
 8000850:	2232      	movs	r2, #50	; 0x32
 8000852:	601a      	str	r2, [r3, #0]
        if (counter1 > 0) counter1--;
 8000854:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <fsm_manual_run+0x238>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	dd04      	ble.n	8000866 <fsm_manual_run+0x1a6>
 800085c:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <fsm_manual_run+0x238>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	3b01      	subs	r3, #1
 8000862:	4a25      	ldr	r2, [pc, #148]	; (80008f8 <fsm_manual_run+0x238>)
 8000864:	6013      	str	r3, [r2, #0]
        if (counter1 == 0) {
 8000866:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <fsm_manual_run+0x238>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d10a      	bne.n	8000884 <fsm_manual_run+0x1c4>
            green_time_temp = green_time;
 800086e:	4b27      	ldr	r3, [pc, #156]	; (800090c <fsm_manual_run+0x24c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a27      	ldr	r2, [pc, #156]	; (8000910 <fsm_manual_run+0x250>)
 8000874:	6013      	str	r3, [r2, #0]
            status = RED_GREEN;
 8000876:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <fsm_manual_run+0x230>)
 8000878:	2202      	movs	r2, #2
 800087a:	601a      	str	r2, [r3, #0]
            counter1 = 1000;
 800087c:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <fsm_manual_run+0x238>)
 800087e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000882:	601a      	str	r2, [r3, #0]
        if (isButton1Pressed() == 1) {
 8000884:	f7ff fc62 	bl	800014c <isButton1Pressed>
 8000888:	4603      	mov	r3, r0
 800088a:	2b01      	cmp	r3, #1
 800088c:	d109      	bne.n	80008a2 <fsm_manual_run+0x1e2>
            green_time_temp = green_time;
 800088e:	4b1f      	ldr	r3, [pc, #124]	; (800090c <fsm_manual_run+0x24c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a1f      	ldr	r2, [pc, #124]	; (8000910 <fsm_manual_run+0x250>)
 8000894:	6013      	str	r3, [r2, #0]
            status = INIT;
 8000896:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <fsm_manual_run+0x230>)
 8000898:	2201      	movs	r2, #1
 800089a:	601a      	str	r2, [r3, #0]
            counter1 = 100;
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <fsm_manual_run+0x238>)
 800089e:	2264      	movs	r2, #100	; 0x64
 80008a0:	601a      	str	r2, [r3, #0]
        if (isButton2Pressed() == 1) {
 80008a2:	f7ff fc65 	bl	8000170 <isButton2Pressed>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d10f      	bne.n	80008cc <fsm_manual_run+0x20c>
            green_time_temp++;
 80008ac:	4b18      	ldr	r3, [pc, #96]	; (8000910 <fsm_manual_run+0x250>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	3301      	adds	r3, #1
 80008b2:	4a17      	ldr	r2, [pc, #92]	; (8000910 <fsm_manual_run+0x250>)
 80008b4:	6013      	str	r3, [r2, #0]
            if (green_time_temp > 99) green_time_temp = 0;
 80008b6:	4b16      	ldr	r3, [pc, #88]	; (8000910 <fsm_manual_run+0x250>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b63      	cmp	r3, #99	; 0x63
 80008bc:	dd02      	ble.n	80008c4 <fsm_manual_run+0x204>
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <fsm_manual_run+0x250>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
            counter1 = 1000;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <fsm_manual_run+0x238>)
 80008c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008ca:	601a      	str	r2, [r3, #0]
        if (isButton3Pressed() == 1) {
 80008cc:	f7ff fc62 	bl	8000194 <isButton3Pressed>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d109      	bne.n	80008ea <fsm_manual_run+0x22a>
            status = SET_GREEN;
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <fsm_manual_run+0x230>)
 80008d8:	2217      	movs	r2, #23
 80008da:	601a      	str	r2, [r3, #0]
        break;
 80008dc:	e005      	b.n	80008ea <fsm_manual_run+0x22a>
        break;
 80008de:	bf00      	nop
 80008e0:	e004      	b.n	80008ec <fsm_manual_run+0x22c>
        break;
 80008e2:	bf00      	nop
 80008e4:	e002      	b.n	80008ec <fsm_manual_run+0x22c>
        break;
 80008e6:	bf00      	nop
 80008e8:	e000      	b.n	80008ec <fsm_manual_run+0x22c>
        break;
 80008ea:	bf00      	nop
    }
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	2000003c 	.word	0x2000003c
 80008f4:	2000008c 	.word	0x2000008c
 80008f8:	20000084 	.word	0x20000084
 80008fc:	20000040 	.word	0x20000040
 8000900:	20000098 	.word	0x20000098
 8000904:	20000048 	.word	0x20000048
 8000908:	200000a0 	.word	0x200000a0
 800090c:	20000044 	.word	0x20000044
 8000910:	2000009c 	.word	0x2000009c

08000914 <setLightInit>:
 *      Author: Admin
 */

#include "light_traffic.h"

void setLightInit(){
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2101      	movs	r1, #1
 800091c:	480e      	ldr	r0, [pc, #56]	; (8000958 <setLightInit+0x44>)
 800091e:	f001 fbe4 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GREEN_GPIO_Port, LED_1_GREEN_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2102      	movs	r1, #2
 8000926:	480c      	ldr	r0, [pc, #48]	; (8000958 <setLightInit+0x44>)
 8000928:	f001 fbdf 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_YELLOW_GPIO_Port, LED_1_YELLOW_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	2104      	movs	r1, #4
 8000930:	4809      	ldr	r0, [pc, #36]	; (8000958 <setLightInit+0x44>)
 8000932:	f001 fbda 	bl	80020ea <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_2_RED_GPIO_Port, LED_2_RED_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2108      	movs	r1, #8
 800093a:	4807      	ldr	r0, [pc, #28]	; (8000958 <setLightInit+0x44>)
 800093c:	f001 fbd5 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2110      	movs	r1, #16
 8000944:	4804      	ldr	r0, [pc, #16]	; (8000958 <setLightInit+0x44>)
 8000946:	f001 fbd0 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_YELLOW_GPIO_Port, LED_2_YELLOW_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2120      	movs	r1, #32
 800094e:	4802      	ldr	r0, [pc, #8]	; (8000958 <setLightInit+0x44>)
 8000950:	f001 fbcb 	bl	80020ea <HAL_GPIO_WritePin>
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40010c00 	.word	0x40010c00

0800095c <setTimeInit>:

void setTimeInit(){
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
	red_time_temp = red_time;
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <setTimeInit+0x24>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a07      	ldr	r2, [pc, #28]	; (8000984 <setTimeInit+0x28>)
 8000966:	6013      	str	r3, [r2, #0]
	green_time_temp = green_time;
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <setTimeInit+0x2c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a07      	ldr	r2, [pc, #28]	; (800098c <setTimeInit+0x30>)
 800096e:	6013      	str	r3, [r2, #0]
	amber_time_temp = amber_time;
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <setTimeInit+0x34>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a07      	ldr	r2, [pc, #28]	; (8000994 <setTimeInit+0x38>)
 8000976:	6013      	str	r3, [r2, #0]
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr
 8000980:	20000040 	.word	0x20000040
 8000984:	20000098 	.word	0x20000098
 8000988:	20000044 	.word	0x20000044
 800098c:	2000009c 	.word	0x2000009c
 8000990:	20000048 	.word	0x20000048
 8000994:	200000a0 	.word	0x200000a0

08000998 <setRed_1>:
//	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
//}

void setRed_1(){
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2101      	movs	r1, #1
 80009a0:	4807      	ldr	r0, [pc, #28]	; (80009c0 <setRed_1+0x28>)
 80009a2:	f001 fba2 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GREEN_GPIO_Port, LED_1_GREEN_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2102      	movs	r1, #2
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <setRed_1+0x28>)
 80009ac:	f001 fb9d 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_YELLOW_GPIO_Port, LED_1_YELLOW_Pin, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2104      	movs	r1, #4
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <setRed_1+0x28>)
 80009b6:	f001 fb98 	bl	80020ea <HAL_GPIO_WritePin>
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40010c00 	.word	0x40010c00

080009c4 <setGreen_1>:

void setGreen_1(){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, GPIO_PIN_RESET);;
 80009c8:	2200      	movs	r2, #0
 80009ca:	2101      	movs	r1, #1
 80009cc:	4807      	ldr	r0, [pc, #28]	; (80009ec <setGreen_1+0x28>)
 80009ce:	f001 fb8c 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GREEN_GPIO_Port, LED_1_GREEN_Pin, GPIO_PIN_SET);
 80009d2:	2201      	movs	r2, #1
 80009d4:	2102      	movs	r1, #2
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <setGreen_1+0x28>)
 80009d8:	f001 fb87 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_YELLOW_GPIO_Port, LED_1_YELLOW_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2104      	movs	r1, #4
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <setGreen_1+0x28>)
 80009e2:	f001 fb82 	bl	80020ea <HAL_GPIO_WritePin>
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40010c00 	.word	0x40010c00

080009f0 <setYellow_1>:

void setYellow_1(){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2101      	movs	r1, #1
 80009f8:	4807      	ldr	r0, [pc, #28]	; (8000a18 <setYellow_1+0x28>)
 80009fa:	f001 fb76 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GREEN_GPIO_Port, LED_1_GREEN_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2102      	movs	r1, #2
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <setYellow_1+0x28>)
 8000a04:	f001 fb71 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_YELLOW_GPIO_Port, LED_1_YELLOW_Pin, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2104      	movs	r1, #4
 8000a0c:	4802      	ldr	r0, [pc, #8]	; (8000a18 <setYellow_1+0x28>)
 8000a0e:	f001 fb6c 	bl	80020ea <HAL_GPIO_WritePin>
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40010c00 	.word	0x40010c00

08000a1c <setRed_2>:


void setRed_2(){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_2_RED_GPIO_Port, LED_2_RED_Pin, GPIO_PIN_SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	2108      	movs	r1, #8
 8000a24:	4807      	ldr	r0, [pc, #28]	; (8000a44 <setRed_2+0x28>)
 8000a26:	f001 fb60 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2110      	movs	r1, #16
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <setRed_2+0x28>)
 8000a30:	f001 fb5b 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_YELLOW_GPIO_Port, LED_2_YELLOW_Pin, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2120      	movs	r1, #32
 8000a38:	4802      	ldr	r0, [pc, #8]	; (8000a44 <setRed_2+0x28>)
 8000a3a:	f001 fb56 	bl	80020ea <HAL_GPIO_WritePin>
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40010c00 	.word	0x40010c00

08000a48 <setGreen_2>:

void setGreen_2(){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_2_RED_GPIO_Port, LED_2_RED_Pin, GPIO_PIN_RESET);;
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2108      	movs	r1, #8
 8000a50:	4807      	ldr	r0, [pc, #28]	; (8000a70 <setGreen_2+0x28>)
 8000a52:	f001 fb4a 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, GPIO_PIN_SET);
 8000a56:	2201      	movs	r2, #1
 8000a58:	2110      	movs	r1, #16
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <setGreen_2+0x28>)
 8000a5c:	f001 fb45 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_YELLOW_GPIO_Port, LED_2_YELLOW_Pin, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2120      	movs	r1, #32
 8000a64:	4802      	ldr	r0, [pc, #8]	; (8000a70 <setGreen_2+0x28>)
 8000a66:	f001 fb40 	bl	80020ea <HAL_GPIO_WritePin>
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40010c00 	.word	0x40010c00

08000a74 <setYellow_2>:

void setYellow_2(){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_2_RED_GPIO_Port, LED_2_RED_Pin, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2108      	movs	r1, #8
 8000a7c:	4807      	ldr	r0, [pc, #28]	; (8000a9c <setYellow_2+0x28>)
 8000a7e:	f001 fb34 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2110      	movs	r1, #16
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <setYellow_2+0x28>)
 8000a88:	f001 fb2f 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_YELLOW_GPIO_Port, LED_2_YELLOW_Pin, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2120      	movs	r1, #32
 8000a90:	4802      	ldr	r0, [pc, #8]	; (8000a9c <setYellow_2+0x28>)
 8000a92:	f001 fb2a 	bl	80020ea <HAL_GPIO_WritePin>
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40010c00 	.word	0x40010c00

08000aa0 <setToggleRed>:

void setToggleRed(){//2HZ
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_1_GREEN_GPIO_Port, LED_1_GREEN_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2102      	movs	r1, #2
 8000aa8:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <setToggleRed+0x40>)
 8000aaa:	f001 fb1e 	bl	80020ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_1_YELLOW_GPIO_Port, LED_1_YELLOW_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2104      	movs	r1, #4
 8000ab2:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <setToggleRed+0x40>)
 8000ab4:	f001 fb19 	bl	80020ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2110      	movs	r1, #16
 8000abc:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <setToggleRed+0x40>)
 8000abe:	f001 fb14 	bl	80020ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_YELLOW_GPIO_Port, LED_2_YELLOW_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2120      	movs	r1, #32
 8000ac6:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <setToggleRed+0x40>)
 8000ac8:	f001 fb0f 	bl	80020ea <HAL_GPIO_WritePin>

    // Toggle only the red LEDs on both sets
    HAL_GPIO_TogglePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin);
 8000acc:	2101      	movs	r1, #1
 8000ace:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <setToggleRed+0x40>)
 8000ad0:	f001 fb23 	bl	800211a <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(LED_2_RED_GPIO_Port, LED_2_RED_Pin);
 8000ad4:	2108      	movs	r1, #8
 8000ad6:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <setToggleRed+0x40>)
 8000ad8:	f001 fb1f 	bl	800211a <HAL_GPIO_TogglePin>

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40010c00 	.word	0x40010c00

08000ae4 <setToggleGreen>:

void setToggleGreen(){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2101      	movs	r1, #1
 8000aec:	480d      	ldr	r0, [pc, #52]	; (8000b24 <setToggleGreen+0x40>)
 8000aee:	f001 fafc 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED_1_GREEN_GPIO_Port, LED_1_GREEN_Pin);
 8000af2:	2102      	movs	r1, #2
 8000af4:	480b      	ldr	r0, [pc, #44]	; (8000b24 <setToggleGreen+0x40>)
 8000af6:	f001 fb10 	bl	800211a <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_1_YELLOW_GPIO_Port, LED_1_YELLOW_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2104      	movs	r1, #4
 8000afe:	4809      	ldr	r0, [pc, #36]	; (8000b24 <setToggleGreen+0x40>)
 8000b00:	f001 faf3 	bl	80020ea <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_2_RED_GPIO_Port, LED_2_RED_Pin, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2108      	movs	r1, #8
 8000b08:	4806      	ldr	r0, [pc, #24]	; (8000b24 <setToggleGreen+0x40>)
 8000b0a:	f001 faee 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin);
 8000b0e:	2110      	movs	r1, #16
 8000b10:	4804      	ldr	r0, [pc, #16]	; (8000b24 <setToggleGreen+0x40>)
 8000b12:	f001 fb02 	bl	800211a <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_2_YELLOW_GPIO_Port, LED_2_YELLOW_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2120      	movs	r1, #32
 8000b1a:	4802      	ldr	r0, [pc, #8]	; (8000b24 <setToggleGreen+0x40>)
 8000b1c:	f001 fae5 	bl	80020ea <HAL_GPIO_WritePin>
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40010c00 	.word	0x40010c00

08000b28 <setToggleYellow>:

void setToggleYellow(){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2101      	movs	r1, #1
 8000b30:	480d      	ldr	r0, [pc, #52]	; (8000b68 <setToggleYellow+0x40>)
 8000b32:	f001 fada 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GREEN_GPIO_Port, LED_1_GREEN_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2102      	movs	r1, #2
 8000b3a:	480b      	ldr	r0, [pc, #44]	; (8000b68 <setToggleYellow+0x40>)
 8000b3c:	f001 fad5 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED_1_YELLOW_GPIO_Port, LED_1_YELLOW_Pin);
 8000b40:	2104      	movs	r1, #4
 8000b42:	4809      	ldr	r0, [pc, #36]	; (8000b68 <setToggleYellow+0x40>)
 8000b44:	f001 fae9 	bl	800211a <HAL_GPIO_TogglePin>

	HAL_GPIO_WritePin(LED_2_RED_GPIO_Port, LED_2_RED_Pin, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2108      	movs	r1, #8
 8000b4c:	4806      	ldr	r0, [pc, #24]	; (8000b68 <setToggleYellow+0x40>)
 8000b4e:	f001 facc 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2110      	movs	r1, #16
 8000b56:	4804      	ldr	r0, [pc, #16]	; (8000b68 <setToggleYellow+0x40>)
 8000b58:	f001 fac7 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED_2_YELLOW_GPIO_Port, LED_2_YELLOW_Pin);
 8000b5c:	2120      	movs	r1, #32
 8000b5e:	4802      	ldr	r0, [pc, #8]	; (8000b68 <setToggleYellow+0x40>)
 8000b60:	f001 fadb 	bl	800211a <HAL_GPIO_TogglePin>
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40010c00 	.word	0x40010c00

08000b6c <get7SEG1Value>:

static int get7SEG1Value() {
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
	switch (status) {
 8000b70:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <get7SEG1Value+0x80>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	3b02      	subs	r3, #2
 8000b76:	2b0c      	cmp	r3, #12
 8000b78:	d831      	bhi.n	8000bde <get7SEG1Value+0x72>
 8000b7a:	a201      	add	r2, pc, #4	; (adr r2, 8000b80 <get7SEG1Value+0x14>)
 8000b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b80:	08000bb5 	.word	0x08000bb5
 8000b84:	08000bbb 	.word	0x08000bbb
 8000b88:	08000bc1 	.word	0x08000bc1
 8000b8c:	08000bc7 	.word	0x08000bc7
 8000b90:	08000bdf 	.word	0x08000bdf
 8000b94:	08000bdf 	.word	0x08000bdf
 8000b98:	08000bdf 	.word	0x08000bdf
 8000b9c:	08000bdf 	.word	0x08000bdf
 8000ba0:	08000bdf 	.word	0x08000bdf
 8000ba4:	08000bdf 	.word	0x08000bdf
 8000ba8:	08000bcd 	.word	0x08000bcd
 8000bac:	08000bd9 	.word	0x08000bd9
 8000bb0:	08000bd3 	.word	0x08000bd3
		case RED_GREEN:
			return red_time_temp;
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <get7SEG1Value+0x84>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	e013      	b.n	8000be2 <get7SEG1Value+0x76>
		case RED_AMBER:
			return red_time_temp;
 8000bba:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <get7SEG1Value+0x84>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	e010      	b.n	8000be2 <get7SEG1Value+0x76>
		case GREEN_RED:
			return green_time_temp;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <get7SEG1Value+0x88>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	e00d      	b.n	8000be2 <get7SEG1Value+0x76>
		case AMBER_RED:
			return amber_time_temp;
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <get7SEG1Value+0x8c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	e00a      	b.n	8000be2 <get7SEG1Value+0x76>
		case MAN_RED:
			return red_time_temp;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <get7SEG1Value+0x84>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	e007      	b.n	8000be2 <get7SEG1Value+0x76>
		case MAN_GREEN:
			return green_time_temp;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <get7SEG1Value+0x88>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	e004      	b.n	8000be2 <get7SEG1Value+0x76>
		case MAN_AMBER:
			return amber_time_temp;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <get7SEG1Value+0x8c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	e001      	b.n	8000be2 <get7SEG1Value+0x76>
		default:
			break;
 8000bde:	bf00      	nop
	}
	return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	2000003c 	.word	0x2000003c
 8000bf0:	20000098 	.word	0x20000098
 8000bf4:	2000009c 	.word	0x2000009c
 8000bf8:	200000a0 	.word	0x200000a0

08000bfc <get7SEG2Value>:
static int get7SEG2Value() {
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
	switch (status) {
 8000c00:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <get7SEG2Value+0x80>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	3b02      	subs	r3, #2
 8000c06:	2b0c      	cmp	r3, #12
 8000c08:	d831      	bhi.n	8000c6e <get7SEG2Value+0x72>
 8000c0a:	a201      	add	r2, pc, #4	; (adr r2, 8000c10 <get7SEG2Value+0x14>)
 8000c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c10:	08000c45 	.word	0x08000c45
 8000c14:	08000c4b 	.word	0x08000c4b
 8000c18:	08000c51 	.word	0x08000c51
 8000c1c:	08000c57 	.word	0x08000c57
 8000c20:	08000c6f 	.word	0x08000c6f
 8000c24:	08000c6f 	.word	0x08000c6f
 8000c28:	08000c6f 	.word	0x08000c6f
 8000c2c:	08000c6f 	.word	0x08000c6f
 8000c30:	08000c6f 	.word	0x08000c6f
 8000c34:	08000c6f 	.word	0x08000c6f
 8000c38:	08000c5d 	.word	0x08000c5d
 8000c3c:	08000c69 	.word	0x08000c69
 8000c40:	08000c63 	.word	0x08000c63
		case RED_GREEN:
			return green_time_temp;
 8000c44:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <get7SEG2Value+0x84>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	e013      	b.n	8000c72 <get7SEG2Value+0x76>
		case RED_AMBER:
			return amber_time_temp;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <get7SEG2Value+0x88>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	e010      	b.n	8000c72 <get7SEG2Value+0x76>
		case GREEN_RED:
			return red_time_temp;
 8000c50:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <get7SEG2Value+0x8c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	e00d      	b.n	8000c72 <get7SEG2Value+0x76>
		case AMBER_RED:
			return red_time_temp;
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <get7SEG2Value+0x8c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	e00a      	b.n	8000c72 <get7SEG2Value+0x76>
		case MAN_RED:
			return red_time_temp;
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <get7SEG2Value+0x8c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	e007      	b.n	8000c72 <get7SEG2Value+0x76>
		case MAN_GREEN:
			return green_time_temp;
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <get7SEG2Value+0x84>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	e004      	b.n	8000c72 <get7SEG2Value+0x76>
		case MAN_AMBER:
			return amber_time_temp;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <get7SEG2Value+0x88>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	e001      	b.n	8000c72 <get7SEG2Value+0x76>
		default:
			break;
 8000c6e:	bf00      	nop
	}
	return 0;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	2000003c 	.word	0x2000003c
 8000c80:	2000009c 	.word	0x2000009c
 8000c84:	200000a0 	.word	0x200000a0
 8000c88:	20000098 	.word	0x20000098

08000c8c <display7SEG>:

void display7SEG(int num){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b09      	cmp	r3, #9
 8000c98:	f200 81c8 	bhi.w	800102c <display7SEG+0x3a0>
 8000c9c:	a201      	add	r2, pc, #4	; (adr r2, 8000ca4 <display7SEG+0x18>)
 8000c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca2:	bf00      	nop
 8000ca4:	08000ccd 	.word	0x08000ccd
 8000ca8:	08000d23 	.word	0x08000d23
 8000cac:	08000d79 	.word	0x08000d79
 8000cb0:	08000dcf 	.word	0x08000dcf
 8000cb4:	08000e25 	.word	0x08000e25
 8000cb8:	08000e7b 	.word	0x08000e7b
 8000cbc:	08000ed1 	.word	0x08000ed1
 8000cc0:	08000f27 	.word	0x08000f27
 8000cc4:	08000f7d 	.word	0x08000f7d
 8000cc8:	08000fd3 	.word	0x08000fd3
	switch(num){
	case 0:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cd2:	48d5      	ldr	r0, [pc, #852]	; (8001028 <display7SEG+0x39c>)
 8000cd4:	f001 fa09 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cde:	48d2      	ldr	r0, [pc, #840]	; (8001028 <display7SEG+0x39c>)
 8000ce0:	f001 fa03 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cea:	48cf      	ldr	r0, [pc, #828]	; (8001028 <display7SEG+0x39c>)
 8000cec:	f001 f9fd 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cf6:	48cc      	ldr	r0, [pc, #816]	; (8001028 <display7SEG+0x39c>)
 8000cf8:	f001 f9f7 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d02:	48c9      	ldr	r0, [pc, #804]	; (8001028 <display7SEG+0x39c>)
 8000d04:	f001 f9f1 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d0e:	48c6      	ldr	r0, [pc, #792]	; (8001028 <display7SEG+0x39c>)
 8000d10:	f001 f9eb 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d1a:	48c3      	ldr	r0, [pc, #780]	; (8001028 <display7SEG+0x39c>)
 8000d1c:	f001 f9e5 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 8000d20:	e185      	b.n	800102e <display7SEG+0x3a2>
	case 1:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d28:	48bf      	ldr	r0, [pc, #764]	; (8001028 <display7SEG+0x39c>)
 8000d2a:	f001 f9de 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d34:	48bc      	ldr	r0, [pc, #752]	; (8001028 <display7SEG+0x39c>)
 8000d36:	f001 f9d8 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d40:	48b9      	ldr	r0, [pc, #740]	; (8001028 <display7SEG+0x39c>)
 8000d42:	f001 f9d2 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d4c:	48b6      	ldr	r0, [pc, #728]	; (8001028 <display7SEG+0x39c>)
 8000d4e:	f001 f9cc 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000d52:	2201      	movs	r2, #1
 8000d54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d58:	48b3      	ldr	r0, [pc, #716]	; (8001028 <display7SEG+0x39c>)
 8000d5a:	f001 f9c6 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d64:	48b0      	ldr	r0, [pc, #704]	; (8001028 <display7SEG+0x39c>)
 8000d66:	f001 f9c0 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d70:	48ad      	ldr	r0, [pc, #692]	; (8001028 <display7SEG+0x39c>)
 8000d72:	f001 f9ba 	bl	80020ea <HAL_GPIO_WritePin>
		break;
 8000d76:	e15a      	b.n	800102e <display7SEG+0x3a2>
	case 2:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d7e:	48aa      	ldr	r0, [pc, #680]	; (8001028 <display7SEG+0x39c>)
 8000d80:	f001 f9b3 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d8a:	48a7      	ldr	r0, [pc, #668]	; (8001028 <display7SEG+0x39c>)
 8000d8c:	f001 f9ad 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, SET);
 8000d90:	2201      	movs	r2, #1
 8000d92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d96:	48a4      	ldr	r0, [pc, #656]	; (8001028 <display7SEG+0x39c>)
 8000d98:	f001 f9a7 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000da2:	48a1      	ldr	r0, [pc, #644]	; (8001028 <display7SEG+0x39c>)
 8000da4:	f001 f9a1 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dae:	489e      	ldr	r0, [pc, #632]	; (8001028 <display7SEG+0x39c>)
 8000db0:	f001 f99b 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dba:	489b      	ldr	r0, [pc, #620]	; (8001028 <display7SEG+0x39c>)
 8000dbc:	f001 f995 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dc6:	4898      	ldr	r0, [pc, #608]	; (8001028 <display7SEG+0x39c>)
 8000dc8:	f001 f98f 	bl	80020ea <HAL_GPIO_WritePin>
			break;
 8000dcc:	e12f      	b.n	800102e <display7SEG+0x3a2>
	case 3:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dd4:	4894      	ldr	r0, [pc, #592]	; (8001028 <display7SEG+0x39c>)
 8000dd6:	f001 f988 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de0:	4891      	ldr	r0, [pc, #580]	; (8001028 <display7SEG+0x39c>)
 8000de2:	f001 f982 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dec:	488e      	ldr	r0, [pc, #568]	; (8001028 <display7SEG+0x39c>)
 8000dee:	f001 f97c 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df8:	488b      	ldr	r0, [pc, #556]	; (8001028 <display7SEG+0x39c>)
 8000dfa:	f001 f976 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e04:	4888      	ldr	r0, [pc, #544]	; (8001028 <display7SEG+0x39c>)
 8000e06:	f001 f970 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e10:	4885      	ldr	r0, [pc, #532]	; (8001028 <display7SEG+0x39c>)
 8000e12:	f001 f96a 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e1c:	4882      	ldr	r0, [pc, #520]	; (8001028 <display7SEG+0x39c>)
 8000e1e:	f001 f964 	bl	80020ea <HAL_GPIO_WritePin>
			break;
 8000e22:	e104      	b.n	800102e <display7SEG+0x3a2>
	case 4:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e2a:	487f      	ldr	r0, [pc, #508]	; (8001028 <display7SEG+0x39c>)
 8000e2c:	f001 f95d 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e36:	487c      	ldr	r0, [pc, #496]	; (8001028 <display7SEG+0x39c>)
 8000e38:	f001 f957 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e42:	4879      	ldr	r0, [pc, #484]	; (8001028 <display7SEG+0x39c>)
 8000e44:	f001 f951 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e4e:	4876      	ldr	r0, [pc, #472]	; (8001028 <display7SEG+0x39c>)
 8000e50:	f001 f94b 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e5a:	4873      	ldr	r0, [pc, #460]	; (8001028 <display7SEG+0x39c>)
 8000e5c:	f001 f945 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e66:	4870      	ldr	r0, [pc, #448]	; (8001028 <display7SEG+0x39c>)
 8000e68:	f001 f93f 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e72:	486d      	ldr	r0, [pc, #436]	; (8001028 <display7SEG+0x39c>)
 8000e74:	f001 f939 	bl	80020ea <HAL_GPIO_WritePin>
			break;
 8000e78:	e0d9      	b.n	800102e <display7SEG+0x3a2>
	case 5:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e80:	4869      	ldr	r0, [pc, #420]	; (8001028 <display7SEG+0x39c>)
 8000e82:	f001 f932 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, SET);
 8000e86:	2201      	movs	r2, #1
 8000e88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e8c:	4866      	ldr	r0, [pc, #408]	; (8001028 <display7SEG+0x39c>)
 8000e8e:	f001 f92c 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e98:	4863      	ldr	r0, [pc, #396]	; (8001028 <display7SEG+0x39c>)
 8000e9a:	f001 f926 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea4:	4860      	ldr	r0, [pc, #384]	; (8001028 <display7SEG+0x39c>)
 8000ea6:	f001 f920 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eb0:	485d      	ldr	r0, [pc, #372]	; (8001028 <display7SEG+0x39c>)
 8000eb2:	f001 f91a 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ebc:	485a      	ldr	r0, [pc, #360]	; (8001028 <display7SEG+0x39c>)
 8000ebe:	f001 f914 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec8:	4857      	ldr	r0, [pc, #348]	; (8001028 <display7SEG+0x39c>)
 8000eca:	f001 f90e 	bl	80020ea <HAL_GPIO_WritePin>
			break;
 8000ece:	e0ae      	b.n	800102e <display7SEG+0x3a2>
	case 6:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed6:	4854      	ldr	r0, [pc, #336]	; (8001028 <display7SEG+0x39c>)
 8000ed8:	f001 f907 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee2:	4851      	ldr	r0, [pc, #324]	; (8001028 <display7SEG+0x39c>)
 8000ee4:	f001 f901 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eee:	484e      	ldr	r0, [pc, #312]	; (8001028 <display7SEG+0x39c>)
 8000ef0:	f001 f8fb 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000efa:	484b      	ldr	r0, [pc, #300]	; (8001028 <display7SEG+0x39c>)
 8000efc:	f001 f8f5 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f06:	4848      	ldr	r0, [pc, #288]	; (8001028 <display7SEG+0x39c>)
 8000f08:	f001 f8ef 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f12:	4845      	ldr	r0, [pc, #276]	; (8001028 <display7SEG+0x39c>)
 8000f14:	f001 f8e9 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f1e:	4842      	ldr	r0, [pc, #264]	; (8001028 <display7SEG+0x39c>)
 8000f20:	f001 f8e3 	bl	80020ea <HAL_GPIO_WritePin>
			break;
 8000f24:	e083      	b.n	800102e <display7SEG+0x3a2>
	case 7:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f2c:	483e      	ldr	r0, [pc, #248]	; (8001028 <display7SEG+0x39c>)
 8000f2e:	f001 f8dc 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f38:	483b      	ldr	r0, [pc, #236]	; (8001028 <display7SEG+0x39c>)
 8000f3a:	f001 f8d6 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f44:	4838      	ldr	r0, [pc, #224]	; (8001028 <display7SEG+0x39c>)
 8000f46:	f001 f8d0 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f50:	4835      	ldr	r0, [pc, #212]	; (8001028 <display7SEG+0x39c>)
 8000f52:	f001 f8ca 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000f56:	2201      	movs	r2, #1
 8000f58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5c:	4832      	ldr	r0, [pc, #200]	; (8001028 <display7SEG+0x39c>)
 8000f5e:	f001 f8c4 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f68:	482f      	ldr	r0, [pc, #188]	; (8001028 <display7SEG+0x39c>)
 8000f6a:	f001 f8be 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f74:	482c      	ldr	r0, [pc, #176]	; (8001028 <display7SEG+0x39c>)
 8000f76:	f001 f8b8 	bl	80020ea <HAL_GPIO_WritePin>
			break;
 8000f7a:	e058      	b.n	800102e <display7SEG+0x3a2>
	case 8:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f82:	4829      	ldr	r0, [pc, #164]	; (8001028 <display7SEG+0x39c>)
 8000f84:	f001 f8b1 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f8e:	4826      	ldr	r0, [pc, #152]	; (8001028 <display7SEG+0x39c>)
 8000f90:	f001 f8ab 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f9a:	4823      	ldr	r0, [pc, #140]	; (8001028 <display7SEG+0x39c>)
 8000f9c:	f001 f8a5 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa6:	4820      	ldr	r0, [pc, #128]	; (8001028 <display7SEG+0x39c>)
 8000fa8:	f001 f89f 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb2:	481d      	ldr	r0, [pc, #116]	; (8001028 <display7SEG+0x39c>)
 8000fb4:	f001 f899 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fbe:	481a      	ldr	r0, [pc, #104]	; (8001028 <display7SEG+0x39c>)
 8000fc0:	f001 f893 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fca:	4817      	ldr	r0, [pc, #92]	; (8001028 <display7SEG+0x39c>)
 8000fcc:	f001 f88d 	bl	80020ea <HAL_GPIO_WritePin>
			break;
 8000fd0:	e02d      	b.n	800102e <display7SEG+0x3a2>
	case 9:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd8:	4813      	ldr	r0, [pc, #76]	; (8001028 <display7SEG+0x39c>)
 8000fda:	f001 f886 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe4:	4810      	ldr	r0, [pc, #64]	; (8001028 <display7SEG+0x39c>)
 8000fe6:	f001 f880 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ff0:	480d      	ldr	r0, [pc, #52]	; (8001028 <display7SEG+0x39c>)
 8000ff2:	f001 f87a 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ffc:	480a      	ldr	r0, [pc, #40]	; (8001028 <display7SEG+0x39c>)
 8000ffe:	f001 f874 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001008:	4807      	ldr	r0, [pc, #28]	; (8001028 <display7SEG+0x39c>)
 800100a:	f001 f86e 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <display7SEG+0x39c>)
 8001016:	f001 f868 	bl	80020ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001020:	4801      	ldr	r0, [pc, #4]	; (8001028 <display7SEG+0x39c>)
 8001022:	f001 f862 	bl	80020ea <HAL_GPIO_WritePin>
			break;
 8001026:	e002      	b.n	800102e <display7SEG+0x3a2>
 8001028:	40010800 	.word	0x40010800
	default:
			break;
 800102c:	bf00      	nop
	}
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop

08001038 <currentMode>:


int currentMode(){
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
	if(status == RED_AMBER || status == RED_GREEN || status == GREEN_RED || status == AMBER_RED){
 800103c:	4b16      	ldr	r3, [pc, #88]	; (8001098 <currentMode+0x60>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b03      	cmp	r3, #3
 8001042:	d00b      	beq.n	800105c <currentMode+0x24>
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <currentMode+0x60>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d007      	beq.n	800105c <currentMode+0x24>
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <currentMode+0x60>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b04      	cmp	r3, #4
 8001052:	d003      	beq.n	800105c <currentMode+0x24>
 8001054:	4b10      	ldr	r3, [pc, #64]	; (8001098 <currentMode+0x60>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b05      	cmp	r3, #5
 800105a:	d103      	bne.n	8001064 <currentMode+0x2c>
		mode = 1;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <currentMode+0x64>)
 800105e:	2201      	movs	r2, #1
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	e012      	b.n	800108a <currentMode+0x52>
	} else if (status == MAN_RED){
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <currentMode+0x60>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b0c      	cmp	r3, #12
 800106a:	d103      	bne.n	8001074 <currentMode+0x3c>
		mode = 2;
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <currentMode+0x64>)
 800106e:	2202      	movs	r2, #2
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	e00a      	b.n	800108a <currentMode+0x52>
	} else if (status == MAN_AMBER){
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <currentMode+0x60>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b0d      	cmp	r3, #13
 800107a:	d103      	bne.n	8001084 <currentMode+0x4c>
		mode = 3;
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <currentMode+0x64>)
 800107e:	2203      	movs	r2, #3
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	e002      	b.n	800108a <currentMode+0x52>
	} else {
		mode = 4;
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <currentMode+0x64>)
 8001086:	2204      	movs	r2, #4
 8001088:	601a      	str	r2, [r3, #0]
	}

	return mode;
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <currentMode+0x64>)
 800108c:	681b      	ldr	r3, [r3, #0]
}
 800108e:	4618      	mov	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	2000003c 	.word	0x2000003c
 800109c:	2000004c 	.word	0x2000004c

080010a0 <dispMode>:

void dispMode(int mode){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	currentMode();
 80010a8:	f7ff ffc6 	bl	8001038 <currentMode>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	f200 80af 	bhi.w	8001214 <dispMode+0x174>
 80010b6:	a201      	add	r2, pc, #4	; (adr r2, 80010bc <dispMode+0x1c>)
 80010b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010bc:	080010cd 	.word	0x080010cd
 80010c0:	0800111f 	.word	0x0800111f
 80010c4:	08001171 	.word	0x08001171
 80010c8:	080011c3 	.word	0x080011c3
	switch (mode){
	case 1:
			HAL_GPIO_WritePin(SEG_00_GPIO_Port, SEG_00_Pin, SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	2140      	movs	r1, #64	; 0x40
 80010d0:	4853      	ldr	r0, [pc, #332]	; (8001220 <dispMode+0x180>)
 80010d2:	f001 f80a 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_01_GPIO_Port, SEG_01_Pin, RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2180      	movs	r1, #128	; 0x80
 80010da:	4851      	ldr	r0, [pc, #324]	; (8001220 <dispMode+0x180>)
 80010dc:	f001 f805 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_02_GPIO_Port, SEG_02_Pin, RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e6:	484e      	ldr	r0, [pc, #312]	; (8001220 <dispMode+0x180>)
 80010e8:	f000 ffff 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_03_GPIO_Port, SEG_03_Pin, SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f2:	484b      	ldr	r0, [pc, #300]	; (8001220 <dispMode+0x180>)
 80010f4:	f000 fff9 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_04_GPIO_Port, SEG_04_Pin, SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010fe:	4848      	ldr	r0, [pc, #288]	; (8001220 <dispMode+0x180>)
 8001100:	f000 fff3 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_05_GPIO_Port, SEG_05_Pin, SET);
 8001104:	2201      	movs	r2, #1
 8001106:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800110a:	4845      	ldr	r0, [pc, #276]	; (8001220 <dispMode+0x180>)
 800110c:	f000 ffed 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_06_GPIO_Port, SEG_06_Pin, SET);
 8001110:	2201      	movs	r2, #1
 8001112:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001116:	4842      	ldr	r0, [pc, #264]	; (8001220 <dispMode+0x180>)
 8001118:	f000 ffe7 	bl	80020ea <HAL_GPIO_WritePin>
			break;
 800111c:	e07b      	b.n	8001216 <dispMode+0x176>
		case 2:
			HAL_GPIO_WritePin(SEG_00_GPIO_Port, SEG_00_Pin, RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	2140      	movs	r1, #64	; 0x40
 8001122:	483f      	ldr	r0, [pc, #252]	; (8001220 <dispMode+0x180>)
 8001124:	f000 ffe1 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_01_GPIO_Port, SEG_01_Pin, RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	2180      	movs	r1, #128	; 0x80
 800112c:	483c      	ldr	r0, [pc, #240]	; (8001220 <dispMode+0x180>)
 800112e:	f000 ffdc 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_02_GPIO_Port, SEG_02_Pin, SET);
 8001132:	2201      	movs	r2, #1
 8001134:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001138:	4839      	ldr	r0, [pc, #228]	; (8001220 <dispMode+0x180>)
 800113a:	f000 ffd6 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_03_GPIO_Port, SEG_03_Pin, RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001144:	4836      	ldr	r0, [pc, #216]	; (8001220 <dispMode+0x180>)
 8001146:	f000 ffd0 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_04_GPIO_Port, SEG_04_Pin, RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001150:	4833      	ldr	r0, [pc, #204]	; (8001220 <dispMode+0x180>)
 8001152:	f000 ffca 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_05_GPIO_Port, SEG_05_Pin, SET);
 8001156:	2201      	movs	r2, #1
 8001158:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800115c:	4830      	ldr	r0, [pc, #192]	; (8001220 <dispMode+0x180>)
 800115e:	f000 ffc4 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_06_GPIO_Port, SEG_06_Pin, RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001168:	482d      	ldr	r0, [pc, #180]	; (8001220 <dispMode+0x180>)
 800116a:	f000 ffbe 	bl	80020ea <HAL_GPIO_WritePin>
				break;
 800116e:	e052      	b.n	8001216 <dispMode+0x176>
		case 3:
			HAL_GPIO_WritePin(SEG_00_GPIO_Port, SEG_00_Pin, RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	2140      	movs	r1, #64	; 0x40
 8001174:	482a      	ldr	r0, [pc, #168]	; (8001220 <dispMode+0x180>)
 8001176:	f000 ffb8 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_01_GPIO_Port, SEG_01_Pin, RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	2180      	movs	r1, #128	; 0x80
 800117e:	4828      	ldr	r0, [pc, #160]	; (8001220 <dispMode+0x180>)
 8001180:	f000 ffb3 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_02_GPIO_Port, SEG_02_Pin, RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 7180 	mov.w	r1, #256	; 0x100
 800118a:	4825      	ldr	r0, [pc, #148]	; (8001220 <dispMode+0x180>)
 800118c:	f000 ffad 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_03_GPIO_Port, SEG_03_Pin, RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001196:	4822      	ldr	r0, [pc, #136]	; (8001220 <dispMode+0x180>)
 8001198:	f000 ffa7 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_04_GPIO_Port, SEG_04_Pin, SET);
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a2:	481f      	ldr	r0, [pc, #124]	; (8001220 <dispMode+0x180>)
 80011a4:	f000 ffa1 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_05_GPIO_Port, SEG_05_Pin, SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ae:	481c      	ldr	r0, [pc, #112]	; (8001220 <dispMode+0x180>)
 80011b0:	f000 ff9b 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_06_GPIO_Port, SEG_06_Pin, RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ba:	4819      	ldr	r0, [pc, #100]	; (8001220 <dispMode+0x180>)
 80011bc:	f000 ff95 	bl	80020ea <HAL_GPIO_WritePin>
				break;
 80011c0:	e029      	b.n	8001216 <dispMode+0x176>
		case 4:
			HAL_GPIO_WritePin(SEG_00_GPIO_Port, SEG_00_Pin, SET);
 80011c2:	2201      	movs	r2, #1
 80011c4:	2140      	movs	r1, #64	; 0x40
 80011c6:	4816      	ldr	r0, [pc, #88]	; (8001220 <dispMode+0x180>)
 80011c8:	f000 ff8f 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_01_GPIO_Port, SEG_01_Pin, RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2180      	movs	r1, #128	; 0x80
 80011d0:	4813      	ldr	r0, [pc, #76]	; (8001220 <dispMode+0x180>)
 80011d2:	f000 ff8a 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_02_GPIO_Port, SEG_02_Pin, RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011dc:	4810      	ldr	r0, [pc, #64]	; (8001220 <dispMode+0x180>)
 80011de:	f000 ff84 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_03_GPIO_Port, SEG_03_Pin, SET);
 80011e2:	2201      	movs	r2, #1
 80011e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e8:	480d      	ldr	r0, [pc, #52]	; (8001220 <dispMode+0x180>)
 80011ea:	f000 ff7e 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_04_GPIO_Port, SEG_04_Pin, SET);
 80011ee:	2201      	movs	r2, #1
 80011f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011f4:	480a      	ldr	r0, [pc, #40]	; (8001220 <dispMode+0x180>)
 80011f6:	f000 ff78 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_05_GPIO_Port, SEG_05_Pin, RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001200:	4807      	ldr	r0, [pc, #28]	; (8001220 <dispMode+0x180>)
 8001202:	f000 ff72 	bl	80020ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_06_GPIO_Port, SEG_06_Pin, RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <dispMode+0x180>)
 800120e:	f000 ff6c 	bl	80020ea <HAL_GPIO_WritePin>
				break;
 8001212:	e000      	b.n	8001216 <dispMode+0x176>
		default:
			break;
 8001214:	bf00      	nop

	}
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40010c00 	.word	0x40010c00

08001224 <update7SEG>:
void update7SEG (int index){
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	index = index%4;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	425a      	negs	r2, r3
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	f002 0203 	and.w	r2, r2, #3
 8001238:	bf58      	it	pl
 800123a:	4253      	negpl	r3, r2
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b03      	cmp	r3, #3
 8001242:	f200 8099 	bhi.w	8001378 <update7SEG+0x154>
 8001246:	a201      	add	r2, pc, #4	; (adr r2, 800124c <update7SEG+0x28>)
 8001248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124c:	0800125d 	.word	0x0800125d
 8001250:	0800129f 	.word	0x0800129f
 8001254:	080012eb 	.word	0x080012eb
 8001258:	0800132d 	.word	0x0800132d
	switch (index){
	case 0:
		  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	2102      	movs	r1, #2
 8001260:	4847      	ldr	r0, [pc, #284]	; (8001380 <update7SEG+0x15c>)
 8001262:	f000 ff42 	bl	80020ea <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001266:	2201      	movs	r2, #1
 8001268:	2104      	movs	r1, #4
 800126a:	4845      	ldr	r0, [pc, #276]	; (8001380 <update7SEG+0x15c>)
 800126c:	f000 ff3d 	bl	80020ea <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001270:	2201      	movs	r2, #1
 8001272:	2108      	movs	r1, #8
 8001274:	4842      	ldr	r0, [pc, #264]	; (8001380 <update7SEG+0x15c>)
 8001276:	f000 ff38 	bl	80020ea <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800127a:	2201      	movs	r2, #1
 800127c:	2110      	movs	r1, #16
 800127e:	4840      	ldr	r0, [pc, #256]	; (8001380 <update7SEG+0x15c>)
 8001280:	f000 ff33 	bl	80020ea <HAL_GPIO_WritePin>
		  display7SEG(get7SEG1Value()/10);
 8001284:	f7ff fc72 	bl	8000b6c <get7SEG1Value>
 8001288:	4603      	mov	r3, r0
 800128a:	4a3e      	ldr	r2, [pc, #248]	; (8001384 <update7SEG+0x160>)
 800128c:	fb82 1203 	smull	r1, r2, r2, r3
 8001290:	1092      	asrs	r2, r2, #2
 8001292:	17db      	asrs	r3, r3, #31
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fcf8 	bl	8000c8c <display7SEG>
		break;
 800129c:	e06c      	b.n	8001378 <update7SEG+0x154>
	case 1:
		  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	2102      	movs	r1, #2
 80012a2:	4837      	ldr	r0, [pc, #220]	; (8001380 <update7SEG+0x15c>)
 80012a4:	f000 ff21 	bl	80020ea <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2104      	movs	r1, #4
 80012ac:	4834      	ldr	r0, [pc, #208]	; (8001380 <update7SEG+0x15c>)
 80012ae:	f000 ff1c 	bl	80020ea <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80012b2:	2201      	movs	r2, #1
 80012b4:	2108      	movs	r1, #8
 80012b6:	4832      	ldr	r0, [pc, #200]	; (8001380 <update7SEG+0x15c>)
 80012b8:	f000 ff17 	bl	80020ea <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80012bc:	2201      	movs	r2, #1
 80012be:	2110      	movs	r1, #16
 80012c0:	482f      	ldr	r0, [pc, #188]	; (8001380 <update7SEG+0x15c>)
 80012c2:	f000 ff12 	bl	80020ea <HAL_GPIO_WritePin>
		  display7SEG(get7SEG1Value()%10);
 80012c6:	f7ff fc51 	bl	8000b6c <get7SEG1Value>
 80012ca:	4601      	mov	r1, r0
 80012cc:	4b2d      	ldr	r3, [pc, #180]	; (8001384 <update7SEG+0x160>)
 80012ce:	fb83 2301 	smull	r2, r3, r3, r1
 80012d2:	109a      	asrs	r2, r3, #2
 80012d4:	17cb      	asrs	r3, r1, #31
 80012d6:	1ad2      	subs	r2, r2, r3
 80012d8:	4613      	mov	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	1aca      	subs	r2, r1, r3
 80012e2:	4610      	mov	r0, r2
 80012e4:	f7ff fcd2 	bl	8000c8c <display7SEG>
		break;
 80012e8:	e046      	b.n	8001378 <update7SEG+0x154>
	case 2:
		  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80012ea:	2201      	movs	r2, #1
 80012ec:	2102      	movs	r1, #2
 80012ee:	4824      	ldr	r0, [pc, #144]	; (8001380 <update7SEG+0x15c>)
 80012f0:	f000 fefb 	bl	80020ea <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80012f4:	2201      	movs	r2, #1
 80012f6:	2104      	movs	r1, #4
 80012f8:	4821      	ldr	r0, [pc, #132]	; (8001380 <update7SEG+0x15c>)
 80012fa:	f000 fef6 	bl	80020ea <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	2108      	movs	r1, #8
 8001302:	481f      	ldr	r0, [pc, #124]	; (8001380 <update7SEG+0x15c>)
 8001304:	f000 fef1 	bl	80020ea <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8001308:	2201      	movs	r2, #1
 800130a:	2110      	movs	r1, #16
 800130c:	481c      	ldr	r0, [pc, #112]	; (8001380 <update7SEG+0x15c>)
 800130e:	f000 feec 	bl	80020ea <HAL_GPIO_WritePin>
		  display7SEG(get7SEG2Value()/10);
 8001312:	f7ff fc73 	bl	8000bfc <get7SEG2Value>
 8001316:	4603      	mov	r3, r0
 8001318:	4a1a      	ldr	r2, [pc, #104]	; (8001384 <update7SEG+0x160>)
 800131a:	fb82 1203 	smull	r1, r2, r2, r3
 800131e:	1092      	asrs	r2, r2, #2
 8001320:	17db      	asrs	r3, r3, #31
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fcb1 	bl	8000c8c <display7SEG>
		break;
 800132a:	e025      	b.n	8001378 <update7SEG+0x154>
	case 3:
		  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800132c:	2201      	movs	r2, #1
 800132e:	2102      	movs	r1, #2
 8001330:	4813      	ldr	r0, [pc, #76]	; (8001380 <update7SEG+0x15c>)
 8001332:	f000 feda 	bl	80020ea <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001336:	2201      	movs	r2, #1
 8001338:	2104      	movs	r1, #4
 800133a:	4811      	ldr	r0, [pc, #68]	; (8001380 <update7SEG+0x15c>)
 800133c:	f000 fed5 	bl	80020ea <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2108      	movs	r1, #8
 8001344:	480e      	ldr	r0, [pc, #56]	; (8001380 <update7SEG+0x15c>)
 8001346:	f000 fed0 	bl	80020ea <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2110      	movs	r1, #16
 800134e:	480c      	ldr	r0, [pc, #48]	; (8001380 <update7SEG+0x15c>)
 8001350:	f000 fecb 	bl	80020ea <HAL_GPIO_WritePin>
		  display7SEG(get7SEG2Value()%10);
 8001354:	f7ff fc52 	bl	8000bfc <get7SEG2Value>
 8001358:	4601      	mov	r1, r0
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <update7SEG+0x160>)
 800135c:	fb83 2301 	smull	r2, r3, r3, r1
 8001360:	109a      	asrs	r2, r3, #2
 8001362:	17cb      	asrs	r3, r1, #31
 8001364:	1ad2      	subs	r2, r2, r3
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	1aca      	subs	r2, r1, r3
 8001370:	4610      	mov	r0, r2
 8001372:	f7ff fc8b 	bl	8000c8c <display7SEG>
		break;
 8001376:	bf00      	nop
	}
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40010800 	.word	0x40010800
 8001384:	66666667 	.word	0x66666667

08001388 <updateClock>:

int counter2 = 0;

void updateClock() {
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	if (counter2 > 0) counter2--;
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <updateClock+0x48>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	dd04      	ble.n	800139e <updateClock+0x16>
 8001394:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <updateClock+0x48>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	3b01      	subs	r3, #1
 800139a:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <updateClock+0x48>)
 800139c:	6013      	str	r3, [r2, #0]
	if(counter2 <= 0){
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <updateClock+0x48>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	dc11      	bgt.n	80013ca <updateClock+0x42>
		counter2 = 25;
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <updateClock+0x48>)
 80013a8:	2219      	movs	r2, #25
 80013aa:	601a      	str	r2, [r3, #0]
		if (index_led > 3){
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <updateClock+0x4c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	dd02      	ble.n	80013ba <updateClock+0x32>
			index_led = 0;
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <updateClock+0x4c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
		}
		update7SEG(index_led++);
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <updateClock+0x4c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	1c5a      	adds	r2, r3, #1
 80013c0:	4904      	ldr	r1, [pc, #16]	; (80013d4 <updateClock+0x4c>)
 80013c2:	600a      	str	r2, [r1, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff2d 	bl	8001224 <update7SEG>
	}
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000094 	.word	0x20000094
 80013d4:	20000090 	.word	0x20000090

080013d8 <dispModeWrapper>:
	if (isButton1Pressed() == 1){
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
	}
}

void dispModeWrapper(){
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	dispMode(mode);
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <dispModeWrapper+0x14>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fe5d 	bl	80010a0 <dispMode>
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000004c 	.word	0x2000004c

080013f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f4:	f000 fb78 	bl	8001ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f8:	f000 f83e 	bl	8001478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013fc:	f000 f8c4 	bl	8001588 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001400:	f000 f876 	bl	80014f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001404:	4814      	ldr	r0, [pc, #80]	; (8001458 <main+0x68>)
 8001406:	f001 facd 	bl	80029a4 <HAL_TIM_Base_Start_IT>
//  setTimer1(100);
//  setTimer2(100);
//  setTimer3(100);
//  setTimerLed(100);
  // Start Button
  	SCH_Add_Task(getKey1Input, 0, 10);
 800140a:	220a      	movs	r2, #10
 800140c:	2100      	movs	r1, #0
 800140e:	4813      	ldr	r0, [pc, #76]	; (800145c <main+0x6c>)
 8001410:	f000 fa00 	bl	8001814 <SCH_Add_Task>
  	SCH_Add_Task(getKey2Input, 0, 10);
 8001414:	220a      	movs	r2, #10
 8001416:	2100      	movs	r1, #0
 8001418:	4811      	ldr	r0, [pc, #68]	; (8001460 <main+0x70>)
 800141a:	f000 f9fb 	bl	8001814 <SCH_Add_Task>
  	SCH_Add_Task(getKey3Input, 0, 10);
 800141e:	220a      	movs	r2, #10
 8001420:	2100      	movs	r1, #0
 8001422:	4810      	ldr	r0, [pc, #64]	; (8001464 <main+0x74>)
 8001424:	f000 f9f6 	bl	8001814 <SCH_Add_Task>
  // End Button

  	// Start Display Led
  	SCH_Add_Task(dispModeWrapper, 0, 10);
 8001428:	220a      	movs	r2, #10
 800142a:	2100      	movs	r1, #0
 800142c:	480e      	ldr	r0, [pc, #56]	; (8001468 <main+0x78>)
 800142e:	f000 f9f1 	bl	8001814 <SCH_Add_Task>
  	SCH_Add_Task(updateClock, 0, 10);
 8001432:	220a      	movs	r2, #10
 8001434:	2100      	movs	r1, #0
 8001436:	480d      	ldr	r0, [pc, #52]	; (800146c <main+0x7c>)
 8001438:	f000 f9ec 	bl	8001814 <SCH_Add_Task>
  	// End Display Led

  	SCH_Add_Task(fsm_automatic_run, 0, 100);
 800143c:	2264      	movs	r2, #100	; 0x64
 800143e:	2100      	movs	r1, #0
 8001440:	480b      	ldr	r0, [pc, #44]	; (8001470 <main+0x80>)
 8001442:	f000 f9e7 	bl	8001814 <SCH_Add_Task>
  	SCH_Add_Task(fsm_manual_run, 0, 100);
 8001446:	2264      	movs	r2, #100	; 0x64
 8001448:	2100      	movs	r1, #0
 800144a:	480a      	ldr	r0, [pc, #40]	; (8001474 <main+0x84>)
 800144c:	f000 f9e2 	bl	8001814 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8001450:	f000 fa3a 	bl	80018c8 <SCH_Dispatch_Tasks>
 8001454:	e7fc      	b.n	8001450 <main+0x60>
 8001456:	bf00      	nop
 8001458:	200000a4 	.word	0x200000a4
 800145c:	080001d1 	.word	0x080001d1
 8001460:	0800026d 	.word	0x0800026d
 8001464:	0800030d 	.word	0x0800030d
 8001468:	080013d9 	.word	0x080013d9
 800146c:	08001389 	.word	0x08001389
 8001470:	080003ad 	.word	0x080003ad
 8001474:	080006c1 	.word	0x080006c1

08001478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b090      	sub	sp, #64	; 0x40
 800147c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147e:	f107 0318 	add.w	r3, r7, #24
 8001482:	2228      	movs	r2, #40	; 0x28
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f001 fe3c 	bl	8003104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800149a:	2302      	movs	r3, #2
 800149c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800149e:	2301      	movs	r3, #1
 80014a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014a2:	2310      	movs	r3, #16
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014aa:	f107 0318 	add.w	r3, r7, #24
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 fe4c 	bl	800214c <HAL_RCC_OscConfig>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <SystemClock_Config+0x46>
  {
    Error_Handler();
 80014ba:	f000 f8ed 	bl	8001698 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014be:	230f      	movs	r3, #15
 80014c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f001 f8b8 	bl	800264c <HAL_RCC_ClockConfig>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80014e2:	f000 f8d9 	bl	8001698 <Error_Handler>
  }
}
 80014e6:	bf00      	nop
 80014e8:	3740      	adds	r7, #64	; 0x40
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001504:	463b      	mov	r3, r7
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800150c:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <MX_TIM2_Init+0x94>)
 800150e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001512:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <MX_TIM2_Init+0x94>)
 8001516:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800151a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <MX_TIM2_Init+0x94>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <MX_TIM2_Init+0x94>)
 8001524:	2209      	movs	r2, #9
 8001526:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001528:	4b16      	ldr	r3, [pc, #88]	; (8001584 <MX_TIM2_Init+0x94>)
 800152a:	2200      	movs	r2, #0
 800152c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <MX_TIM2_Init+0x94>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001534:	4813      	ldr	r0, [pc, #76]	; (8001584 <MX_TIM2_Init+0x94>)
 8001536:	f001 f9e5 	bl	8002904 <HAL_TIM_Base_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001540:	f000 f8aa 	bl	8001698 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001548:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800154a:	f107 0308 	add.w	r3, r7, #8
 800154e:	4619      	mov	r1, r3
 8001550:	480c      	ldr	r0, [pc, #48]	; (8001584 <MX_TIM2_Init+0x94>)
 8001552:	f001 fb63 	bl	8002c1c <HAL_TIM_ConfigClockSource>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800155c:	f000 f89c 	bl	8001698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001560:	2300      	movs	r3, #0
 8001562:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001568:	463b      	mov	r3, r7
 800156a:	4619      	mov	r1, r3
 800156c:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_TIM2_Init+0x94>)
 800156e:	f001 fd3b 	bl	8002fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001578:	f000 f88e 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200000a4 	.word	0x200000a4

08001588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158e:	f107 0310 	add.w	r3, r7, #16
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159c:	4b35      	ldr	r3, [pc, #212]	; (8001674 <MX_GPIO_Init+0xec>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	4a34      	ldr	r2, [pc, #208]	; (8001674 <MX_GPIO_Init+0xec>)
 80015a2:	f043 0310 	orr.w	r3, r3, #16
 80015a6:	6193      	str	r3, [r2, #24]
 80015a8:	4b32      	ldr	r3, [pc, #200]	; (8001674 <MX_GPIO_Init+0xec>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	f003 0310 	and.w	r3, r3, #16
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b4:	4b2f      	ldr	r3, [pc, #188]	; (8001674 <MX_GPIO_Init+0xec>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4a2e      	ldr	r2, [pc, #184]	; (8001674 <MX_GPIO_Init+0xec>)
 80015ba:	f043 0304 	orr.w	r3, r3, #4
 80015be:	6193      	str	r3, [r2, #24]
 80015c0:	4b2c      	ldr	r3, [pc, #176]	; (8001674 <MX_GPIO_Init+0xec>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015cc:	4b29      	ldr	r3, [pc, #164]	; (8001674 <MX_GPIO_Init+0xec>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	4a28      	ldr	r2, [pc, #160]	; (8001674 <MX_GPIO_Init+0xec>)
 80015d2:	f043 0308 	orr.w	r3, r3, #8
 80015d6:	6193      	str	r3, [r2, #24]
 80015d8:	4b26      	ldr	r3, [pc, #152]	; (8001674 <MX_GPIO_Init+0xec>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80015e4:	2200      	movs	r2, #0
 80015e6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80015ea:	4823      	ldr	r0, [pc, #140]	; (8001678 <MX_GPIO_Init+0xf0>)
 80015ec:	f000 fd7d 	bl	80020ea <HAL_GPIO_WritePin>
                          |LED_RED_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LED_BLUE_Pin
                          |SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_RED_Pin|LED_1_GREEN_Pin|LED_1_YELLOW_Pin|SEG_04_Pin
 80015f0:	2200      	movs	r2, #0
 80015f2:	f641 71ff 	movw	r1, #8191	; 0x1fff
 80015f6:	4821      	ldr	r0, [pc, #132]	; (800167c <MX_GPIO_Init+0xf4>)
 80015f8:	f000 fd77 	bl	80020ea <HAL_GPIO_WritePin>
                          |SEG_05_Pin|SEG_06_Pin|LED_2_RED_Pin|LED_2_GREEN_Pin
                          |LED_2_YELLOW_Pin|SEG_00_Pin|SEG_01_Pin|SEG_02_Pin
                          |SEG_03_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Button0_Pin */
  GPIO_InitStruct.Pin = Button0_Pin;
 80015fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001606:	2301      	movs	r3, #1
 8001608:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button0_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 0310 	add.w	r3, r7, #16
 800160e:	4619      	mov	r1, r3
 8001610:	481b      	ldr	r0, [pc, #108]	; (8001680 <MX_GPIO_Init+0xf8>)
 8001612:	f000 fbd9 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           LED_RED_Pin LED_GREEN_Pin LED_YELLOW_Pin LED_BLUE_Pin
                           SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001616:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800161a:	613b      	str	r3, [r7, #16]
                          |LED_RED_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LED_BLUE_Pin
                          |SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161c:	2301      	movs	r3, #1
 800161e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2302      	movs	r3, #2
 8001626:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	f107 0310 	add.w	r3, r7, #16
 800162c:	4619      	mov	r1, r3
 800162e:	4812      	ldr	r0, [pc, #72]	; (8001678 <MX_GPIO_Init+0xf0>)
 8001630:	f000 fbca 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_RED_Pin LED_1_GREEN_Pin LED_1_YELLOW_Pin SEG_04_Pin
                           SEG_05_Pin SEG_06_Pin LED_2_RED_Pin LED_2_GREEN_Pin
                           LED_2_YELLOW_Pin SEG_00_Pin SEG_01_Pin SEG_02_Pin
                           SEG_03_Pin */
  GPIO_InitStruct.Pin = LED_1_RED_Pin|LED_1_GREEN_Pin|LED_1_YELLOW_Pin|SEG_04_Pin
 8001634:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001638:	613b      	str	r3, [r7, #16]
                          |SEG_05_Pin|SEG_06_Pin|LED_2_RED_Pin|LED_2_GREEN_Pin
                          |LED_2_YELLOW_Pin|SEG_00_Pin|SEG_01_Pin|SEG_02_Pin
                          |SEG_03_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163a:	2301      	movs	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2302      	movs	r3, #2
 8001644:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001646:	f107 0310 	add.w	r3, r7, #16
 800164a:	4619      	mov	r1, r3
 800164c:	480b      	ldr	r0, [pc, #44]	; (800167c <MX_GPIO_Init+0xf4>)
 800164e:	f000 fbbb 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 8001652:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800165c:	2301      	movs	r3, #1
 800165e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	4619      	mov	r1, r3
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_GPIO_Init+0xf4>)
 8001668:	f000 fbae 	bl	8001dc8 <HAL_GPIO_Init>

}
 800166c:	bf00      	nop
 800166e:	3720      	adds	r7, #32
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40021000 	.word	0x40021000
 8001678:	40010800 	.word	0x40010800
 800167c:	40010c00 	.word	0x40010c00
 8001680:	40011000 	.word	0x40011000

08001684 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	SCH_Update();
 800168c:	f000 f850 	bl	8001730 <SCH_Update>
//	timerRun();
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800169c:	b672      	cpsid	i
}
 800169e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <Error_Handler+0x8>
	...

080016a4 <SCH_Delete_Task>:
#include "scheduler.h"

sTask SCH_tasks_G[SCH_MAX_TASKS];
//unsigned char Error_code_G = 0;

unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX) {
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
	unsigned char Return_code = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	73fb      	strb	r3, [r7, #15]
	if (SCH_tasks_G[TASK_INDEX].pTask == 0) {
 80016b2:	79fa      	ldrb	r2, [r7, #7]
 80016b4:	491d      	ldr	r1, [pc, #116]	; (800172c <SCH_Delete_Task+0x88>)
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d102      	bne.n	80016cc <SCH_Delete_Task+0x28>
			Return_code = 1;
 80016c6:	2301      	movs	r3, #1
 80016c8:	73fb      	strb	r3, [r7, #15]
 80016ca:	e001      	b.n	80016d0 <SCH_Delete_Task+0x2c>
	} else {
		Return_code = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	73fb      	strb	r3, [r7, #15]
	}
	SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 80016d0:	79fa      	ldrb	r2, [r7, #7]
 80016d2:	4916      	ldr	r1, [pc, #88]	; (800172c <SCH_Delete_Task+0x88>)
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Delay = 0;
 80016e2:	79fa      	ldrb	r2, [r7, #7]
 80016e4:	4911      	ldr	r1, [pc, #68]	; (800172c <SCH_Delete_Task+0x88>)
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	440b      	add	r3, r1
 80016f0:	3304      	adds	r3, #4
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Period = 0;
 80016f6:	79fa      	ldrb	r2, [r7, #7]
 80016f8:	490c      	ldr	r1, [pc, #48]	; (800172c <SCH_Delete_Task+0x88>)
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	440b      	add	r3, r1
 8001704:	3308      	adds	r3, #8
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].RunMe = 0;
 800170a:	79fa      	ldrb	r2, [r7, #7]
 800170c:	4907      	ldr	r1, [pc, #28]	; (800172c <SCH_Delete_Task+0x88>)
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	330c      	adds	r3, #12
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
	return Return_code;	// return status
 800171e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	200000ec 	.word	0x200000ec

08001730 <SCH_Update>:
	//Error_code_G = 0;
	//Timer_init();
	//Watchdog_init();
}

void SCH_Update(void) {
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
//				SCH_tasks_G[0].Delay = 1;
//			}
//		}
//	}
	unsigned char Index;
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8001736:	2300      	movs	r3, #0
 8001738:	71fb      	strb	r3, [r7, #7]
 800173a:	e05f      	b.n	80017fc <SCH_Update+0xcc>
		if (SCH_tasks_G[Index].pTask) {
 800173c:	79fa      	ldrb	r2, [r7, #7]
 800173e:	4934      	ldr	r1, [pc, #208]	; (8001810 <SCH_Update+0xe0>)
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	440b      	add	r3, r1
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d052      	beq.n	80017f6 <SCH_Update+0xc6>
			SCH_tasks_G[Index].Delay -= 1;
 8001750:	79fa      	ldrb	r2, [r7, #7]
 8001752:	492f      	ldr	r1, [pc, #188]	; (8001810 <SCH_Update+0xe0>)
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	3304      	adds	r3, #4
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	79fa      	ldrb	r2, [r7, #7]
 8001764:	1e59      	subs	r1, r3, #1
 8001766:	482a      	ldr	r0, [pc, #168]	; (8001810 <SCH_Update+0xe0>)
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4403      	add	r3, r0
 8001772:	3304      	adds	r3, #4
 8001774:	6019      	str	r1, [r3, #0]
			if (SCH_tasks_G[Index].Delay <= 0) {
 8001776:	79fa      	ldrb	r2, [r7, #7]
 8001778:	4925      	ldr	r1, [pc, #148]	; (8001810 <SCH_Update+0xe0>)
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	440b      	add	r3, r1
 8001784:	3304      	adds	r3, #4
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	dc34      	bgt.n	80017f6 <SCH_Update+0xc6>
				SCH_tasks_G[Index].RunMe += 1;
 800178c:	79fa      	ldrb	r2, [r7, #7]
 800178e:	4920      	ldr	r1, [pc, #128]	; (8001810 <SCH_Update+0xe0>)
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	330c      	adds	r3, #12
 800179c:	f993 3000 	ldrsb.w	r3, [r3]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	3301      	adds	r3, #1
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	79fa      	ldrb	r2, [r7, #7]
 80017a8:	b258      	sxtb	r0, r3
 80017aa:	4919      	ldr	r1, [pc, #100]	; (8001810 <SCH_Update+0xe0>)
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	330c      	adds	r3, #12
 80017b8:	4602      	mov	r2, r0
 80017ba:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks_G[Index].Period) {
 80017bc:	79fa      	ldrb	r2, [r7, #7]
 80017be:	4914      	ldr	r1, [pc, #80]	; (8001810 <SCH_Update+0xe0>)
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	3308      	adds	r3, #8
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d011      	beq.n	80017f6 <SCH_Update+0xc6>
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 80017d2:	79f9      	ldrb	r1, [r7, #7]
 80017d4:	79fa      	ldrb	r2, [r7, #7]
 80017d6:	480e      	ldr	r0, [pc, #56]	; (8001810 <SCH_Update+0xe0>)
 80017d8:	460b      	mov	r3, r1
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4403      	add	r3, r0
 80017e2:	3308      	adds	r3, #8
 80017e4:	6819      	ldr	r1, [r3, #0]
 80017e6:	480a      	ldr	r0, [pc, #40]	; (8001810 <SCH_Update+0xe0>)
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4403      	add	r3, r0
 80017f2:	3304      	adds	r3, #4
 80017f4:	6019      	str	r1, [r3, #0]
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	3301      	adds	r3, #1
 80017fa:	71fb      	strb	r3, [r7, #7]
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	2b09      	cmp	r3, #9
 8001800:	d99c      	bls.n	800173c <SCH_Update+0xc>
				}
			}
		}
	}
}
 8001802:	bf00      	nop
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	200000ec 	.word	0x200000ec

08001814 <SCH_Add_Task>:

unsigned char SCH_Add_Task(void (* pFunction) (), unsigned int DELAY, unsigned int PERIOD) {
 8001814:	b480      	push	{r7}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
	unsigned char Index = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)) {
 8001824:	e002      	b.n	800182c <SCH_Add_Task+0x18>
		Index++;
 8001826:	7dfb      	ldrb	r3, [r7, #23]
 8001828:	3301      	adds	r3, #1
 800182a:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)) {
 800182c:	7dfa      	ldrb	r2, [r7, #23]
 800182e:	4924      	ldr	r1, [pc, #144]	; (80018c0 <SCH_Add_Task+0xac>)
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d002      	beq.n	8001846 <SCH_Add_Task+0x32>
 8001840:	7dfb      	ldrb	r3, [r7, #23]
 8001842:	2b09      	cmp	r3, #9
 8001844:	d9ef      	bls.n	8001826 <SCH_Add_Task+0x12>
	}
	if (Index == SCH_MAX_TASKS) {
 8001846:	7dfb      	ldrb	r3, [r7, #23]
 8001848:	2b0a      	cmp	r3, #10
 800184a:	d101      	bne.n	8001850 <SCH_Add_Task+0x3c>
		return SCH_MAX_TASKS;
 800184c:	230a      	movs	r3, #10
 800184e:	e031      	b.n	80018b4 <SCH_Add_Task+0xa0>
	}
	SCH_tasks_G[Index].pTask = pFunction;
 8001850:	7dfa      	ldrb	r2, [r7, #23]
 8001852:	491b      	ldr	r1, [pc, #108]	; (80018c0 <SCH_Add_Task+0xac>)
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Delay = DELAY / TICKS;
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	4a17      	ldr	r2, [pc, #92]	; (80018c4 <SCH_Add_Task+0xb0>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	08db      	lsrs	r3, r3, #3
 800186c:	7dfa      	ldrb	r2, [r7, #23]
 800186e:	4618      	mov	r0, r3
 8001870:	4913      	ldr	r1, [pc, #76]	; (80018c0 <SCH_Add_Task+0xac>)
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	3304      	adds	r3, #4
 800187e:	6018      	str	r0, [r3, #0]
	SCH_tasks_G[Index].Period = PERIOD / TICKS;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a10      	ldr	r2, [pc, #64]	; (80018c4 <SCH_Add_Task+0xb0>)
 8001884:	fba2 2303 	umull	r2, r3, r2, r3
 8001888:	08db      	lsrs	r3, r3, #3
 800188a:	7dfa      	ldrb	r2, [r7, #23]
 800188c:	4618      	mov	r0, r3
 800188e:	490c      	ldr	r1, [pc, #48]	; (80018c0 <SCH_Add_Task+0xac>)
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	3308      	adds	r3, #8
 800189c:	6018      	str	r0, [r3, #0]
	SCH_tasks_G[Index].RunMe = 0;
 800189e:	7dfa      	ldrb	r2, [r7, #23]
 80018a0:	4907      	ldr	r1, [pc, #28]	; (80018c0 <SCH_Add_Task+0xac>)
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	330c      	adds	r3, #12
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
	return Index;
 80018b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	371c      	adds	r7, #28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	200000ec 	.word	0x200000ec
 80018c4:	cccccccd 	.word	0xcccccccd

080018c8 <SCH_Dispatch_Tasks>:
//
void SCH_Dispatch_Tasks(void) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
	unsigned char Index;
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80018ce:	2300      	movs	r3, #0
 80018d0:	71fb      	strb	r3, [r7, #7]
 80018d2:	e04a      	b.n	800196a <SCH_Dispatch_Tasks+0xa2>
		if (!(SCH_tasks_G[Index].pTask)) continue;
 80018d4:	79fa      	ldrb	r2, [r7, #7]
 80018d6:	4929      	ldr	r1, [pc, #164]	; (800197c <SCH_Dispatch_Tasks+0xb4>)
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d03c      	beq.n	8001962 <SCH_Dispatch_Tasks+0x9a>
		if (SCH_tasks_G[Index].RunMe > 0) {
 80018e8:	79fa      	ldrb	r2, [r7, #7]
 80018ea:	4924      	ldr	r1, [pc, #144]	; (800197c <SCH_Dispatch_Tasks+0xb4>)
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	440b      	add	r3, r1
 80018f6:	330c      	adds	r3, #12
 80018f8:	f993 3000 	ldrsb.w	r3, [r3]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	dd31      	ble.n	8001964 <SCH_Dispatch_Tasks+0x9c>
			(* SCH_tasks_G[Index].pTask)();
 8001900:	79fa      	ldrb	r2, [r7, #7]
 8001902:	491e      	ldr	r1, [pc, #120]	; (800197c <SCH_Dispatch_Tasks+0xb4>)
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4798      	blx	r3
			SCH_tasks_G[Index].RunMe -= 1;
 8001912:	79fa      	ldrb	r2, [r7, #7]
 8001914:	4919      	ldr	r1, [pc, #100]	; (800197c <SCH_Dispatch_Tasks+0xb4>)
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	440b      	add	r3, r1
 8001920:	330c      	adds	r3, #12
 8001922:	f993 3000 	ldrsb.w	r3, [r3]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	3b01      	subs	r3, #1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	79fa      	ldrb	r2, [r7, #7]
 800192e:	b258      	sxtb	r0, r3
 8001930:	4912      	ldr	r1, [pc, #72]	; (800197c <SCH_Dispatch_Tasks+0xb4>)
 8001932:	4613      	mov	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	440b      	add	r3, r1
 800193c:	330c      	adds	r3, #12
 800193e:	4602      	mov	r2, r0
 8001940:	701a      	strb	r2, [r3, #0]
			if (SCH_tasks_G[Index].Period == 0) {
 8001942:	79fa      	ldrb	r2, [r7, #7]
 8001944:	490d      	ldr	r1, [pc, #52]	; (800197c <SCH_Dispatch_Tasks+0xb4>)
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	440b      	add	r3, r1
 8001950:	3308      	adds	r3, #8
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d105      	bne.n	8001964 <SCH_Dispatch_Tasks+0x9c>
				SCH_Delete_Task(Index);
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fea2 	bl	80016a4 <SCH_Delete_Task>
 8001960:	e000      	b.n	8001964 <SCH_Dispatch_Tasks+0x9c>
		if (!(SCH_tasks_G[Index].pTask)) continue;
 8001962:	bf00      	nop
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	3301      	adds	r3, #1
 8001968:	71fb      	strb	r3, [r7, #7]
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	2b09      	cmp	r3, #9
 800196e:	d9b1      	bls.n	80018d4 <SCH_Dispatch_Tasks+0xc>
	}
	// Report system status
	//SCH_Report_Status();
	// The scheduler enters idle mode at this point
	//SCH_Go_To_Sleep();
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200000ec 	.word	0x200000ec

08001980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_MspInit+0x5c>)
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	4a14      	ldr	r2, [pc, #80]	; (80019dc <HAL_MspInit+0x5c>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6193      	str	r3, [r2, #24]
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <HAL_MspInit+0x5c>)
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <HAL_MspInit+0x5c>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	4a0e      	ldr	r2, [pc, #56]	; (80019dc <HAL_MspInit+0x5c>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a8:	61d3      	str	r3, [r2, #28]
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <HAL_MspInit+0x5c>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_MspInit+0x60>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <HAL_MspInit+0x60>)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d2:	bf00      	nop
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40010000 	.word	0x40010000

080019e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019f4:	d113      	bne.n	8001a1e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <HAL_TIM_Base_MspInit+0x44>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <HAL_TIM_Base_MspInit+0x44>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	61d3      	str	r3, [r2, #28]
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_TIM_Base_MspInit+0x44>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2100      	movs	r1, #0
 8001a12:	201c      	movs	r0, #28
 8001a14:	f000 f9a1 	bl	8001d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a18:	201c      	movs	r0, #28
 8001a1a:	f000 f9ba 	bl	8001d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40021000 	.word	0x40021000

08001a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <NMI_Handler+0x4>

08001a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <HardFault_Handler+0x4>

08001a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <MemManage_Handler+0x4>

08001a3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <BusFault_Handler+0x4>

08001a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <UsageFault_Handler+0x4>

08001a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr

08001a56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a72:	f000 f87f 	bl	8001b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <TIM2_IRQHandler+0x10>)
 8001a82:	f000 ffdb 	bl	8002a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200000a4 	.word	0x200000a4

08001a90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a9c:	f7ff fff8 	bl	8001a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa0:	480b      	ldr	r0, [pc, #44]	; (8001ad0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001aa2:	490c      	ldr	r1, [pc, #48]	; (8001ad4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001aa4:	4a0c      	ldr	r2, [pc, #48]	; (8001ad8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa8:	e002      	b.n	8001ab0 <LoopCopyDataInit>

08001aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aae:	3304      	adds	r3, #4

08001ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab4:	d3f9      	bcc.n	8001aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab6:	4a09      	ldr	r2, [pc, #36]	; (8001adc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ab8:	4c09      	ldr	r4, [pc, #36]	; (8001ae0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001abc:	e001      	b.n	8001ac2 <LoopFillZerobss>

08001abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac0:	3204      	adds	r2, #4

08001ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac4:	d3fb      	bcc.n	8001abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ac6:	f001 faf9 	bl	80030bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aca:	f7ff fc91 	bl	80013f0 <main>
  bx lr
 8001ace:	4770      	bx	lr
  ldr r0, =_sdata
 8001ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001ad8:	08003158 	.word	0x08003158
  ldr r2, =_sbss
 8001adc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001ae0:	200001b8 	.word	0x200001b8

08001ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ae4:	e7fe      	b.n	8001ae4 <ADC1_2_IRQHandler>
	...

08001ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_Init+0x28>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <HAL_Init+0x28>)
 8001af2:	f043 0310 	orr.w	r3, r3, #16
 8001af6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af8:	2003      	movs	r0, #3
 8001afa:	f000 f923 	bl	8001d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001afe:	200f      	movs	r0, #15
 8001b00:	f000 f808 	bl	8001b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b04:	f7ff ff3c 	bl	8001980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40022000 	.word	0x40022000

08001b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_InitTick+0x54>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_InitTick+0x58>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	4619      	mov	r1, r3
 8001b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 f93b 	bl	8001dae <HAL_SYSTICK_Config>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00e      	b.n	8001b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b0f      	cmp	r3, #15
 8001b46:	d80a      	bhi.n	8001b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	f000 f903 	bl	8001d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b54:	4a06      	ldr	r2, [pc, #24]	; (8001b70 <HAL_InitTick+0x5c>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e000      	b.n	8001b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000050 	.word	0x20000050
 8001b6c:	20000058 	.word	0x20000058
 8001b70:	20000054 	.word	0x20000054

08001b74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_IncTick+0x1c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_IncTick+0x20>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	4a03      	ldr	r2, [pc, #12]	; (8001b94 <HAL_IncTick+0x20>)
 8001b86:	6013      	str	r3, [r2, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	20000058 	.word	0x20000058
 8001b94:	200001b4 	.word	0x200001b4

08001b98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b9c:	4b02      	ldr	r3, [pc, #8]	; (8001ba8 <HAL_GetTick+0x10>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	200001b4 	.word	0x200001b4

08001bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bde:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	60d3      	str	r3, [r2, #12]
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <__NVIC_GetPriorityGrouping+0x18>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	f003 0307 	and.w	r3, r3, #7
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	db0b      	blt.n	8001c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	4906      	ldr	r1, [pc, #24]	; (8001c44 <__NVIC_EnableIRQ+0x34>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	2001      	movs	r0, #1
 8001c32:	fa00 f202 	lsl.w	r2, r0, r2
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	e000e100 	.word	0xe000e100

08001c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	6039      	str	r1, [r7, #0]
 8001c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	db0a      	blt.n	8001c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	490c      	ldr	r1, [pc, #48]	; (8001c94 <__NVIC_SetPriority+0x4c>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	0112      	lsls	r2, r2, #4
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c70:	e00a      	b.n	8001c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4908      	ldr	r1, [pc, #32]	; (8001c98 <__NVIC_SetPriority+0x50>)
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	3b04      	subs	r3, #4
 8001c80:	0112      	lsls	r2, r2, #4
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	440b      	add	r3, r1
 8001c86:	761a      	strb	r2, [r3, #24]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000e100 	.word	0xe000e100
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	; 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f1c3 0307 	rsb	r3, r3, #7
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	bf28      	it	cs
 8001cba:	2304      	movcs	r3, #4
 8001cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	2b06      	cmp	r3, #6
 8001cc4:	d902      	bls.n	8001ccc <NVIC_EncodePriority+0x30>
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3b03      	subs	r3, #3
 8001cca:	e000      	b.n	8001cce <NVIC_EncodePriority+0x32>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	401a      	ands	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	43d9      	mvns	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	4313      	orrs	r3, r2
         );
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3724      	adds	r7, #36	; 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d10:	d301      	bcc.n	8001d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00f      	b.n	8001d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d16:	4a0a      	ldr	r2, [pc, #40]	; (8001d40 <SysTick_Config+0x40>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d1e:	210f      	movs	r1, #15
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	f7ff ff90 	bl	8001c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <SysTick_Config+0x40>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2e:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <SysTick_Config+0x40>)
 8001d30:	2207      	movs	r2, #7
 8001d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	e000e010 	.word	0xe000e010

08001d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ff2d 	bl	8001bac <__NVIC_SetPriorityGrouping>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d6c:	f7ff ff42 	bl	8001bf4 <__NVIC_GetPriorityGrouping>
 8001d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	6978      	ldr	r0, [r7, #20]
 8001d78:	f7ff ff90 	bl	8001c9c <NVIC_EncodePriority>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff5f 	bl	8001c48 <__NVIC_SetPriority>
}
 8001d8a:	bf00      	nop
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff35 	bl	8001c10 <__NVIC_EnableIRQ>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ffa2 	bl	8001d00 <SysTick_Config>
 8001dbc:	4603      	mov	r3, r0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b08b      	sub	sp, #44	; 0x2c
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dda:	e148      	b.n	800206e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ddc:	2201      	movs	r2, #1
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	69fa      	ldr	r2, [r7, #28]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	f040 8137 	bne.w	8002068 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	4aa3      	ldr	r2, [pc, #652]	; (800208c <HAL_GPIO_Init+0x2c4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d05e      	beq.n	8001ec2 <HAL_GPIO_Init+0xfa>
 8001e04:	4aa1      	ldr	r2, [pc, #644]	; (800208c <HAL_GPIO_Init+0x2c4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d875      	bhi.n	8001ef6 <HAL_GPIO_Init+0x12e>
 8001e0a:	4aa1      	ldr	r2, [pc, #644]	; (8002090 <HAL_GPIO_Init+0x2c8>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d058      	beq.n	8001ec2 <HAL_GPIO_Init+0xfa>
 8001e10:	4a9f      	ldr	r2, [pc, #636]	; (8002090 <HAL_GPIO_Init+0x2c8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d86f      	bhi.n	8001ef6 <HAL_GPIO_Init+0x12e>
 8001e16:	4a9f      	ldr	r2, [pc, #636]	; (8002094 <HAL_GPIO_Init+0x2cc>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d052      	beq.n	8001ec2 <HAL_GPIO_Init+0xfa>
 8001e1c:	4a9d      	ldr	r2, [pc, #628]	; (8002094 <HAL_GPIO_Init+0x2cc>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d869      	bhi.n	8001ef6 <HAL_GPIO_Init+0x12e>
 8001e22:	4a9d      	ldr	r2, [pc, #628]	; (8002098 <HAL_GPIO_Init+0x2d0>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d04c      	beq.n	8001ec2 <HAL_GPIO_Init+0xfa>
 8001e28:	4a9b      	ldr	r2, [pc, #620]	; (8002098 <HAL_GPIO_Init+0x2d0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d863      	bhi.n	8001ef6 <HAL_GPIO_Init+0x12e>
 8001e2e:	4a9b      	ldr	r2, [pc, #620]	; (800209c <HAL_GPIO_Init+0x2d4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d046      	beq.n	8001ec2 <HAL_GPIO_Init+0xfa>
 8001e34:	4a99      	ldr	r2, [pc, #612]	; (800209c <HAL_GPIO_Init+0x2d4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d85d      	bhi.n	8001ef6 <HAL_GPIO_Init+0x12e>
 8001e3a:	2b12      	cmp	r3, #18
 8001e3c:	d82a      	bhi.n	8001e94 <HAL_GPIO_Init+0xcc>
 8001e3e:	2b12      	cmp	r3, #18
 8001e40:	d859      	bhi.n	8001ef6 <HAL_GPIO_Init+0x12e>
 8001e42:	a201      	add	r2, pc, #4	; (adr r2, 8001e48 <HAL_GPIO_Init+0x80>)
 8001e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e48:	08001ec3 	.word	0x08001ec3
 8001e4c:	08001e9d 	.word	0x08001e9d
 8001e50:	08001eaf 	.word	0x08001eaf
 8001e54:	08001ef1 	.word	0x08001ef1
 8001e58:	08001ef7 	.word	0x08001ef7
 8001e5c:	08001ef7 	.word	0x08001ef7
 8001e60:	08001ef7 	.word	0x08001ef7
 8001e64:	08001ef7 	.word	0x08001ef7
 8001e68:	08001ef7 	.word	0x08001ef7
 8001e6c:	08001ef7 	.word	0x08001ef7
 8001e70:	08001ef7 	.word	0x08001ef7
 8001e74:	08001ef7 	.word	0x08001ef7
 8001e78:	08001ef7 	.word	0x08001ef7
 8001e7c:	08001ef7 	.word	0x08001ef7
 8001e80:	08001ef7 	.word	0x08001ef7
 8001e84:	08001ef7 	.word	0x08001ef7
 8001e88:	08001ef7 	.word	0x08001ef7
 8001e8c:	08001ea5 	.word	0x08001ea5
 8001e90:	08001eb9 	.word	0x08001eb9
 8001e94:	4a82      	ldr	r2, [pc, #520]	; (80020a0 <HAL_GPIO_Init+0x2d8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d013      	beq.n	8001ec2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e9a:	e02c      	b.n	8001ef6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	623b      	str	r3, [r7, #32]
          break;
 8001ea2:	e029      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	623b      	str	r3, [r7, #32]
          break;
 8001eac:	e024      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	3308      	adds	r3, #8
 8001eb4:	623b      	str	r3, [r7, #32]
          break;
 8001eb6:	e01f      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	330c      	adds	r3, #12
 8001ebe:	623b      	str	r3, [r7, #32]
          break;
 8001ec0:	e01a      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d102      	bne.n	8001ed0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eca:	2304      	movs	r3, #4
 8001ecc:	623b      	str	r3, [r7, #32]
          break;
 8001ece:	e013      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d105      	bne.n	8001ee4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ed8:	2308      	movs	r3, #8
 8001eda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	611a      	str	r2, [r3, #16]
          break;
 8001ee2:	e009      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee4:	2308      	movs	r3, #8
 8001ee6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	615a      	str	r2, [r3, #20]
          break;
 8001eee:	e003      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	623b      	str	r3, [r7, #32]
          break;
 8001ef4:	e000      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          break;
 8001ef6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	2bff      	cmp	r3, #255	; 0xff
 8001efc:	d801      	bhi.n	8001f02 <HAL_GPIO_Init+0x13a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	e001      	b.n	8001f06 <HAL_GPIO_Init+0x13e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3304      	adds	r3, #4
 8001f06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	2bff      	cmp	r3, #255	; 0xff
 8001f0c:	d802      	bhi.n	8001f14 <HAL_GPIO_Init+0x14c>
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	e002      	b.n	8001f1a <HAL_GPIO_Init+0x152>
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	3b08      	subs	r3, #8
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	210f      	movs	r1, #15
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	fa01 f303 	lsl.w	r3, r1, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	6a39      	ldr	r1, [r7, #32]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	fa01 f303 	lsl.w	r3, r1, r3
 8001f34:	431a      	orrs	r2, r3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 8090 	beq.w	8002068 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f48:	4b56      	ldr	r3, [pc, #344]	; (80020a4 <HAL_GPIO_Init+0x2dc>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	4a55      	ldr	r2, [pc, #340]	; (80020a4 <HAL_GPIO_Init+0x2dc>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6193      	str	r3, [r2, #24]
 8001f54:	4b53      	ldr	r3, [pc, #332]	; (80020a4 <HAL_GPIO_Init+0x2dc>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f60:	4a51      	ldr	r2, [pc, #324]	; (80020a8 <HAL_GPIO_Init+0x2e0>)
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	089b      	lsrs	r3, r3, #2
 8001f66:	3302      	adds	r3, #2
 8001f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	220f      	movs	r2, #15
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4013      	ands	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a49      	ldr	r2, [pc, #292]	; (80020ac <HAL_GPIO_Init+0x2e4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d00d      	beq.n	8001fa8 <HAL_GPIO_Init+0x1e0>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a48      	ldr	r2, [pc, #288]	; (80020b0 <HAL_GPIO_Init+0x2e8>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d007      	beq.n	8001fa4 <HAL_GPIO_Init+0x1dc>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a47      	ldr	r2, [pc, #284]	; (80020b4 <HAL_GPIO_Init+0x2ec>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d101      	bne.n	8001fa0 <HAL_GPIO_Init+0x1d8>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e004      	b.n	8001faa <HAL_GPIO_Init+0x1e2>
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e002      	b.n	8001faa <HAL_GPIO_Init+0x1e2>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <HAL_GPIO_Init+0x1e2>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fac:	f002 0203 	and.w	r2, r2, #3
 8001fb0:	0092      	lsls	r2, r2, #2
 8001fb2:	4093      	lsls	r3, r2
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fba:	493b      	ldr	r1, [pc, #236]	; (80020a8 <HAL_GPIO_Init+0x2e0>)
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	089b      	lsrs	r3, r3, #2
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d006      	beq.n	8001fe2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fd4:	4b38      	ldr	r3, [pc, #224]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	4937      	ldr	r1, [pc, #220]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	608b      	str	r3, [r1, #8]
 8001fe0:	e006      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fe2:	4b35      	ldr	r3, [pc, #212]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	4933      	ldr	r1, [pc, #204]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d006      	beq.n	800200a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ffc:	4b2e      	ldr	r3, [pc, #184]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	492d      	ldr	r1, [pc, #180]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	60cb      	str	r3, [r1, #12]
 8002008:	e006      	b.n	8002018 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800200a:	4b2b      	ldr	r3, [pc, #172]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	43db      	mvns	r3, r3
 8002012:	4929      	ldr	r1, [pc, #164]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8002014:	4013      	ands	r3, r2
 8002016:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d006      	beq.n	8002032 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002024:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	4923      	ldr	r1, [pc, #140]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]
 8002030:	e006      	b.n	8002040 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002032:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	43db      	mvns	r3, r3
 800203a:	491f      	ldr	r1, [pc, #124]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 800203c:	4013      	ands	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800204c:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4919      	ldr	r1, [pc, #100]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	600b      	str	r3, [r1, #0]
 8002058:	e006      	b.n	8002068 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800205a:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	43db      	mvns	r3, r3
 8002062:	4915      	ldr	r1, [pc, #84]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8002064:	4013      	ands	r3, r2
 8002066:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	3301      	adds	r3, #1
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	fa22 f303 	lsr.w	r3, r2, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	f47f aeaf 	bne.w	8001ddc <HAL_GPIO_Init+0x14>
  }
}
 800207e:	bf00      	nop
 8002080:	bf00      	nop
 8002082:	372c      	adds	r7, #44	; 0x2c
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	10320000 	.word	0x10320000
 8002090:	10310000 	.word	0x10310000
 8002094:	10220000 	.word	0x10220000
 8002098:	10210000 	.word	0x10210000
 800209c:	10120000 	.word	0x10120000
 80020a0:	10110000 	.word	0x10110000
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40010000 	.word	0x40010000
 80020ac:	40010800 	.word	0x40010800
 80020b0:	40010c00 	.word	0x40010c00
 80020b4:	40011000 	.word	0x40011000
 80020b8:	40010400 	.word	0x40010400

080020bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	887b      	ldrh	r3, [r7, #2]
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020d4:	2301      	movs	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
 80020d8:	e001      	b.n	80020de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020de:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr

080020ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	460b      	mov	r3, r1
 80020f4:	807b      	strh	r3, [r7, #2]
 80020f6:	4613      	mov	r3, r2
 80020f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020fa:	787b      	ldrb	r3, [r7, #1]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002100:	887a      	ldrh	r2, [r7, #2]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002106:	e003      	b.n	8002110 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002108:	887b      	ldrh	r3, [r7, #2]
 800210a:	041a      	lsls	r2, r3, #16
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	611a      	str	r2, [r3, #16]
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr

0800211a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800211a:	b480      	push	{r7}
 800211c:	b085      	sub	sp, #20
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	460b      	mov	r3, r1
 8002124:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800212c:	887a      	ldrh	r2, [r7, #2]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4013      	ands	r3, r2
 8002132:	041a      	lsls	r2, r3, #16
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	43d9      	mvns	r1, r3
 8002138:	887b      	ldrh	r3, [r7, #2]
 800213a:	400b      	ands	r3, r1
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	611a      	str	r2, [r3, #16]
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e26c      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 8087 	beq.w	800227a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800216c:	4b92      	ldr	r3, [pc, #584]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 030c 	and.w	r3, r3, #12
 8002174:	2b04      	cmp	r3, #4
 8002176:	d00c      	beq.n	8002192 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002178:	4b8f      	ldr	r3, [pc, #572]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 030c 	and.w	r3, r3, #12
 8002180:	2b08      	cmp	r3, #8
 8002182:	d112      	bne.n	80021aa <HAL_RCC_OscConfig+0x5e>
 8002184:	4b8c      	ldr	r3, [pc, #560]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002190:	d10b      	bne.n	80021aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002192:	4b89      	ldr	r3, [pc, #548]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d06c      	beq.n	8002278 <HAL_RCC_OscConfig+0x12c>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d168      	bne.n	8002278 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e246      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b2:	d106      	bne.n	80021c2 <HAL_RCC_OscConfig+0x76>
 80021b4:	4b80      	ldr	r3, [pc, #512]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a7f      	ldr	r2, [pc, #508]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 80021ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	e02e      	b.n	8002220 <HAL_RCC_OscConfig+0xd4>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10c      	bne.n	80021e4 <HAL_RCC_OscConfig+0x98>
 80021ca:	4b7b      	ldr	r3, [pc, #492]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a7a      	ldr	r2, [pc, #488]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	4b78      	ldr	r3, [pc, #480]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a77      	ldr	r2, [pc, #476]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	e01d      	b.n	8002220 <HAL_RCC_OscConfig+0xd4>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021ec:	d10c      	bne.n	8002208 <HAL_RCC_OscConfig+0xbc>
 80021ee:	4b72      	ldr	r3, [pc, #456]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a71      	ldr	r2, [pc, #452]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b6f      	ldr	r3, [pc, #444]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a6e      	ldr	r2, [pc, #440]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 8002200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	e00b      	b.n	8002220 <HAL_RCC_OscConfig+0xd4>
 8002208:	4b6b      	ldr	r3, [pc, #428]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a6a      	ldr	r2, [pc, #424]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 800220e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	4b68      	ldr	r3, [pc, #416]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a67      	ldr	r2, [pc, #412]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 800221a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800221e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d013      	beq.n	8002250 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002228:	f7ff fcb6 	bl	8001b98 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002230:	f7ff fcb2 	bl	8001b98 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b64      	cmp	r3, #100	; 0x64
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e1fa      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002242:	4b5d      	ldr	r3, [pc, #372]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0xe4>
 800224e:	e014      	b.n	800227a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7ff fca2 	bl	8001b98 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002258:	f7ff fc9e 	bl	8001b98 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b64      	cmp	r3, #100	; 0x64
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e1e6      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226a:	4b53      	ldr	r3, [pc, #332]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x10c>
 8002276:	e000      	b.n	800227a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d063      	beq.n	800234e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002286:	4b4c      	ldr	r3, [pc, #304]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00b      	beq.n	80022aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002292:	4b49      	ldr	r3, [pc, #292]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b08      	cmp	r3, #8
 800229c:	d11c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x18c>
 800229e:	4b46      	ldr	r3, [pc, #280]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d116      	bne.n	80022d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022aa:	4b43      	ldr	r3, [pc, #268]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d005      	beq.n	80022c2 <HAL_RCC_OscConfig+0x176>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d001      	beq.n	80022c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e1ba      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c2:	4b3d      	ldr	r3, [pc, #244]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4939      	ldr	r1, [pc, #228]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d6:	e03a      	b.n	800234e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d020      	beq.n	8002322 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e0:	4b36      	ldr	r3, [pc, #216]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7ff fc57 	bl	8001b98 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ee:	f7ff fc53 	bl	8001b98 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e19b      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002300:	4b2d      	ldr	r3, [pc, #180]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230c:	4b2a      	ldr	r3, [pc, #168]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4927      	ldr	r1, [pc, #156]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 800231c:	4313      	orrs	r3, r2
 800231e:	600b      	str	r3, [r1, #0]
 8002320:	e015      	b.n	800234e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002322:	4b26      	ldr	r3, [pc, #152]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002328:	f7ff fc36 	bl	8001b98 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002330:	f7ff fc32 	bl	8001b98 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e17a      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002342:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d03a      	beq.n	80023d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d019      	beq.n	8002396 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002362:	4b17      	ldr	r3, [pc, #92]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 8002364:	2201      	movs	r2, #1
 8002366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002368:	f7ff fc16 	bl	8001b98 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002370:	f7ff fc12 	bl	8001b98 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e15a      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002382:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <HAL_RCC_OscConfig+0x26c>)
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800238e:	2001      	movs	r0, #1
 8002390:	f000 fa9a 	bl	80028c8 <RCC_Delay>
 8002394:	e01c      	b.n	80023d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239c:	f7ff fbfc 	bl	8001b98 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a2:	e00f      	b.n	80023c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a4:	f7ff fbf8 	bl	8001b98 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d908      	bls.n	80023c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e140      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
 80023b6:	bf00      	nop
 80023b8:	40021000 	.word	0x40021000
 80023bc:	42420000 	.word	0x42420000
 80023c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c4:	4b9e      	ldr	r3, [pc, #632]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1e9      	bne.n	80023a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 80a6 	beq.w	800252a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023de:	2300      	movs	r3, #0
 80023e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e2:	4b97      	ldr	r3, [pc, #604]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10d      	bne.n	800240a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ee:	4b94      	ldr	r3, [pc, #592]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	4a93      	ldr	r2, [pc, #588]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 80023f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f8:	61d3      	str	r3, [r2, #28]
 80023fa:	4b91      	ldr	r3, [pc, #580]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002406:	2301      	movs	r3, #1
 8002408:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240a:	4b8e      	ldr	r3, [pc, #568]	; (8002644 <HAL_RCC_OscConfig+0x4f8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002412:	2b00      	cmp	r3, #0
 8002414:	d118      	bne.n	8002448 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002416:	4b8b      	ldr	r3, [pc, #556]	; (8002644 <HAL_RCC_OscConfig+0x4f8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a8a      	ldr	r2, [pc, #552]	; (8002644 <HAL_RCC_OscConfig+0x4f8>)
 800241c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002422:	f7ff fbb9 	bl	8001b98 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800242a:	f7ff fbb5 	bl	8001b98 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b64      	cmp	r3, #100	; 0x64
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e0fd      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243c:	4b81      	ldr	r3, [pc, #516]	; (8002644 <HAL_RCC_OscConfig+0x4f8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d106      	bne.n	800245e <HAL_RCC_OscConfig+0x312>
 8002450:	4b7b      	ldr	r3, [pc, #492]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	4a7a      	ldr	r2, [pc, #488]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	6213      	str	r3, [r2, #32]
 800245c:	e02d      	b.n	80024ba <HAL_RCC_OscConfig+0x36e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10c      	bne.n	8002480 <HAL_RCC_OscConfig+0x334>
 8002466:	4b76      	ldr	r3, [pc, #472]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	4a75      	ldr	r2, [pc, #468]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 800246c:	f023 0301 	bic.w	r3, r3, #1
 8002470:	6213      	str	r3, [r2, #32]
 8002472:	4b73      	ldr	r3, [pc, #460]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	4a72      	ldr	r2, [pc, #456]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 8002478:	f023 0304 	bic.w	r3, r3, #4
 800247c:	6213      	str	r3, [r2, #32]
 800247e:	e01c      	b.n	80024ba <HAL_RCC_OscConfig+0x36e>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b05      	cmp	r3, #5
 8002486:	d10c      	bne.n	80024a2 <HAL_RCC_OscConfig+0x356>
 8002488:	4b6d      	ldr	r3, [pc, #436]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4a6c      	ldr	r2, [pc, #432]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 800248e:	f043 0304 	orr.w	r3, r3, #4
 8002492:	6213      	str	r3, [r2, #32]
 8002494:	4b6a      	ldr	r3, [pc, #424]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	4a69      	ldr	r2, [pc, #420]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	6213      	str	r3, [r2, #32]
 80024a0:	e00b      	b.n	80024ba <HAL_RCC_OscConfig+0x36e>
 80024a2:	4b67      	ldr	r3, [pc, #412]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	4a66      	ldr	r2, [pc, #408]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	f023 0301 	bic.w	r3, r3, #1
 80024ac:	6213      	str	r3, [r2, #32]
 80024ae:	4b64      	ldr	r3, [pc, #400]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	4a63      	ldr	r2, [pc, #396]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 80024b4:	f023 0304 	bic.w	r3, r3, #4
 80024b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d015      	beq.n	80024ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c2:	f7ff fb69 	bl	8001b98 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c8:	e00a      	b.n	80024e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ca:	f7ff fb65 	bl	8001b98 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d8:	4293      	cmp	r3, r2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e0ab      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e0:	4b57      	ldr	r3, [pc, #348]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0ee      	beq.n	80024ca <HAL_RCC_OscConfig+0x37e>
 80024ec:	e014      	b.n	8002518 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ee:	f7ff fb53 	bl	8001b98 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f4:	e00a      	b.n	800250c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f6:	f7ff fb4f 	bl	8001b98 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	f241 3288 	movw	r2, #5000	; 0x1388
 8002504:	4293      	cmp	r3, r2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e095      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800250c:	4b4c      	ldr	r3, [pc, #304]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1ee      	bne.n	80024f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002518:	7dfb      	ldrb	r3, [r7, #23]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d105      	bne.n	800252a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251e:	4b48      	ldr	r3, [pc, #288]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	4a47      	ldr	r2, [pc, #284]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 8002524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002528:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 8081 	beq.w	8002636 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002534:	4b42      	ldr	r3, [pc, #264]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 030c 	and.w	r3, r3, #12
 800253c:	2b08      	cmp	r3, #8
 800253e:	d061      	beq.n	8002604 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d146      	bne.n	80025d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002548:	4b3f      	ldr	r3, [pc, #252]	; (8002648 <HAL_RCC_OscConfig+0x4fc>)
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254e:	f7ff fb23 	bl	8001b98 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002556:	f7ff fb1f 	bl	8001b98 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e067      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002568:	4b35      	ldr	r3, [pc, #212]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f0      	bne.n	8002556 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800257c:	d108      	bne.n	8002590 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800257e:	4b30      	ldr	r3, [pc, #192]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	492d      	ldr	r1, [pc, #180]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002590:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a19      	ldr	r1, [r3, #32]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	430b      	orrs	r3, r1
 80025a2:	4927      	ldr	r1, [pc, #156]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a8:	4b27      	ldr	r3, [pc, #156]	; (8002648 <HAL_RCC_OscConfig+0x4fc>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ae:	f7ff faf3 	bl	8001b98 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b6:	f7ff faef 	bl	8001b98 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e037      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025c8:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x46a>
 80025d4:	e02f      	b.n	8002636 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d6:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <HAL_RCC_OscConfig+0x4fc>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7ff fadc 	bl	8001b98 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e4:	f7ff fad8 	bl	8001b98 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e020      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f6:	4b12      	ldr	r3, [pc, #72]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0x498>
 8002602:	e018      	b.n	8002636 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d101      	bne.n	8002610 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e013      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_RCC_OscConfig+0x4f4>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	429a      	cmp	r2, r3
 8002622:	d106      	bne.n	8002632 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262e:	429a      	cmp	r2, r3
 8002630:	d001      	beq.n	8002636 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40021000 	.word	0x40021000
 8002644:	40007000 	.word	0x40007000
 8002648:	42420060 	.word	0x42420060

0800264c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0d0      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002660:	4b6a      	ldr	r3, [pc, #424]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d910      	bls.n	8002690 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266e:	4b67      	ldr	r3, [pc, #412]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 0207 	bic.w	r2, r3, #7
 8002676:	4965      	ldr	r1, [pc, #404]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	4313      	orrs	r3, r2
 800267c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267e:	4b63      	ldr	r3, [pc, #396]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d001      	beq.n	8002690 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0b8      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d020      	beq.n	80026de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a8:	4b59      	ldr	r3, [pc, #356]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a58      	ldr	r2, [pc, #352]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026c0:	4b53      	ldr	r3, [pc, #332]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	4a52      	ldr	r2, [pc, #328]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026cc:	4b50      	ldr	r3, [pc, #320]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	494d      	ldr	r1, [pc, #308]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d040      	beq.n	800276c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f2:	4b47      	ldr	r3, [pc, #284]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d115      	bne.n	800272a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e07f      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d107      	bne.n	800271a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270a:	4b41      	ldr	r3, [pc, #260]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e073      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271a:	4b3d      	ldr	r3, [pc, #244]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e06b      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800272a:	4b39      	ldr	r3, [pc, #228]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f023 0203 	bic.w	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	4936      	ldr	r1, [pc, #216]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	4313      	orrs	r3, r2
 800273a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800273c:	f7ff fa2c 	bl	8001b98 <HAL_GetTick>
 8002740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002742:	e00a      	b.n	800275a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002744:	f7ff fa28 	bl	8001b98 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e053      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275a:	4b2d      	ldr	r3, [pc, #180]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 020c 	and.w	r2, r3, #12
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	429a      	cmp	r2, r3
 800276a:	d1eb      	bne.n	8002744 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800276c:	4b27      	ldr	r3, [pc, #156]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d210      	bcs.n	800279c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277a:	4b24      	ldr	r3, [pc, #144]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 0207 	bic.w	r2, r3, #7
 8002782:	4922      	ldr	r1, [pc, #136]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	4313      	orrs	r3, r2
 8002788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800278a:	4b20      	ldr	r3, [pc, #128]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e032      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4916      	ldr	r1, [pc, #88]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d009      	beq.n	80027da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027c6:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	490e      	ldr	r1, [pc, #56]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027da:	f000 f821 	bl	8002820 <HAL_RCC_GetSysClockFreq>
 80027de:	4602      	mov	r2, r0
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	490a      	ldr	r1, [pc, #40]	; (8002814 <HAL_RCC_ClockConfig+0x1c8>)
 80027ec:	5ccb      	ldrb	r3, [r1, r3]
 80027ee:	fa22 f303 	lsr.w	r3, r2, r3
 80027f2:	4a09      	ldr	r2, [pc, #36]	; (8002818 <HAL_RCC_ClockConfig+0x1cc>)
 80027f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_RCC_ClockConfig+0x1d0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff f98a 	bl	8001b14 <HAL_InitTick>

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40022000 	.word	0x40022000
 8002810:	40021000 	.word	0x40021000
 8002814:	0800312c 	.word	0x0800312c
 8002818:	20000050 	.word	0x20000050
 800281c:	20000054 	.word	0x20000054

08002820 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	2300      	movs	r3, #0
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	2300      	movs	r3, #0
 8002834:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800283a:	4b1e      	ldr	r3, [pc, #120]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b04      	cmp	r3, #4
 8002848:	d002      	beq.n	8002850 <HAL_RCC_GetSysClockFreq+0x30>
 800284a:	2b08      	cmp	r3, #8
 800284c:	d003      	beq.n	8002856 <HAL_RCC_GetSysClockFreq+0x36>
 800284e:	e027      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002850:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002852:	613b      	str	r3, [r7, #16]
      break;
 8002854:	e027      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	0c9b      	lsrs	r3, r3, #18
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	4a17      	ldr	r2, [pc, #92]	; (80028bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002860:	5cd3      	ldrb	r3, [r2, r3]
 8002862:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d010      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800286e:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	0c5b      	lsrs	r3, r3, #17
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	4a11      	ldr	r2, [pc, #68]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800287a:	5cd3      	ldrb	r3, [r2, r3]
 800287c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a0d      	ldr	r2, [pc, #52]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002882:	fb02 f203 	mul.w	r2, r2, r3
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	fbb2 f3f3 	udiv	r3, r2, r3
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	e004      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a0c      	ldr	r2, [pc, #48]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002894:	fb02 f303 	mul.w	r3, r2, r3
 8002898:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	613b      	str	r3, [r7, #16]
      break;
 800289e:	e002      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80028a2:	613b      	str	r3, [r7, #16]
      break;
 80028a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028a6:	693b      	ldr	r3, [r7, #16]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	371c      	adds	r7, #28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000
 80028b8:	007a1200 	.word	0x007a1200
 80028bc:	0800313c 	.word	0x0800313c
 80028c0:	0800314c 	.word	0x0800314c
 80028c4:	003d0900 	.word	0x003d0900

080028c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028d0:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <RCC_Delay+0x34>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <RCC_Delay+0x38>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	0a5b      	lsrs	r3, r3, #9
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	fb02 f303 	mul.w	r3, r2, r3
 80028e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028e4:	bf00      	nop
  }
  while (Delay --);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1e5a      	subs	r2, r3, #1
 80028ea:	60fa      	str	r2, [r7, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f9      	bne.n	80028e4 <RCC_Delay+0x1c>
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr
 80028fc:	20000050 	.word	0x20000050
 8002900:	10624dd3 	.word	0x10624dd3

08002904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e041      	b.n	800299a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff f85a 	bl	80019e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3304      	adds	r3, #4
 8002940:	4619      	mov	r1, r3
 8002942:	4610      	mov	r0, r2
 8002944:	f000 fa56 	bl	8002df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d001      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e035      	b.n	8002a28 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a16      	ldr	r2, [pc, #88]	; (8002a34 <HAL_TIM_Base_Start_IT+0x90>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d009      	beq.n	80029f2 <HAL_TIM_Base_Start_IT+0x4e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e6:	d004      	beq.n	80029f2 <HAL_TIM_Base_Start_IT+0x4e>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a12      	ldr	r2, [pc, #72]	; (8002a38 <HAL_TIM_Base_Start_IT+0x94>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d111      	bne.n	8002a16 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b06      	cmp	r3, #6
 8002a02:	d010      	beq.n	8002a26 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a14:	e007      	b.n	8002a26 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0201 	orr.w	r2, r2, #1
 8002a24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40012c00 	.word	0x40012c00
 8002a38:	40000400 	.word	0x40000400

08002a3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d020      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d01b      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0202 	mvn.w	r2, #2
 8002a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f998 	bl	8002dbc <HAL_TIM_IC_CaptureCallback>
 8002a8c:	e005      	b.n	8002a9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f98b 	bl	8002daa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f99a 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d020      	beq.n	8002aec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01b      	beq.n	8002aec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0204 	mvn.w	r2, #4
 8002abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f972 	bl	8002dbc <HAL_TIM_IC_CaptureCallback>
 8002ad8:	e005      	b.n	8002ae6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f965 	bl	8002daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f974 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d020      	beq.n	8002b38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d01b      	beq.n	8002b38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0208 	mvn.w	r2, #8
 8002b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f94c 	bl	8002dbc <HAL_TIM_IC_CaptureCallback>
 8002b24:	e005      	b.n	8002b32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f93f 	bl	8002daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f94e 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f003 0310 	and.w	r3, r3, #16
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d020      	beq.n	8002b84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f003 0310 	and.w	r3, r3, #16
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d01b      	beq.n	8002b84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f06f 0210 	mvn.w	r2, #16
 8002b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2208      	movs	r2, #8
 8002b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f926 	bl	8002dbc <HAL_TIM_IC_CaptureCallback>
 8002b70:	e005      	b.n	8002b7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f919 	bl	8002daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f928 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00c      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d007      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0201 	mvn.w	r2, #1
 8002ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fe fd6e 	bl	8001684 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00c      	beq.n	8002bcc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d007      	beq.n	8002bcc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fa6f 	bl	80030aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00c      	beq.n	8002bf0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d007      	beq.n	8002bf0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f8f8 	bl	8002de0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00c      	beq.n	8002c14 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d007      	beq.n	8002c14 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0220 	mvn.w	r2, #32
 8002c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fa42 	bl	8003098 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c14:	bf00      	nop
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_TIM_ConfigClockSource+0x1c>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e0b4      	b.n	8002da2 <HAL_TIM_ConfigClockSource+0x186>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c70:	d03e      	beq.n	8002cf0 <HAL_TIM_ConfigClockSource+0xd4>
 8002c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c76:	f200 8087 	bhi.w	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c7e:	f000 8086 	beq.w	8002d8e <HAL_TIM_ConfigClockSource+0x172>
 8002c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c86:	d87f      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002c88:	2b70      	cmp	r3, #112	; 0x70
 8002c8a:	d01a      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0xa6>
 8002c8c:	2b70      	cmp	r3, #112	; 0x70
 8002c8e:	d87b      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002c90:	2b60      	cmp	r3, #96	; 0x60
 8002c92:	d050      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x11a>
 8002c94:	2b60      	cmp	r3, #96	; 0x60
 8002c96:	d877      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002c98:	2b50      	cmp	r3, #80	; 0x50
 8002c9a:	d03c      	beq.n	8002d16 <HAL_TIM_ConfigClockSource+0xfa>
 8002c9c:	2b50      	cmp	r3, #80	; 0x50
 8002c9e:	d873      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca0:	2b40      	cmp	r3, #64	; 0x40
 8002ca2:	d058      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0x13a>
 8002ca4:	2b40      	cmp	r3, #64	; 0x40
 8002ca6:	d86f      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca8:	2b30      	cmp	r3, #48	; 0x30
 8002caa:	d064      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x15a>
 8002cac:	2b30      	cmp	r3, #48	; 0x30
 8002cae:	d86b      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb0:	2b20      	cmp	r3, #32
 8002cb2:	d060      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x15a>
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	d867      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d05c      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x15a>
 8002cbc:	2b10      	cmp	r3, #16
 8002cbe:	d05a      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x15a>
 8002cc0:	e062      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6899      	ldr	r1, [r3, #8]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f000 f96a 	bl	8002faa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ce4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	609a      	str	r2, [r3, #8]
      break;
 8002cee:	e04f      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	6899      	ldr	r1, [r3, #8]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f000 f953 	bl	8002faa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d12:	609a      	str	r2, [r3, #8]
      break;
 8002d14:	e03c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6859      	ldr	r1, [r3, #4]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	461a      	mov	r2, r3
 8002d24:	f000 f8ca 	bl	8002ebc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2150      	movs	r1, #80	; 0x50
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 f921 	bl	8002f76 <TIM_ITRx_SetConfig>
      break;
 8002d34:	e02c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6859      	ldr	r1, [r3, #4]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f000 f8e8 	bl	8002f18 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2160      	movs	r1, #96	; 0x60
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f911 	bl	8002f76 <TIM_ITRx_SetConfig>
      break;
 8002d54:	e01c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	461a      	mov	r2, r3
 8002d64:	f000 f8aa 	bl	8002ebc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2140      	movs	r1, #64	; 0x40
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 f901 	bl	8002f76 <TIM_ITRx_SetConfig>
      break;
 8002d74:	e00c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4610      	mov	r0, r2
 8002d82:	f000 f8f8 	bl	8002f76 <TIM_ITRx_SetConfig>
      break;
 8002d86:	e003      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d8c:	e000      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr

08002dbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr

08002dce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr

08002de0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
	...

08002df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a2b      	ldr	r2, [pc, #172]	; (8002eb4 <TIM_Base_SetConfig+0xc0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d007      	beq.n	8002e1c <TIM_Base_SetConfig+0x28>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e12:	d003      	beq.n	8002e1c <TIM_Base_SetConfig+0x28>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a28      	ldr	r2, [pc, #160]	; (8002eb8 <TIM_Base_SetConfig+0xc4>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d108      	bne.n	8002e2e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a20      	ldr	r2, [pc, #128]	; (8002eb4 <TIM_Base_SetConfig+0xc0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d007      	beq.n	8002e46 <TIM_Base_SetConfig+0x52>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3c:	d003      	beq.n	8002e46 <TIM_Base_SetConfig+0x52>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a1d      	ldr	r2, [pc, #116]	; (8002eb8 <TIM_Base_SetConfig+0xc4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d108      	bne.n	8002e58 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a0d      	ldr	r2, [pc, #52]	; (8002eb4 <TIM_Base_SetConfig+0xc0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d103      	bne.n	8002e8c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d005      	beq.n	8002eaa <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f023 0201 	bic.w	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	611a      	str	r2, [r3, #16]
  }
}
 8002eaa:	bf00      	nop
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr
 8002eb4:	40012c00 	.word	0x40012c00
 8002eb8:	40000400 	.word	0x40000400

08002ebc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	f023 0201 	bic.w	r2, r3, #1
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f023 030a 	bic.w	r3, r3, #10
 8002ef8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	621a      	str	r2, [r3, #32]
}
 8002f0e:	bf00      	nop
 8002f10:	371c      	adds	r7, #28
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr

08002f18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b087      	sub	sp, #28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	f023 0210 	bic.w	r2, r3, #16
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	031b      	lsls	r3, r3, #12
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f54:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	621a      	str	r2, [r3, #32]
}
 8002f6c:	bf00      	nop
 8002f6e:	371c      	adds	r7, #28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr

08002f76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b085      	sub	sp, #20
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f043 0307 	orr.w	r3, r3, #7
 8002f98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	609a      	str	r2, [r3, #8]
}
 8002fa0:	bf00      	nop
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr

08002faa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b087      	sub	sp, #28
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fc4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	021a      	lsls	r2, r3, #8
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	609a      	str	r2, [r3, #8]
}
 8002fde:	bf00      	nop
 8002fe0:	371c      	adds	r7, #28
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e041      	b.n	8003084 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003026:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a14      	ldr	r2, [pc, #80]	; (8003090 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d009      	beq.n	8003058 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304c:	d004      	beq.n	8003058 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a10      	ldr	r2, [pc, #64]	; (8003094 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d10c      	bne.n	8003072 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800305e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	4313      	orrs	r3, r2
 8003068:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40012c00 	.word	0x40012c00
 8003094:	40000400 	.word	0x40000400

08003098 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr

080030aa <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <__libc_init_array>:
 80030bc:	b570      	push	{r4, r5, r6, lr}
 80030be:	2600      	movs	r6, #0
 80030c0:	4d0c      	ldr	r5, [pc, #48]	; (80030f4 <__libc_init_array+0x38>)
 80030c2:	4c0d      	ldr	r4, [pc, #52]	; (80030f8 <__libc_init_array+0x3c>)
 80030c4:	1b64      	subs	r4, r4, r5
 80030c6:	10a4      	asrs	r4, r4, #2
 80030c8:	42a6      	cmp	r6, r4
 80030ca:	d109      	bne.n	80030e0 <__libc_init_array+0x24>
 80030cc:	f000 f822 	bl	8003114 <_init>
 80030d0:	2600      	movs	r6, #0
 80030d2:	4d0a      	ldr	r5, [pc, #40]	; (80030fc <__libc_init_array+0x40>)
 80030d4:	4c0a      	ldr	r4, [pc, #40]	; (8003100 <__libc_init_array+0x44>)
 80030d6:	1b64      	subs	r4, r4, r5
 80030d8:	10a4      	asrs	r4, r4, #2
 80030da:	42a6      	cmp	r6, r4
 80030dc:	d105      	bne.n	80030ea <__libc_init_array+0x2e>
 80030de:	bd70      	pop	{r4, r5, r6, pc}
 80030e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e4:	4798      	blx	r3
 80030e6:	3601      	adds	r6, #1
 80030e8:	e7ee      	b.n	80030c8 <__libc_init_array+0xc>
 80030ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ee:	4798      	blx	r3
 80030f0:	3601      	adds	r6, #1
 80030f2:	e7f2      	b.n	80030da <__libc_init_array+0x1e>
 80030f4:	08003150 	.word	0x08003150
 80030f8:	08003150 	.word	0x08003150
 80030fc:	08003150 	.word	0x08003150
 8003100:	08003154 	.word	0x08003154

08003104 <memset>:
 8003104:	4603      	mov	r3, r0
 8003106:	4402      	add	r2, r0
 8003108:	4293      	cmp	r3, r2
 800310a:	d100      	bne.n	800310e <memset+0xa>
 800310c:	4770      	bx	lr
 800310e:	f803 1b01 	strb.w	r1, [r3], #1
 8003112:	e7f9      	b.n	8003108 <memset+0x4>

08003114 <_init>:
 8003114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003116:	bf00      	nop
 8003118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800311a:	bc08      	pop	{r3}
 800311c:	469e      	mov	lr, r3
 800311e:	4770      	bx	lr

08003120 <_fini>:
 8003120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003122:	bf00      	nop
 8003124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003126:	bc08      	pop	{r3}
 8003128:	469e      	mov	lr, r3
 800312a:	4770      	bx	lr
