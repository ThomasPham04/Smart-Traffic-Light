
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003074  08003074  00013074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003098  08003098  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003098  08003098  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003098  08003098  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003098  08003098  00013098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800309c  0800309c  0001309c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080030a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000005c  080030fc  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  080030fc  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a076  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d76  00000000  00000000  0002a0fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0002be78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a10  00000000  00000000  0002c9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017347  00000000  00000000  0002d3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d078  00000000  00000000  0004470f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000829e2  00000000  00000000  00051787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4169  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b88  00000000  00000000  000d41bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800305c 	.word	0x0800305c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800305c 	.word	0x0800305c

0800014c <isButton1Pressed>:

int Key3Reg3 = NORMAL_STATE;
int TimerForKey3Press = 200;


int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000078 	.word	0x20000078

08000170 <isButton2Pressed>:

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	2000007c 	.word	0x2000007c

08000194 <isButton3Pressed>:

int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000080 	.word	0x20000080

080001b8 <subKey1Process>:


void subKey1Process(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
	button1_flag = 1;
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <subKey1Process+0x14>)
 80001be:	2201      	movs	r2, #1
 80001c0:	601a      	str	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000078 	.word	0x20000078

080001d0 <getKey1Input>:
void subKey3Process(){
//	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
	button3_flag = 1;
}

void getKey1Input(){
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	Key1Reg0 = Key1Reg1;
 80001d4:	4b1f      	ldr	r3, [pc, #124]	; (8000254 <getKey1Input+0x84>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a1f      	ldr	r2, [pc, #124]	; (8000258 <getKey1Input+0x88>)
 80001da:	6013      	str	r3, [r2, #0]
	Key1Reg1 = Key1Reg2;
 80001dc:	4b1f      	ldr	r3, [pc, #124]	; (800025c <getKey1Input+0x8c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a1c      	ldr	r2, [pc, #112]	; (8000254 <getKey1Input+0x84>)
 80001e2:	6013      	str	r3, [r2, #0]
	Key1Reg2 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80001e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e8:	481d      	ldr	r0, [pc, #116]	; (8000260 <getKey1Input+0x90>)
 80001ea:	f001 ff0b 	bl	8002004 <HAL_GPIO_ReadPin>
 80001ee:	4603      	mov	r3, r0
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b1a      	ldr	r3, [pc, #104]	; (800025c <getKey1Input+0x8c>)
 80001f4:	601a      	str	r2, [r3, #0]
	if ((Key1Reg0 == Key1Reg1) && (Key1Reg1 == Key1Reg2)){
 80001f6:	4b18      	ldr	r3, [pc, #96]	; (8000258 <getKey1Input+0x88>)
 80001f8:	681a      	ldr	r2, [r3, #0]
 80001fa:	4b16      	ldr	r3, [pc, #88]	; (8000254 <getKey1Input+0x84>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	429a      	cmp	r2, r3
 8000200:	d125      	bne.n	800024e <getKey1Input+0x7e>
 8000202:	4b14      	ldr	r3, [pc, #80]	; (8000254 <getKey1Input+0x84>)
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	4b15      	ldr	r3, [pc, #84]	; (800025c <getKey1Input+0x8c>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	429a      	cmp	r2, r3
 800020c:	d11f      	bne.n	800024e <getKey1Input+0x7e>
		if (Key1Reg3 != Key1Reg2){//nhan tha
 800020e:	4b15      	ldr	r3, [pc, #84]	; (8000264 <getKey1Input+0x94>)
 8000210:	681a      	ldr	r2, [r3, #0]
 8000212:	4b12      	ldr	r3, [pc, #72]	; (800025c <getKey1Input+0x8c>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	429a      	cmp	r2, r3
 8000218:	d00d      	beq.n	8000236 <getKey1Input+0x66>
			Key1Reg3 = Key1Reg2;
 800021a:	4b10      	ldr	r3, [pc, #64]	; (800025c <getKey1Input+0x8c>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a11      	ldr	r2, [pc, #68]	; (8000264 <getKey1Input+0x94>)
 8000220:	6013      	str	r3, [r2, #0]
			if (Key1Reg2 == PRESSED_STATE){
 8000222:	4b0e      	ldr	r3, [pc, #56]	; (800025c <getKey1Input+0x8c>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d111      	bne.n	800024e <getKey1Input+0x7e>
				//TODO
				subKey1Process();
 800022a:	f7ff ffc5 	bl	80001b8 <subKey1Process>
				TimerForKey1Press = 200;
 800022e:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <getKey1Input+0x98>)
 8000230:	22c8      	movs	r2, #200	; 0xc8
 8000232:	601a      	str	r2, [r3, #0]
			if (TimerForKey1Press == 0){
				Key1Reg3 = NORMAL_STATE;
			}
		}
	}
}
 8000234:	e00b      	b.n	800024e <getKey1Input+0x7e>
			TimerForKey1Press--;
 8000236:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <getKey1Input+0x98>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	3b01      	subs	r3, #1
 800023c:	4a0a      	ldr	r2, [pc, #40]	; (8000268 <getKey1Input+0x98>)
 800023e:	6013      	str	r3, [r2, #0]
			if (TimerForKey1Press == 0){
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <getKey1Input+0x98>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d102      	bne.n	800024e <getKey1Input+0x7e>
				Key1Reg3 = NORMAL_STATE;
 8000248:	4b06      	ldr	r3, [pc, #24]	; (8000264 <getKey1Input+0x94>)
 800024a:	2201      	movs	r2, #1
 800024c:	601a      	str	r2, [r3, #0]
}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000004 	.word	0x20000004
 8000258:	20000000 	.word	0x20000000
 800025c:	20000008 	.word	0x20000008
 8000260:	40010c00 	.word	0x40010c00
 8000264:	2000000c 	.word	0x2000000c
 8000268:	20000010 	.word	0x20000010

0800026c <getKey2Input>:

void getKey2Input(){
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	Key2Reg0 = Key2Reg1;
 8000270:	4b1f      	ldr	r3, [pc, #124]	; (80002f0 <getKey2Input+0x84>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a1f      	ldr	r2, [pc, #124]	; (80002f4 <getKey2Input+0x88>)
 8000276:	6013      	str	r3, [r2, #0]
	Key2Reg1 = Key2Reg2;
 8000278:	4b1f      	ldr	r3, [pc, #124]	; (80002f8 <getKey2Input+0x8c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a1c      	ldr	r2, [pc, #112]	; (80002f0 <getKey2Input+0x84>)
 800027e:	6013      	str	r3, [r2, #0]
	Key2Reg2 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000280:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000284:	481d      	ldr	r0, [pc, #116]	; (80002fc <getKey2Input+0x90>)
 8000286:	f001 febd 	bl	8002004 <HAL_GPIO_ReadPin>
 800028a:	4603      	mov	r3, r0
 800028c:	461a      	mov	r2, r3
 800028e:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <getKey2Input+0x8c>)
 8000290:	601a      	str	r2, [r3, #0]
	if ((Key2Reg0 == Key2Reg1) && (Key2Reg1 == Key2Reg2)){
 8000292:	4b18      	ldr	r3, [pc, #96]	; (80002f4 <getKey2Input+0x88>)
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	4b16      	ldr	r3, [pc, #88]	; (80002f0 <getKey2Input+0x84>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	429a      	cmp	r2, r3
 800029c:	d126      	bne.n	80002ec <getKey2Input+0x80>
 800029e:	4b14      	ldr	r3, [pc, #80]	; (80002f0 <getKey2Input+0x84>)
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <getKey2Input+0x8c>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d120      	bne.n	80002ec <getKey2Input+0x80>
		if (Key2Reg3 != Key2Reg2){
 80002aa:	4b15      	ldr	r3, [pc, #84]	; (8000300 <getKey2Input+0x94>)
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	4b12      	ldr	r3, [pc, #72]	; (80002f8 <getKey2Input+0x8c>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d00e      	beq.n	80002d4 <getKey2Input+0x68>
			Key2Reg3 = Key2Reg2;
 80002b6:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <getKey2Input+0x8c>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a11      	ldr	r2, [pc, #68]	; (8000300 <getKey2Input+0x94>)
 80002bc:	6013      	str	r3, [r2, #0]
			if (Key2Reg2 == PRESSED_STATE){
 80002be:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <getKey2Input+0x8c>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d112      	bne.n	80002ec <getKey2Input+0x80>
				//TODO
				button2_flag = 1;
 80002c6:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <getKey2Input+0x98>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	601a      	str	r2, [r3, #0]
				TimerForKey2Press = 200;
 80002cc:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <getKey2Input+0x9c>)
 80002ce:	22c8      	movs	r2, #200	; 0xc8
 80002d0:	601a      	str	r2, [r3, #0]
			if (TimerForKey2Press == 0){
				Key2Reg3 = NORMAL_STATE;
			}
		}
	}
}
 80002d2:	e00b      	b.n	80002ec <getKey2Input+0x80>
			TimerForKey2Press--;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <getKey2Input+0x9c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	3b01      	subs	r3, #1
 80002da:	4a0b      	ldr	r2, [pc, #44]	; (8000308 <getKey2Input+0x9c>)
 80002dc:	6013      	str	r3, [r2, #0]
			if (TimerForKey2Press == 0){
 80002de:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <getKey2Input+0x9c>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d102      	bne.n	80002ec <getKey2Input+0x80>
				Key2Reg3 = NORMAL_STATE;
 80002e6:	4b06      	ldr	r3, [pc, #24]	; (8000300 <getKey2Input+0x94>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	601a      	str	r2, [r3, #0]
}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000018 	.word	0x20000018
 80002f4:	20000014 	.word	0x20000014
 80002f8:	2000001c 	.word	0x2000001c
 80002fc:	40010c00 	.word	0x40010c00
 8000300:	20000020 	.word	0x20000020
 8000304:	2000007c 	.word	0x2000007c
 8000308:	20000024 	.word	0x20000024

0800030c <getKey3Input>:


void getKey3Input(){
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	Key3Reg0 = Key3Reg1;
 8000310:	4b1f      	ldr	r3, [pc, #124]	; (8000390 <getKey3Input+0x84>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a1f      	ldr	r2, [pc, #124]	; (8000394 <getKey3Input+0x88>)
 8000316:	6013      	str	r3, [r2, #0]
	Key3Reg1 = Key3Reg2;
 8000318:	4b1f      	ldr	r3, [pc, #124]	; (8000398 <getKey3Input+0x8c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a1c      	ldr	r2, [pc, #112]	; (8000390 <getKey3Input+0x84>)
 800031e:	6013      	str	r3, [r2, #0]
	Key3Reg2 = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000320:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000324:	481d      	ldr	r0, [pc, #116]	; (800039c <getKey3Input+0x90>)
 8000326:	f001 fe6d 	bl	8002004 <HAL_GPIO_ReadPin>
 800032a:	4603      	mov	r3, r0
 800032c:	461a      	mov	r2, r3
 800032e:	4b1a      	ldr	r3, [pc, #104]	; (8000398 <getKey3Input+0x8c>)
 8000330:	601a      	str	r2, [r3, #0]
	if ((Key3Reg0 == Key3Reg1) && (Key3Reg1 == Key3Reg2)){
 8000332:	4b18      	ldr	r3, [pc, #96]	; (8000394 <getKey3Input+0x88>)
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	4b16      	ldr	r3, [pc, #88]	; (8000390 <getKey3Input+0x84>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	429a      	cmp	r2, r3
 800033c:	d126      	bne.n	800038c <getKey3Input+0x80>
 800033e:	4b14      	ldr	r3, [pc, #80]	; (8000390 <getKey3Input+0x84>)
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	4b15      	ldr	r3, [pc, #84]	; (8000398 <getKey3Input+0x8c>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	429a      	cmp	r2, r3
 8000348:	d120      	bne.n	800038c <getKey3Input+0x80>
		if (Key3Reg3 != Key3Reg2){
 800034a:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <getKey3Input+0x94>)
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	4b12      	ldr	r3, [pc, #72]	; (8000398 <getKey3Input+0x8c>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	429a      	cmp	r2, r3
 8000354:	d00e      	beq.n	8000374 <getKey3Input+0x68>
			Key3Reg3 = Key3Reg2;
 8000356:	4b10      	ldr	r3, [pc, #64]	; (8000398 <getKey3Input+0x8c>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a11      	ldr	r2, [pc, #68]	; (80003a0 <getKey3Input+0x94>)
 800035c:	6013      	str	r3, [r2, #0]
			if (Key3Reg2 == PRESSED_STATE){
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <getKey3Input+0x8c>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d112      	bne.n	800038c <getKey3Input+0x80>
				//TODO
				button3_flag = 1;
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <getKey3Input+0x98>)
 8000368:	2201      	movs	r2, #1
 800036a:	601a      	str	r2, [r3, #0]
				TimerForKey3Press = 200;
 800036c:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <getKey3Input+0x9c>)
 800036e:	22c8      	movs	r2, #200	; 0xc8
 8000370:	601a      	str	r2, [r3, #0]
			if (TimerForKey3Press == 0){
				Key3Reg3 = NORMAL_STATE;
			}
		}
	}
}
 8000372:	e00b      	b.n	800038c <getKey3Input+0x80>
			TimerForKey3Press--;
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <getKey3Input+0x9c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	3b01      	subs	r3, #1
 800037a:	4a0b      	ldr	r2, [pc, #44]	; (80003a8 <getKey3Input+0x9c>)
 800037c:	6013      	str	r3, [r2, #0]
			if (TimerForKey3Press == 0){
 800037e:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <getKey3Input+0x9c>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d102      	bne.n	800038c <getKey3Input+0x80>
				Key3Reg3 = NORMAL_STATE;
 8000386:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <getKey3Input+0x94>)
 8000388:	2201      	movs	r2, #1
 800038a:	601a      	str	r2, [r3, #0]
}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}
 8000390:	2000002c 	.word	0x2000002c
 8000394:	20000028 	.word	0x20000028
 8000398:	20000030 	.word	0x20000030
 800039c:	40010c00 	.word	0x40010c00
 80003a0:	20000034 	.word	0x20000034
 80003a4:	20000080 	.word	0x20000080
 80003a8:	20000038 	.word	0x20000038

080003ac <fsm_automatic_run>:

#include "global.h"



void fsm_automatic_run(){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	switch(status){
 80003b0:	4b90      	ldr	r3, [pc, #576]	; (80005f4 <fsm_automatic_run+0x248>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	3b01      	subs	r3, #1
 80003b6:	2b04      	cmp	r3, #4
 80003b8:	f200 8111 	bhi.w	80005de <fsm_automatic_run+0x232>
 80003bc:	a201      	add	r2, pc, #4	; (adr r2, 80003c4 <fsm_automatic_run+0x18>)
 80003be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c2:	bf00      	nop
 80003c4:	080003d9 	.word	0x080003d9
 80003c8:	08000403 	.word	0x08000403
 80003cc:	08000477 	.word	0x08000477
 80003d0:	080004f3 	.word	0x080004f3
 80003d4:	08000565 	.word	0x08000565
	case INIT:
		//TODO
		setTimeInit();
 80003d8:	f000 fa7e 	bl	80008d8 <setTimeInit>
		setLightInit();
 80003dc:	f000 fa58 	bl	8000890 <setLightInit>
		status = RED_GREEN;
 80003e0:	4b84      	ldr	r3, [pc, #528]	; (80005f4 <fsm_automatic_run+0x248>)
 80003e2:	2202      	movs	r2, #2
 80003e4:	601a      	str	r2, [r3, #0]
		setTimer3(1000);
 80003e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003ea:	f001 f9cb 	bl	8001784 <setTimer3>
		setTimer1(green_time * 1000);
 80003ee:	4b82      	ldr	r3, [pc, #520]	; (80005f8 <fsm_automatic_run+0x24c>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003f6:	fb02 f303 	mul.w	r3, r2, r3
 80003fa:	4618      	mov	r0, r3
 80003fc:	f001 f98a 	bl	8001714 <setTimer1>
		break;
 8000400:	e0f6      	b.n	80005f0 <fsm_automatic_run+0x244>

	case RED_GREEN:
		setRed_1();
 8000402:	f000 fa87 	bl	8000914 <setRed_1>
		setGreen_2();
 8000406:	f000 fadd 	bl	80009c4 <setGreen_2>
		if (timer3_flag == 1){
 800040a:	4b7c      	ldr	r3, [pc, #496]	; (80005fc <fsm_automatic_run+0x250>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d10d      	bne.n	800042e <fsm_automatic_run+0x82>
			red_time_temp--;
 8000412:	4b7b      	ldr	r3, [pc, #492]	; (8000600 <fsm_automatic_run+0x254>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	3b01      	subs	r3, #1
 8000418:	4a79      	ldr	r2, [pc, #484]	; (8000600 <fsm_automatic_run+0x254>)
 800041a:	6013      	str	r3, [r2, #0]
			green_time_temp--;
 800041c:	4b79      	ldr	r3, [pc, #484]	; (8000604 <fsm_automatic_run+0x258>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	3b01      	subs	r3, #1
 8000422:	4a78      	ldr	r2, [pc, #480]	; (8000604 <fsm_automatic_run+0x258>)
 8000424:	6013      	str	r3, [r2, #0]
			setTimer3(1000);
 8000426:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800042a:	f001 f9ab 	bl	8001784 <setTimer3>
		}

		if (timer1_flag == 1){
 800042e:	4b76      	ldr	r3, [pc, #472]	; (8000608 <fsm_automatic_run+0x25c>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	2b01      	cmp	r3, #1
 8000434:	d10f      	bne.n	8000456 <fsm_automatic_run+0xaa>
			status = RED_AMBER;
 8000436:	4b6f      	ldr	r3, [pc, #444]	; (80005f4 <fsm_automatic_run+0x248>)
 8000438:	2203      	movs	r2, #3
 800043a:	601a      	str	r2, [r3, #0]
			green_time_temp = green_time;
 800043c:	4b6e      	ldr	r3, [pc, #440]	; (80005f8 <fsm_automatic_run+0x24c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a70      	ldr	r2, [pc, #448]	; (8000604 <fsm_automatic_run+0x258>)
 8000442:	6013      	str	r3, [r2, #0]
			setTimer1(amber_time * 1000);
 8000444:	4b71      	ldr	r3, [pc, #452]	; (800060c <fsm_automatic_run+0x260>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800044c:	fb02 f303 	mul.w	r3, r2, r3
 8000450:	4618      	mov	r0, r3
 8000452:	f001 f95f 	bl	8001714 <setTimer1>
		}

		if (isButton1Pressed() == 1){
 8000456:	f7ff fe79 	bl	800014c <isButton1Pressed>
 800045a:	4603      	mov	r3, r0
 800045c:	2b01      	cmp	r3, #1
 800045e:	f040 80c0 	bne.w	80005e2 <fsm_automatic_run+0x236>
			setTimeInit();
 8000462:	f000 fa39 	bl	80008d8 <setTimeInit>
			status = MAN_RED;
 8000466:	4b63      	ldr	r3, [pc, #396]	; (80005f4 <fsm_automatic_run+0x248>)
 8000468:	220c      	movs	r2, #12
 800046a:	601a      	str	r2, [r3, #0]
			setTimer1(3000);
 800046c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000470:	f001 f950 	bl	8001714 <setTimer1>
		}
		break;
 8000474:	e0b5      	b.n	80005e2 <fsm_automatic_run+0x236>

	case RED_AMBER:
		setRed_1();
 8000476:	f000 fa4d 	bl	8000914 <setRed_1>
		setYellow_2();
 800047a:	f000 fab9 	bl	80009f0 <setYellow_2>
		if(timer3_flag == 1){
 800047e:	4b5f      	ldr	r3, [pc, #380]	; (80005fc <fsm_automatic_run+0x250>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	2b01      	cmp	r3, #1
 8000484:	d10d      	bne.n	80004a2 <fsm_automatic_run+0xf6>
			red_time_temp--;
 8000486:	4b5e      	ldr	r3, [pc, #376]	; (8000600 <fsm_automatic_run+0x254>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	3b01      	subs	r3, #1
 800048c:	4a5c      	ldr	r2, [pc, #368]	; (8000600 <fsm_automatic_run+0x254>)
 800048e:	6013      	str	r3, [r2, #0]
			amber_time_temp--;
 8000490:	4b5f      	ldr	r3, [pc, #380]	; (8000610 <fsm_automatic_run+0x264>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	3b01      	subs	r3, #1
 8000496:	4a5e      	ldr	r2, [pc, #376]	; (8000610 <fsm_automatic_run+0x264>)
 8000498:	6013      	str	r3, [r2, #0]
			setTimer3(1000);
 800049a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800049e:	f001 f971 	bl	8001784 <setTimer3>
		}

		if (timer1_flag == 1){
 80004a2:	4b59      	ldr	r3, [pc, #356]	; (8000608 <fsm_automatic_run+0x25c>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d113      	bne.n	80004d2 <fsm_automatic_run+0x126>
			status = GREEN_RED;
 80004aa:	4b52      	ldr	r3, [pc, #328]	; (80005f4 <fsm_automatic_run+0x248>)
 80004ac:	2204      	movs	r2, #4
 80004ae:	601a      	str	r2, [r3, #0]
			amber_time_temp = amber_time;
 80004b0:	4b56      	ldr	r3, [pc, #344]	; (800060c <fsm_automatic_run+0x260>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a56      	ldr	r2, [pc, #344]	; (8000610 <fsm_automatic_run+0x264>)
 80004b6:	6013      	str	r3, [r2, #0]
			red_time_temp = red_time;
 80004b8:	4b56      	ldr	r3, [pc, #344]	; (8000614 <fsm_automatic_run+0x268>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a50      	ldr	r2, [pc, #320]	; (8000600 <fsm_automatic_run+0x254>)
 80004be:	6013      	str	r3, [r2, #0]
			setTimer1(green_time * 1000);
 80004c0:	4b4d      	ldr	r3, [pc, #308]	; (80005f8 <fsm_automatic_run+0x24c>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004c8:	fb02 f303 	mul.w	r3, r2, r3
 80004cc:	4618      	mov	r0, r3
 80004ce:	f001 f921 	bl	8001714 <setTimer1>
		}

		if (isButton1Pressed() == 1){
 80004d2:	f7ff fe3b 	bl	800014c <isButton1Pressed>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b01      	cmp	r3, #1
 80004da:	f040 8084 	bne.w	80005e6 <fsm_automatic_run+0x23a>
			setTimeInit();
 80004de:	f000 f9fb 	bl	80008d8 <setTimeInit>
			status = MAN_RED;
 80004e2:	4b44      	ldr	r3, [pc, #272]	; (80005f4 <fsm_automatic_run+0x248>)
 80004e4:	220c      	movs	r2, #12
 80004e6:	601a      	str	r2, [r3, #0]
			setTimer1(10000);
 80004e8:	f242 7010 	movw	r0, #10000	; 0x2710
 80004ec:	f001 f912 	bl	8001714 <setTimer1>
		}
		break;
 80004f0:	e079      	b.n	80005e6 <fsm_automatic_run+0x23a>


	case GREEN_RED:
		setGreen_1();
 80004f2:	f000 fa25 	bl	8000940 <setGreen_1>
		setRed_2();
 80004f6:	f000 fa4f 	bl	8000998 <setRed_2>
		if(timer3_flag == 1){
 80004fa:	4b40      	ldr	r3, [pc, #256]	; (80005fc <fsm_automatic_run+0x250>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d10d      	bne.n	800051e <fsm_automatic_run+0x172>
			red_time_temp--;
 8000502:	4b3f      	ldr	r3, [pc, #252]	; (8000600 <fsm_automatic_run+0x254>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	3b01      	subs	r3, #1
 8000508:	4a3d      	ldr	r2, [pc, #244]	; (8000600 <fsm_automatic_run+0x254>)
 800050a:	6013      	str	r3, [r2, #0]
			green_time_temp--;
 800050c:	4b3d      	ldr	r3, [pc, #244]	; (8000604 <fsm_automatic_run+0x258>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	3b01      	subs	r3, #1
 8000512:	4a3c      	ldr	r2, [pc, #240]	; (8000604 <fsm_automatic_run+0x258>)
 8000514:	6013      	str	r3, [r2, #0]
			setTimer3(1000);
 8000516:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800051a:	f001 f933 	bl	8001784 <setTimer3>
		}
		if (timer1_flag == 1){
 800051e:	4b3a      	ldr	r3, [pc, #232]	; (8000608 <fsm_automatic_run+0x25c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d10f      	bne.n	8000546 <fsm_automatic_run+0x19a>
			status = AMBER_RED;
 8000526:	4b33      	ldr	r3, [pc, #204]	; (80005f4 <fsm_automatic_run+0x248>)
 8000528:	2205      	movs	r2, #5
 800052a:	601a      	str	r2, [r3, #0]
			green_time_temp = green_time;
 800052c:	4b32      	ldr	r3, [pc, #200]	; (80005f8 <fsm_automatic_run+0x24c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a34      	ldr	r2, [pc, #208]	; (8000604 <fsm_automatic_run+0x258>)
 8000532:	6013      	str	r3, [r2, #0]
			setTimer1(amber_time * 1000);
 8000534:	4b35      	ldr	r3, [pc, #212]	; (800060c <fsm_automatic_run+0x260>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800053c:	fb02 f303 	mul.w	r3, r2, r3
 8000540:	4618      	mov	r0, r3
 8000542:	f001 f8e7 	bl	8001714 <setTimer1>
		}

		if (isButton1Pressed() == 1){
 8000546:	f7ff fe01 	bl	800014c <isButton1Pressed>
 800054a:	4603      	mov	r3, r0
 800054c:	2b01      	cmp	r3, #1
 800054e:	d14c      	bne.n	80005ea <fsm_automatic_run+0x23e>
			setTimeInit();
 8000550:	f000 f9c2 	bl	80008d8 <setTimeInit>
			status = MAN_RED;
 8000554:	4b27      	ldr	r3, [pc, #156]	; (80005f4 <fsm_automatic_run+0x248>)
 8000556:	220c      	movs	r2, #12
 8000558:	601a      	str	r2, [r3, #0]
			setTimer1(10000);
 800055a:	f242 7010 	movw	r0, #10000	; 0x2710
 800055e:	f001 f8d9 	bl	8001714 <setTimer1>
		}
		break;
 8000562:	e042      	b.n	80005ea <fsm_automatic_run+0x23e>

	case AMBER_RED:
		setYellow_1();
 8000564:	f000 fa02 	bl	800096c <setYellow_1>
		setRed_2();
 8000568:	f000 fa16 	bl	8000998 <setRed_2>
		if(timer3_flag == 1){
 800056c:	4b23      	ldr	r3, [pc, #140]	; (80005fc <fsm_automatic_run+0x250>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d10d      	bne.n	8000590 <fsm_automatic_run+0x1e4>
			red_time_temp--;
 8000574:	4b22      	ldr	r3, [pc, #136]	; (8000600 <fsm_automatic_run+0x254>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	3b01      	subs	r3, #1
 800057a:	4a21      	ldr	r2, [pc, #132]	; (8000600 <fsm_automatic_run+0x254>)
 800057c:	6013      	str	r3, [r2, #0]
			amber_time_temp--;
 800057e:	4b24      	ldr	r3, [pc, #144]	; (8000610 <fsm_automatic_run+0x264>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	3b01      	subs	r3, #1
 8000584:	4a22      	ldr	r2, [pc, #136]	; (8000610 <fsm_automatic_run+0x264>)
 8000586:	6013      	str	r3, [r2, #0]
			setTimer3(1000);
 8000588:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800058c:	f001 f8fa 	bl	8001784 <setTimer3>
		}
		if (timer1_flag == 1){
 8000590:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <fsm_automatic_run+0x25c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d113      	bne.n	80005c0 <fsm_automatic_run+0x214>
			status = RED_GREEN;
 8000598:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <fsm_automatic_run+0x248>)
 800059a:	2202      	movs	r2, #2
 800059c:	601a      	str	r2, [r3, #0]
			red_time_temp = red_time;
 800059e:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <fsm_automatic_run+0x268>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a17      	ldr	r2, [pc, #92]	; (8000600 <fsm_automatic_run+0x254>)
 80005a4:	6013      	str	r3, [r2, #0]
			amber_time_temp = amber_time;
 80005a6:	4b19      	ldr	r3, [pc, #100]	; (800060c <fsm_automatic_run+0x260>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a19      	ldr	r2, [pc, #100]	; (8000610 <fsm_automatic_run+0x264>)
 80005ac:	6013      	str	r3, [r2, #0]
			setTimer1(green_time * 1000);
 80005ae:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <fsm_automatic_run+0x24c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005b6:	fb02 f303 	mul.w	r3, r2, r3
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 f8aa 	bl	8001714 <setTimer1>
		}

		if (isButton1Pressed() == 1){
 80005c0:	f7ff fdc4 	bl	800014c <isButton1Pressed>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d111      	bne.n	80005ee <fsm_automatic_run+0x242>
			setTimeInit();
 80005ca:	f000 f985 	bl	80008d8 <setTimeInit>
			status = RED_GREEN;
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <fsm_automatic_run+0x248>)
 80005d0:	2202      	movs	r2, #2
 80005d2:	601a      	str	r2, [r3, #0]
			setTimer1(10000);
 80005d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80005d8:	f001 f89c 	bl	8001714 <setTimer1>
		}
		break;
 80005dc:	e007      	b.n	80005ee <fsm_automatic_run+0x242>
	default:
		break;
 80005de:	bf00      	nop
 80005e0:	e006      	b.n	80005f0 <fsm_automatic_run+0x244>
		break;
 80005e2:	bf00      	nop
 80005e4:	e004      	b.n	80005f0 <fsm_automatic_run+0x244>
		break;
 80005e6:	bf00      	nop
 80005e8:	e002      	b.n	80005f0 <fsm_automatic_run+0x244>
		break;
 80005ea:	bf00      	nop
 80005ec:	e000      	b.n	80005f0 <fsm_automatic_run+0x244>
		break;
 80005ee:	bf00      	nop
	}
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	2000003c 	.word	0x2000003c
 80005f8:	20000044 	.word	0x20000044
 80005fc:	200000a4 	.word	0x200000a4
 8000600:	200000b0 	.word	0x200000b0
 8000604:	200000b4 	.word	0x200000b4
 8000608:	20000094 	.word	0x20000094
 800060c:	20000048 	.word	0x20000048
 8000610:	200000b8 	.word	0x200000b8
 8000614:	20000040 	.word	0x20000040

08000618 <fsm_manual_run>:
 *  Created on: Oct 30, 2024
 *      Author: Admin
 */

#include "fsm_manual.h"
void fsm_manual_run(){
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	switch (status){
 800061c:	4b71      	ldr	r3, [pc, #452]	; (80007e4 <fsm_manual_run+0x1cc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b0e      	cmp	r3, #14
 8000622:	f000 808f 	beq.w	8000744 <fsm_manual_run+0x12c>
 8000626:	2b0e      	cmp	r3, #14
 8000628:	f300 80d3 	bgt.w	80007d2 <fsm_manual_run+0x1ba>
 800062c:	2b0c      	cmp	r3, #12
 800062e:	d002      	beq.n	8000636 <fsm_manual_run+0x1e>
 8000630:	2b0d      	cmp	r3, #13
 8000632:	d044      	beq.n	80006be <fsm_manual_run+0xa6>
			status = SET_GREEN;
		}
		break;

	default:
		break;
 8000634:	e0cd      	b.n	80007d2 <fsm_manual_run+0x1ba>
		if (timer_led_flag == 1){
 8000636:	4b6c      	ldr	r3, [pc, #432]	; (80007e8 <fsm_manual_run+0x1d0>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d105      	bne.n	800064a <fsm_manual_run+0x32>
			setToggleRed();
 800063e:	f000 f9ed 	bl	8000a1c <setToggleRed>
			setTimerLed(500);
 8000642:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000646:	f001 f8b9 	bl	80017bc <setTimerLed>
		if (timer1_flag == 1){
 800064a:	4b68      	ldr	r3, [pc, #416]	; (80007ec <fsm_manual_run+0x1d4>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d106      	bne.n	8000660 <fsm_manual_run+0x48>
			status = RED_GREEN;
 8000652:	4b64      	ldr	r3, [pc, #400]	; (80007e4 <fsm_manual_run+0x1cc>)
 8000654:	2202      	movs	r2, #2
 8000656:	601a      	str	r2, [r3, #0]
			setTimer1(10000);
 8000658:	f242 7010 	movw	r0, #10000	; 0x2710
 800065c:	f001 f85a 	bl	8001714 <setTimer1>
		if (isButton1Pressed() == 1){
 8000660:	f7ff fd74 	bl	800014c <isButton1Pressed>
 8000664:	4603      	mov	r3, r0
 8000666:	2b01      	cmp	r3, #1
 8000668:	d10a      	bne.n	8000680 <fsm_manual_run+0x68>
			red_time_temp = red_time;
 800066a:	4b61      	ldr	r3, [pc, #388]	; (80007f0 <fsm_manual_run+0x1d8>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a61      	ldr	r2, [pc, #388]	; (80007f4 <fsm_manual_run+0x1dc>)
 8000670:	6013      	str	r3, [r2, #0]
			status = MAN_AMBER;
 8000672:	4b5c      	ldr	r3, [pc, #368]	; (80007e4 <fsm_manual_run+0x1cc>)
 8000674:	220d      	movs	r2, #13
 8000676:	601a      	str	r2, [r3, #0]
			setTimer1(10000);
 8000678:	f242 7010 	movw	r0, #10000	; 0x2710
 800067c:	f001 f84a 	bl	8001714 <setTimer1>
		if (isButton2Pressed() == 1){
 8000680:	f7ff fd76 	bl	8000170 <isButton2Pressed>
 8000684:	4603      	mov	r3, r0
 8000686:	2b01      	cmp	r3, #1
 8000688:	d10f      	bne.n	80006aa <fsm_manual_run+0x92>
			red_time_temp++;
 800068a:	4b5a      	ldr	r3, [pc, #360]	; (80007f4 <fsm_manual_run+0x1dc>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	3301      	adds	r3, #1
 8000690:	4a58      	ldr	r2, [pc, #352]	; (80007f4 <fsm_manual_run+0x1dc>)
 8000692:	6013      	str	r3, [r2, #0]
			if (red_time_temp > 99) red_time_temp = 0;
 8000694:	4b57      	ldr	r3, [pc, #348]	; (80007f4 <fsm_manual_run+0x1dc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b63      	cmp	r3, #99	; 0x63
 800069a:	dd02      	ble.n	80006a2 <fsm_manual_run+0x8a>
 800069c:	4b55      	ldr	r3, [pc, #340]	; (80007f4 <fsm_manual_run+0x1dc>)
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
			setTimer1(10000);
 80006a2:	f242 7010 	movw	r0, #10000	; 0x2710
 80006a6:	f001 f835 	bl	8001714 <setTimer1>
		if (isButton3Pressed() == 1){
 80006aa:	f7ff fd73 	bl	8000194 <isButton3Pressed>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	f040 8090 	bne.w	80007d6 <fsm_manual_run+0x1be>
			status = SET_RED;
 80006b6:	4b4b      	ldr	r3, [pc, #300]	; (80007e4 <fsm_manual_run+0x1cc>)
 80006b8:	2215      	movs	r2, #21
 80006ba:	601a      	str	r2, [r3, #0]
		break;
 80006bc:	e08b      	b.n	80007d6 <fsm_manual_run+0x1be>
		if (timer_led_flag == 1){
 80006be:	4b4a      	ldr	r3, [pc, #296]	; (80007e8 <fsm_manual_run+0x1d0>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d105      	bne.n	80006d2 <fsm_manual_run+0xba>
			setToggleYellow();
 80006c6:	f000 f9ed 	bl	8000aa4 <setToggleYellow>
			setTimerLed(500);
 80006ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ce:	f001 f875 	bl	80017bc <setTimerLed>
		if (timer1_flag == 1){
 80006d2:	4b46      	ldr	r3, [pc, #280]	; (80007ec <fsm_manual_run+0x1d4>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d106      	bne.n	80006e8 <fsm_manual_run+0xd0>
			status = RED_GREEN;
 80006da:	4b42      	ldr	r3, [pc, #264]	; (80007e4 <fsm_manual_run+0x1cc>)
 80006dc:	2202      	movs	r2, #2
 80006de:	601a      	str	r2, [r3, #0]
			setTimer1(10000);
 80006e0:	f242 7010 	movw	r0, #10000	; 0x2710
 80006e4:	f001 f816 	bl	8001714 <setTimer1>
		if (isButton1Pressed() == 1){
 80006e8:	f7ff fd30 	bl	800014c <isButton1Pressed>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d10a      	bne.n	8000708 <fsm_manual_run+0xf0>
			amber_time_temp = amber_time;
 80006f2:	4b41      	ldr	r3, [pc, #260]	; (80007f8 <fsm_manual_run+0x1e0>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a41      	ldr	r2, [pc, #260]	; (80007fc <fsm_manual_run+0x1e4>)
 80006f8:	6013      	str	r3, [r2, #0]
			status = MAN_GREEN;
 80006fa:	4b3a      	ldr	r3, [pc, #232]	; (80007e4 <fsm_manual_run+0x1cc>)
 80006fc:	220e      	movs	r2, #14
 80006fe:	601a      	str	r2, [r3, #0]
			setTimer1(10000);
 8000700:	f242 7010 	movw	r0, #10000	; 0x2710
 8000704:	f001 f806 	bl	8001714 <setTimer1>
		if (isButton2Pressed() == 1){
 8000708:	f7ff fd32 	bl	8000170 <isButton2Pressed>
 800070c:	4603      	mov	r3, r0
 800070e:	2b01      	cmp	r3, #1
 8000710:	d10f      	bne.n	8000732 <fsm_manual_run+0x11a>
			amber_time_temp++;
 8000712:	4b3a      	ldr	r3, [pc, #232]	; (80007fc <fsm_manual_run+0x1e4>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	3301      	adds	r3, #1
 8000718:	4a38      	ldr	r2, [pc, #224]	; (80007fc <fsm_manual_run+0x1e4>)
 800071a:	6013      	str	r3, [r2, #0]
			if (amber_time_temp > 99) amber_time_temp = 0;
 800071c:	4b37      	ldr	r3, [pc, #220]	; (80007fc <fsm_manual_run+0x1e4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b63      	cmp	r3, #99	; 0x63
 8000722:	dd02      	ble.n	800072a <fsm_manual_run+0x112>
 8000724:	4b35      	ldr	r3, [pc, #212]	; (80007fc <fsm_manual_run+0x1e4>)
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
			setTimer1(10000);
 800072a:	f242 7010 	movw	r0, #10000	; 0x2710
 800072e:	f000 fff1 	bl	8001714 <setTimer1>
		if(isButton3Pressed() == 1){
 8000732:	f7ff fd2f 	bl	8000194 <isButton3Pressed>
 8000736:	4603      	mov	r3, r0
 8000738:	2b01      	cmp	r3, #1
 800073a:	d14e      	bne.n	80007da <fsm_manual_run+0x1c2>
			status = SET_AMBER;
 800073c:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <fsm_manual_run+0x1cc>)
 800073e:	2216      	movs	r2, #22
 8000740:	601a      	str	r2, [r3, #0]
		break;
 8000742:	e04a      	b.n	80007da <fsm_manual_run+0x1c2>
		if (timer_led_flag == 1){
 8000744:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <fsm_manual_run+0x1d0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d105      	bne.n	8000758 <fsm_manual_run+0x140>
			setToggleGreen();
 800074c:	f000 f988 	bl	8000a60 <setToggleGreen>
			setTimerLed(500);
 8000750:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000754:	f001 f832 	bl	80017bc <setTimerLed>
		if (timer1_flag == 1){
 8000758:	4b24      	ldr	r3, [pc, #144]	; (80007ec <fsm_manual_run+0x1d4>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d10a      	bne.n	8000776 <fsm_manual_run+0x15e>
			green_time_temp = green_time;
 8000760:	4b27      	ldr	r3, [pc, #156]	; (8000800 <fsm_manual_run+0x1e8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a27      	ldr	r2, [pc, #156]	; (8000804 <fsm_manual_run+0x1ec>)
 8000766:	6013      	str	r3, [r2, #0]
			status = RED_GREEN;
 8000768:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <fsm_manual_run+0x1cc>)
 800076a:	2202      	movs	r2, #2
 800076c:	601a      	str	r2, [r3, #0]
			setTimer1(10000);
 800076e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000772:	f000 ffcf 	bl	8001714 <setTimer1>
		if (isButton1Pressed() == 1){
 8000776:	f7ff fce9 	bl	800014c <isButton1Pressed>
 800077a:	4603      	mov	r3, r0
 800077c:	2b01      	cmp	r3, #1
 800077e:	d10a      	bne.n	8000796 <fsm_manual_run+0x17e>
			green_time_temp = green_time;
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <fsm_manual_run+0x1e8>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a1f      	ldr	r2, [pc, #124]	; (8000804 <fsm_manual_run+0x1ec>)
 8000786:	6013      	str	r3, [r2, #0]
			status = INIT;
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <fsm_manual_run+0x1cc>)
 800078a:	2201      	movs	r2, #1
 800078c:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 800078e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000792:	f000 ffbf 	bl	8001714 <setTimer1>
		if (isButton2Pressed() == 1){
 8000796:	f7ff fceb 	bl	8000170 <isButton2Pressed>
 800079a:	4603      	mov	r3, r0
 800079c:	2b01      	cmp	r3, #1
 800079e:	d10f      	bne.n	80007c0 <fsm_manual_run+0x1a8>
			green_time_temp++;
 80007a0:	4b18      	ldr	r3, [pc, #96]	; (8000804 <fsm_manual_run+0x1ec>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	3301      	adds	r3, #1
 80007a6:	4a17      	ldr	r2, [pc, #92]	; (8000804 <fsm_manual_run+0x1ec>)
 80007a8:	6013      	str	r3, [r2, #0]
			if (green_time_temp > 99) green_time_temp = 0;
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <fsm_manual_run+0x1ec>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b63      	cmp	r3, #99	; 0x63
 80007b0:	dd02      	ble.n	80007b8 <fsm_manual_run+0x1a0>
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <fsm_manual_run+0x1ec>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
			setTimer1(10000);
 80007b8:	f242 7010 	movw	r0, #10000	; 0x2710
 80007bc:	f000 ffaa 	bl	8001714 <setTimer1>
		if (isButton3Pressed()){
 80007c0:	f7ff fce8 	bl	8000194 <isButton3Pressed>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d009      	beq.n	80007de <fsm_manual_run+0x1c6>
			status = SET_GREEN;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <fsm_manual_run+0x1cc>)
 80007cc:	2217      	movs	r2, #23
 80007ce:	601a      	str	r2, [r3, #0]
		break;
 80007d0:	e005      	b.n	80007de <fsm_manual_run+0x1c6>
		break;
 80007d2:	bf00      	nop
 80007d4:	e004      	b.n	80007e0 <fsm_manual_run+0x1c8>
		break;
 80007d6:	bf00      	nop
 80007d8:	e002      	b.n	80007e0 <fsm_manual_run+0x1c8>
		break;
 80007da:	bf00      	nop
 80007dc:	e000      	b.n	80007e0 <fsm_manual_run+0x1c8>
		break;
 80007de:	bf00      	nop
	}
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	2000003c 	.word	0x2000003c
 80007e8:	200000ac 	.word	0x200000ac
 80007ec:	20000094 	.word	0x20000094
 80007f0:	20000040 	.word	0x20000040
 80007f4:	200000b0 	.word	0x200000b0
 80007f8:	20000048 	.word	0x20000048
 80007fc:	200000b8 	.word	0x200000b8
 8000800:	20000044 	.word	0x20000044
 8000804:	200000b4 	.word	0x200000b4

08000808 <fsm_setting_run>:
 */


#include "fsm_setting.h"

void fsm_setting_run(){
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
//	int diff = 0;
	switch (status) {
 800080c:	4b19      	ldr	r3, [pc, #100]	; (8000874 <fsm_setting_run+0x6c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b17      	cmp	r3, #23
 8000812:	d01e      	beq.n	8000852 <fsm_setting_run+0x4a>
 8000814:	2b17      	cmp	r3, #23
 8000816:	dc28      	bgt.n	800086a <fsm_setting_run+0x62>
 8000818:	2b15      	cmp	r3, #21
 800081a:	d002      	beq.n	8000822 <fsm_setting_run+0x1a>
 800081c:	2b16      	cmp	r3, #22
 800081e:	d00c      	beq.n	800083a <fsm_setting_run+0x32>
//			red_time += diff;
//			red_time_temp += diff;
			status = MAN_GREEN;
			break;
		default:
			break;
 8000820:	e023      	b.n	800086a <fsm_setting_run+0x62>
			red_time = red_time_temp;
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <fsm_setting_run+0x70>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a15      	ldr	r2, [pc, #84]	; (800087c <fsm_setting_run+0x74>)
 8000828:	6013      	str	r3, [r2, #0]
			red_time_temp = red_time;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <fsm_setting_run+0x74>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a12      	ldr	r2, [pc, #72]	; (8000878 <fsm_setting_run+0x70>)
 8000830:	6013      	str	r3, [r2, #0]
			status = MAN_RED;
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <fsm_setting_run+0x6c>)
 8000834:	220c      	movs	r2, #12
 8000836:	601a      	str	r2, [r3, #0]
			break;
 8000838:	e018      	b.n	800086c <fsm_setting_run+0x64>
			amber_time = amber_time_temp;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <fsm_setting_run+0x78>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a11      	ldr	r2, [pc, #68]	; (8000884 <fsm_setting_run+0x7c>)
 8000840:	6013      	str	r3, [r2, #0]
			amber_time_temp = amber_time;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <fsm_setting_run+0x7c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <fsm_setting_run+0x78>)
 8000848:	6013      	str	r3, [r2, #0]
			status = MAN_AMBER;
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <fsm_setting_run+0x6c>)
 800084c:	220d      	movs	r2, #13
 800084e:	601a      	str	r2, [r3, #0]
			break;
 8000850:	e00c      	b.n	800086c <fsm_setting_run+0x64>
			green_time = green_time_temp;
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <fsm_setting_run+0x80>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0d      	ldr	r2, [pc, #52]	; (800088c <fsm_setting_run+0x84>)
 8000858:	6013      	str	r3, [r2, #0]
			green_time_temp = green_time;
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <fsm_setting_run+0x84>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <fsm_setting_run+0x80>)
 8000860:	6013      	str	r3, [r2, #0]
			status = MAN_GREEN;
 8000862:	4b04      	ldr	r3, [pc, #16]	; (8000874 <fsm_setting_run+0x6c>)
 8000864:	220e      	movs	r2, #14
 8000866:	601a      	str	r2, [r3, #0]
			break;
 8000868:	e000      	b.n	800086c <fsm_setting_run+0x64>
			break;
 800086a:	bf00      	nop
	}
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	2000003c 	.word	0x2000003c
 8000878:	200000b0 	.word	0x200000b0
 800087c:	20000040 	.word	0x20000040
 8000880:	200000b8 	.word	0x200000b8
 8000884:	20000048 	.word	0x20000048
 8000888:	200000b4 	.word	0x200000b4
 800088c:	20000044 	.word	0x20000044

08000890 <setLightInit>:
 *      Author: Admin
 */

#include "light_traffic.h"

void setLightInit(){
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	2101      	movs	r1, #1
 8000898:	480e      	ldr	r0, [pc, #56]	; (80008d4 <setLightInit+0x44>)
 800089a:	f001 fbca 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GREEN_GPIO_Port, LED_1_GREEN_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2102      	movs	r1, #2
 80008a2:	480c      	ldr	r0, [pc, #48]	; (80008d4 <setLightInit+0x44>)
 80008a4:	f001 fbc5 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_YELLOW_GPIO_Port, LED_1_YELLOW_Pin, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2104      	movs	r1, #4
 80008ac:	4809      	ldr	r0, [pc, #36]	; (80008d4 <setLightInit+0x44>)
 80008ae:	f001 fbc0 	bl	8002032 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_2_RED_GPIO_Port, LED_2_RED_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2108      	movs	r1, #8
 80008b6:	4807      	ldr	r0, [pc, #28]	; (80008d4 <setLightInit+0x44>)
 80008b8:	f001 fbbb 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	2110      	movs	r1, #16
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <setLightInit+0x44>)
 80008c2:	f001 fbb6 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_YELLOW_GPIO_Port, LED_2_YELLOW_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2120      	movs	r1, #32
 80008ca:	4802      	ldr	r0, [pc, #8]	; (80008d4 <setLightInit+0x44>)
 80008cc:	f001 fbb1 	bl	8002032 <HAL_GPIO_WritePin>
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40010c00 	.word	0x40010c00

080008d8 <setTimeInit>:

void setTimeInit(){
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
	red_time_temp = red_time;
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <setTimeInit+0x24>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a07      	ldr	r2, [pc, #28]	; (8000900 <setTimeInit+0x28>)
 80008e2:	6013      	str	r3, [r2, #0]
	green_time_temp = green_time;
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <setTimeInit+0x2c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a07      	ldr	r2, [pc, #28]	; (8000908 <setTimeInit+0x30>)
 80008ea:	6013      	str	r3, [r2, #0]
	amber_time_temp = amber_time;
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <setTimeInit+0x34>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a07      	ldr	r2, [pc, #28]	; (8000910 <setTimeInit+0x38>)
 80008f2:	6013      	str	r3, [r2, #0]
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	20000040 	.word	0x20000040
 8000900:	200000b0 	.word	0x200000b0
 8000904:	20000044 	.word	0x20000044
 8000908:	200000b4 	.word	0x200000b4
 800090c:	20000048 	.word	0x20000048
 8000910:	200000b8 	.word	0x200000b8

08000914 <setRed_1>:
//	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
//}

void setRed_1(){
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	2101      	movs	r1, #1
 800091c:	4807      	ldr	r0, [pc, #28]	; (800093c <setRed_1+0x28>)
 800091e:	f001 fb88 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GREEN_GPIO_Port, LED_1_GREEN_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2102      	movs	r1, #2
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <setRed_1+0x28>)
 8000928:	f001 fb83 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_YELLOW_GPIO_Port, LED_1_YELLOW_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	2104      	movs	r1, #4
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <setRed_1+0x28>)
 8000932:	f001 fb7e 	bl	8002032 <HAL_GPIO_WritePin>
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40010c00 	.word	0x40010c00

08000940 <setGreen_1>:

void setGreen_1(){
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, GPIO_PIN_RESET);;
 8000944:	2200      	movs	r2, #0
 8000946:	2101      	movs	r1, #1
 8000948:	4807      	ldr	r0, [pc, #28]	; (8000968 <setGreen_1+0x28>)
 800094a:	f001 fb72 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GREEN_GPIO_Port, LED_1_GREEN_Pin, GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	2102      	movs	r1, #2
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <setGreen_1+0x28>)
 8000954:	f001 fb6d 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_YELLOW_GPIO_Port, LED_1_YELLOW_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2104      	movs	r1, #4
 800095c:	4802      	ldr	r0, [pc, #8]	; (8000968 <setGreen_1+0x28>)
 800095e:	f001 fb68 	bl	8002032 <HAL_GPIO_WritePin>
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40010c00 	.word	0x40010c00

0800096c <setYellow_1>:

void setYellow_1(){
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	2101      	movs	r1, #1
 8000974:	4807      	ldr	r0, [pc, #28]	; (8000994 <setYellow_1+0x28>)
 8000976:	f001 fb5c 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GREEN_GPIO_Port, LED_1_GREEN_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2102      	movs	r1, #2
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <setYellow_1+0x28>)
 8000980:	f001 fb57 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_YELLOW_GPIO_Port, LED_1_YELLOW_Pin, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	2104      	movs	r1, #4
 8000988:	4802      	ldr	r0, [pc, #8]	; (8000994 <setYellow_1+0x28>)
 800098a:	f001 fb52 	bl	8002032 <HAL_GPIO_WritePin>
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40010c00 	.word	0x40010c00

08000998 <setRed_2>:


void setRed_2(){
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_2_RED_GPIO_Port, LED_2_RED_Pin, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2108      	movs	r1, #8
 80009a0:	4807      	ldr	r0, [pc, #28]	; (80009c0 <setRed_2+0x28>)
 80009a2:	f001 fb46 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2110      	movs	r1, #16
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <setRed_2+0x28>)
 80009ac:	f001 fb41 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_YELLOW_GPIO_Port, LED_2_YELLOW_Pin, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2120      	movs	r1, #32
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <setRed_2+0x28>)
 80009b6:	f001 fb3c 	bl	8002032 <HAL_GPIO_WritePin>
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40010c00 	.word	0x40010c00

080009c4 <setGreen_2>:

void setGreen_2(){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_2_RED_GPIO_Port, LED_2_RED_Pin, GPIO_PIN_RESET);;
 80009c8:	2200      	movs	r2, #0
 80009ca:	2108      	movs	r1, #8
 80009cc:	4807      	ldr	r0, [pc, #28]	; (80009ec <setGreen_2+0x28>)
 80009ce:	f001 fb30 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, GPIO_PIN_SET);
 80009d2:	2201      	movs	r2, #1
 80009d4:	2110      	movs	r1, #16
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <setGreen_2+0x28>)
 80009d8:	f001 fb2b 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_YELLOW_GPIO_Port, LED_2_YELLOW_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2120      	movs	r1, #32
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <setGreen_2+0x28>)
 80009e2:	f001 fb26 	bl	8002032 <HAL_GPIO_WritePin>
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40010c00 	.word	0x40010c00

080009f0 <setYellow_2>:

void setYellow_2(){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_2_RED_GPIO_Port, LED_2_RED_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2108      	movs	r1, #8
 80009f8:	4807      	ldr	r0, [pc, #28]	; (8000a18 <setYellow_2+0x28>)
 80009fa:	f001 fb1a 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2110      	movs	r1, #16
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <setYellow_2+0x28>)
 8000a04:	f001 fb15 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_YELLOW_GPIO_Port, LED_2_YELLOW_Pin, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2120      	movs	r1, #32
 8000a0c:	4802      	ldr	r0, [pc, #8]	; (8000a18 <setYellow_2+0x28>)
 8000a0e:	f001 fb10 	bl	8002032 <HAL_GPIO_WritePin>
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40010c00 	.word	0x40010c00

08000a1c <setToggleRed>:

void setToggleRed(){//2HZ
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_1_GREEN_GPIO_Port, LED_1_GREEN_Pin, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2102      	movs	r1, #2
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <setToggleRed+0x40>)
 8000a26:	f001 fb04 	bl	8002032 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_1_YELLOW_GPIO_Port, LED_1_YELLOW_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	480b      	ldr	r0, [pc, #44]	; (8000a5c <setToggleRed+0x40>)
 8000a30:	f001 faff 	bl	8002032 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2110      	movs	r1, #16
 8000a38:	4808      	ldr	r0, [pc, #32]	; (8000a5c <setToggleRed+0x40>)
 8000a3a:	f001 fafa 	bl	8002032 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_YELLOW_GPIO_Port, LED_2_YELLOW_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2120      	movs	r1, #32
 8000a42:	4806      	ldr	r0, [pc, #24]	; (8000a5c <setToggleRed+0x40>)
 8000a44:	f001 faf5 	bl	8002032 <HAL_GPIO_WritePin>

    // Toggle only the red LEDs on both sets
    HAL_GPIO_TogglePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin);
 8000a48:	2101      	movs	r1, #1
 8000a4a:	4804      	ldr	r0, [pc, #16]	; (8000a5c <setToggleRed+0x40>)
 8000a4c:	f001 fb09 	bl	8002062 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(LED_2_RED_GPIO_Port, LED_2_RED_Pin);
 8000a50:	2108      	movs	r1, #8
 8000a52:	4802      	ldr	r0, [pc, #8]	; (8000a5c <setToggleRed+0x40>)
 8000a54:	f001 fb05 	bl	8002062 <HAL_GPIO_TogglePin>

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40010c00 	.word	0x40010c00

08000a60 <setToggleGreen>:

void setToggleGreen(){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2101      	movs	r1, #1
 8000a68:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <setToggleGreen+0x40>)
 8000a6a:	f001 fae2 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED_1_GREEN_GPIO_Port, LED_1_GREEN_Pin);
 8000a6e:	2102      	movs	r1, #2
 8000a70:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <setToggleGreen+0x40>)
 8000a72:	f001 faf6 	bl	8002062 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_1_YELLOW_GPIO_Port, LED_1_YELLOW_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2104      	movs	r1, #4
 8000a7a:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <setToggleGreen+0x40>)
 8000a7c:	f001 fad9 	bl	8002032 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_2_RED_GPIO_Port, LED_2_RED_Pin, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2108      	movs	r1, #8
 8000a84:	4806      	ldr	r0, [pc, #24]	; (8000aa0 <setToggleGreen+0x40>)
 8000a86:	f001 fad4 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin);
 8000a8a:	2110      	movs	r1, #16
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <setToggleGreen+0x40>)
 8000a8e:	f001 fae8 	bl	8002062 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_2_YELLOW_GPIO_Port, LED_2_YELLOW_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2120      	movs	r1, #32
 8000a96:	4802      	ldr	r0, [pc, #8]	; (8000aa0 <setToggleGreen+0x40>)
 8000a98:	f001 facb 	bl	8002032 <HAL_GPIO_WritePin>
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40010c00 	.word	0x40010c00

08000aa4 <setToggleYellow>:

void setToggleYellow(){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2101      	movs	r1, #1
 8000aac:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <setToggleYellow+0x40>)
 8000aae:	f001 fac0 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GREEN_GPIO_Port, LED_1_GREEN_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <setToggleYellow+0x40>)
 8000ab8:	f001 fabb 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED_1_YELLOW_GPIO_Port, LED_1_YELLOW_Pin);
 8000abc:	2104      	movs	r1, #4
 8000abe:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <setToggleYellow+0x40>)
 8000ac0:	f001 facf 	bl	8002062 <HAL_GPIO_TogglePin>

	HAL_GPIO_WritePin(LED_2_RED_GPIO_Port, LED_2_RED_Pin, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2108      	movs	r1, #8
 8000ac8:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <setToggleYellow+0x40>)
 8000aca:	f001 fab2 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2110      	movs	r1, #16
 8000ad2:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <setToggleYellow+0x40>)
 8000ad4:	f001 faad 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED_2_YELLOW_GPIO_Port, LED_2_YELLOW_Pin);
 8000ad8:	2120      	movs	r1, #32
 8000ada:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <setToggleYellow+0x40>)
 8000adc:	f001 fac1 	bl	8002062 <HAL_GPIO_TogglePin>
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40010c00 	.word	0x40010c00

08000ae8 <get7SEG1Value>:

static int get7SEG1Value() {
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
	switch (status) {
 8000aec:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <get7SEG1Value+0x80>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	3b02      	subs	r3, #2
 8000af2:	2b0c      	cmp	r3, #12
 8000af4:	d831      	bhi.n	8000b5a <get7SEG1Value+0x72>
 8000af6:	a201      	add	r2, pc, #4	; (adr r2, 8000afc <get7SEG1Value+0x14>)
 8000af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000afc:	08000b31 	.word	0x08000b31
 8000b00:	08000b37 	.word	0x08000b37
 8000b04:	08000b3d 	.word	0x08000b3d
 8000b08:	08000b43 	.word	0x08000b43
 8000b0c:	08000b5b 	.word	0x08000b5b
 8000b10:	08000b5b 	.word	0x08000b5b
 8000b14:	08000b5b 	.word	0x08000b5b
 8000b18:	08000b5b 	.word	0x08000b5b
 8000b1c:	08000b5b 	.word	0x08000b5b
 8000b20:	08000b5b 	.word	0x08000b5b
 8000b24:	08000b49 	.word	0x08000b49
 8000b28:	08000b55 	.word	0x08000b55
 8000b2c:	08000b4f 	.word	0x08000b4f
		case RED_GREEN:
			return red_time_temp;
 8000b30:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <get7SEG1Value+0x84>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	e013      	b.n	8000b5e <get7SEG1Value+0x76>
		case RED_AMBER:
			return red_time_temp;
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <get7SEG1Value+0x84>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	e010      	b.n	8000b5e <get7SEG1Value+0x76>
		case GREEN_RED:
			return green_time_temp;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <get7SEG1Value+0x88>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	e00d      	b.n	8000b5e <get7SEG1Value+0x76>
		case AMBER_RED:
			return amber_time_temp;
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <get7SEG1Value+0x8c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	e00a      	b.n	8000b5e <get7SEG1Value+0x76>
		case MAN_RED:
			return red_time_temp;
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <get7SEG1Value+0x84>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	e007      	b.n	8000b5e <get7SEG1Value+0x76>
		case MAN_GREEN:
			return green_time_temp;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <get7SEG1Value+0x88>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	e004      	b.n	8000b5e <get7SEG1Value+0x76>
		case MAN_AMBER:
			return amber_time_temp;
 8000b54:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <get7SEG1Value+0x8c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	e001      	b.n	8000b5e <get7SEG1Value+0x76>
		default:
			break;
 8000b5a:	bf00      	nop
	}
	return 0;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	2000003c 	.word	0x2000003c
 8000b6c:	200000b0 	.word	0x200000b0
 8000b70:	200000b4 	.word	0x200000b4
 8000b74:	200000b8 	.word	0x200000b8

08000b78 <get7SEG2Value>:
static int get7SEG2Value() {
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
	switch (status) {
 8000b7c:	4b1e      	ldr	r3, [pc, #120]	; (8000bf8 <get7SEG2Value+0x80>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	3b02      	subs	r3, #2
 8000b82:	2b0c      	cmp	r3, #12
 8000b84:	d831      	bhi.n	8000bea <get7SEG2Value+0x72>
 8000b86:	a201      	add	r2, pc, #4	; (adr r2, 8000b8c <get7SEG2Value+0x14>)
 8000b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8c:	08000bc1 	.word	0x08000bc1
 8000b90:	08000bc7 	.word	0x08000bc7
 8000b94:	08000bcd 	.word	0x08000bcd
 8000b98:	08000bd3 	.word	0x08000bd3
 8000b9c:	08000beb 	.word	0x08000beb
 8000ba0:	08000beb 	.word	0x08000beb
 8000ba4:	08000beb 	.word	0x08000beb
 8000ba8:	08000beb 	.word	0x08000beb
 8000bac:	08000beb 	.word	0x08000beb
 8000bb0:	08000beb 	.word	0x08000beb
 8000bb4:	08000bd9 	.word	0x08000bd9
 8000bb8:	08000be5 	.word	0x08000be5
 8000bbc:	08000bdf 	.word	0x08000bdf
		case RED_GREEN:
			return green_time_temp;
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <get7SEG2Value+0x84>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	e013      	b.n	8000bee <get7SEG2Value+0x76>
		case RED_AMBER:
			return amber_time_temp;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <get7SEG2Value+0x88>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	e010      	b.n	8000bee <get7SEG2Value+0x76>
		case GREEN_RED:
			return red_time_temp;
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <get7SEG2Value+0x8c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	e00d      	b.n	8000bee <get7SEG2Value+0x76>
		case AMBER_RED:
			return red_time_temp;
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <get7SEG2Value+0x8c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	e00a      	b.n	8000bee <get7SEG2Value+0x76>
		case MAN_RED:
			return red_time_temp;
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <get7SEG2Value+0x8c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	e007      	b.n	8000bee <get7SEG2Value+0x76>
		case MAN_GREEN:
			return green_time_temp;
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <get7SEG2Value+0x84>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	e004      	b.n	8000bee <get7SEG2Value+0x76>
		case MAN_AMBER:
			return amber_time_temp;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <get7SEG2Value+0x88>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	e001      	b.n	8000bee <get7SEG2Value+0x76>
		default:
			break;
 8000bea:	bf00      	nop
	}
	return 0;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	2000003c 	.word	0x2000003c
 8000bfc:	200000b4 	.word	0x200000b4
 8000c00:	200000b8 	.word	0x200000b8
 8000c04:	200000b0 	.word	0x200000b0

08000c08 <display7SEG>:

void display7SEG(int num){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b09      	cmp	r3, #9
 8000c14:	f200 81c8 	bhi.w	8000fa8 <display7SEG+0x3a0>
 8000c18:	a201      	add	r2, pc, #4	; (adr r2, 8000c20 <display7SEG+0x18>)
 8000c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1e:	bf00      	nop
 8000c20:	08000c49 	.word	0x08000c49
 8000c24:	08000c9f 	.word	0x08000c9f
 8000c28:	08000cf5 	.word	0x08000cf5
 8000c2c:	08000d4b 	.word	0x08000d4b
 8000c30:	08000da1 	.word	0x08000da1
 8000c34:	08000df7 	.word	0x08000df7
 8000c38:	08000e4d 	.word	0x08000e4d
 8000c3c:	08000ea3 	.word	0x08000ea3
 8000c40:	08000ef9 	.word	0x08000ef9
 8000c44:	08000f4f 	.word	0x08000f4f
	switch(num){
	case 0:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c4e:	48d5      	ldr	r0, [pc, #852]	; (8000fa4 <display7SEG+0x39c>)
 8000c50:	f001 f9ef 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c5a:	48d2      	ldr	r0, [pc, #840]	; (8000fa4 <display7SEG+0x39c>)
 8000c5c:	f001 f9e9 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c66:	48cf      	ldr	r0, [pc, #828]	; (8000fa4 <display7SEG+0x39c>)
 8000c68:	f001 f9e3 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c72:	48cc      	ldr	r0, [pc, #816]	; (8000fa4 <display7SEG+0x39c>)
 8000c74:	f001 f9dd 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c7e:	48c9      	ldr	r0, [pc, #804]	; (8000fa4 <display7SEG+0x39c>)
 8000c80:	f001 f9d7 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c8a:	48c6      	ldr	r0, [pc, #792]	; (8000fa4 <display7SEG+0x39c>)
 8000c8c:	f001 f9d1 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c96:	48c3      	ldr	r0, [pc, #780]	; (8000fa4 <display7SEG+0x39c>)
 8000c98:	f001 f9cb 	bl	8002032 <HAL_GPIO_WritePin>
		break;
 8000c9c:	e185      	b.n	8000faa <display7SEG+0x3a2>
	case 1:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, SET);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca4:	48bf      	ldr	r0, [pc, #764]	; (8000fa4 <display7SEG+0x39c>)
 8000ca6:	f001 f9c4 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cb0:	48bc      	ldr	r0, [pc, #752]	; (8000fa4 <display7SEG+0x39c>)
 8000cb2:	f001 f9be 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cbc:	48b9      	ldr	r0, [pc, #740]	; (8000fa4 <display7SEG+0x39c>)
 8000cbe:	f001 f9b8 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cc8:	48b6      	ldr	r0, [pc, #728]	; (8000fa4 <display7SEG+0x39c>)
 8000cca:	f001 f9b2 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd4:	48b3      	ldr	r0, [pc, #716]	; (8000fa4 <display7SEG+0x39c>)
 8000cd6:	f001 f9ac 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ce0:	48b0      	ldr	r0, [pc, #704]	; (8000fa4 <display7SEG+0x39c>)
 8000ce2:	f001 f9a6 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cec:	48ad      	ldr	r0, [pc, #692]	; (8000fa4 <display7SEG+0x39c>)
 8000cee:	f001 f9a0 	bl	8002032 <HAL_GPIO_WritePin>
		break;
 8000cf2:	e15a      	b.n	8000faa <display7SEG+0x3a2>
	case 2:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cfa:	48aa      	ldr	r0, [pc, #680]	; (8000fa4 <display7SEG+0x39c>)
 8000cfc:	f001 f999 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d06:	48a7      	ldr	r0, [pc, #668]	; (8000fa4 <display7SEG+0x39c>)
 8000d08:	f001 f993 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d12:	48a4      	ldr	r0, [pc, #656]	; (8000fa4 <display7SEG+0x39c>)
 8000d14:	f001 f98d 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d1e:	48a1      	ldr	r0, [pc, #644]	; (8000fa4 <display7SEG+0x39c>)
 8000d20:	f001 f987 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d2a:	489e      	ldr	r0, [pc, #632]	; (8000fa4 <display7SEG+0x39c>)
 8000d2c:	f001 f981 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d36:	489b      	ldr	r0, [pc, #620]	; (8000fa4 <display7SEG+0x39c>)
 8000d38:	f001 f97b 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d42:	4898      	ldr	r0, [pc, #608]	; (8000fa4 <display7SEG+0x39c>)
 8000d44:	f001 f975 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 8000d48:	e12f      	b.n	8000faa <display7SEG+0x3a2>
	case 3:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d50:	4894      	ldr	r0, [pc, #592]	; (8000fa4 <display7SEG+0x39c>)
 8000d52:	f001 f96e 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d5c:	4891      	ldr	r0, [pc, #580]	; (8000fa4 <display7SEG+0x39c>)
 8000d5e:	f001 f968 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d68:	488e      	ldr	r0, [pc, #568]	; (8000fa4 <display7SEG+0x39c>)
 8000d6a:	f001 f962 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d74:	488b      	ldr	r0, [pc, #556]	; (8000fa4 <display7SEG+0x39c>)
 8000d76:	f001 f95c 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d80:	4888      	ldr	r0, [pc, #544]	; (8000fa4 <display7SEG+0x39c>)
 8000d82:	f001 f956 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000d86:	2201      	movs	r2, #1
 8000d88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d8c:	4885      	ldr	r0, [pc, #532]	; (8000fa4 <display7SEG+0x39c>)
 8000d8e:	f001 f950 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d98:	4882      	ldr	r0, [pc, #520]	; (8000fa4 <display7SEG+0x39c>)
 8000d9a:	f001 f94a 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 8000d9e:	e104      	b.n	8000faa <display7SEG+0x3a2>
	case 4:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000da6:	487f      	ldr	r0, [pc, #508]	; (8000fa4 <display7SEG+0x39c>)
 8000da8:	f001 f943 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000db2:	487c      	ldr	r0, [pc, #496]	; (8000fa4 <display7SEG+0x39c>)
 8000db4:	f001 f93d 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dbe:	4879      	ldr	r0, [pc, #484]	; (8000fa4 <display7SEG+0x39c>)
 8000dc0:	f001 f937 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dca:	4876      	ldr	r0, [pc, #472]	; (8000fa4 <display7SEG+0x39c>)
 8000dcc:	f001 f931 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd6:	4873      	ldr	r0, [pc, #460]	; (8000fa4 <display7SEG+0x39c>)
 8000dd8:	f001 f92b 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000de2:	4870      	ldr	r0, [pc, #448]	; (8000fa4 <display7SEG+0x39c>)
 8000de4:	f001 f925 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dee:	486d      	ldr	r0, [pc, #436]	; (8000fa4 <display7SEG+0x39c>)
 8000df0:	f001 f91f 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 8000df4:	e0d9      	b.n	8000faa <display7SEG+0x3a2>
	case 5:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dfc:	4869      	ldr	r0, [pc, #420]	; (8000fa4 <display7SEG+0x39c>)
 8000dfe:	f001 f918 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e08:	4866      	ldr	r0, [pc, #408]	; (8000fa4 <display7SEG+0x39c>)
 8000e0a:	f001 f912 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e14:	4863      	ldr	r0, [pc, #396]	; (8000fa4 <display7SEG+0x39c>)
 8000e16:	f001 f90c 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e20:	4860      	ldr	r0, [pc, #384]	; (8000fa4 <display7SEG+0x39c>)
 8000e22:	f001 f906 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000e26:	2201      	movs	r2, #1
 8000e28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e2c:	485d      	ldr	r0, [pc, #372]	; (8000fa4 <display7SEG+0x39c>)
 8000e2e:	f001 f900 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e38:	485a      	ldr	r0, [pc, #360]	; (8000fa4 <display7SEG+0x39c>)
 8000e3a:	f001 f8fa 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e44:	4857      	ldr	r0, [pc, #348]	; (8000fa4 <display7SEG+0x39c>)
 8000e46:	f001 f8f4 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 8000e4a:	e0ae      	b.n	8000faa <display7SEG+0x3a2>
	case 6:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e52:	4854      	ldr	r0, [pc, #336]	; (8000fa4 <display7SEG+0x39c>)
 8000e54:	f001 f8ed 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e5e:	4851      	ldr	r0, [pc, #324]	; (8000fa4 <display7SEG+0x39c>)
 8000e60:	f001 f8e7 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e6a:	484e      	ldr	r0, [pc, #312]	; (8000fa4 <display7SEG+0x39c>)
 8000e6c:	f001 f8e1 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e76:	484b      	ldr	r0, [pc, #300]	; (8000fa4 <display7SEG+0x39c>)
 8000e78:	f001 f8db 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e82:	4848      	ldr	r0, [pc, #288]	; (8000fa4 <display7SEG+0x39c>)
 8000e84:	f001 f8d5 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e8e:	4845      	ldr	r0, [pc, #276]	; (8000fa4 <display7SEG+0x39c>)
 8000e90:	f001 f8cf 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e9a:	4842      	ldr	r0, [pc, #264]	; (8000fa4 <display7SEG+0x39c>)
 8000e9c:	f001 f8c9 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 8000ea0:	e083      	b.n	8000faa <display7SEG+0x3a2>
	case 7:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea8:	483e      	ldr	r0, [pc, #248]	; (8000fa4 <display7SEG+0x39c>)
 8000eaa:	f001 f8c2 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb4:	483b      	ldr	r0, [pc, #236]	; (8000fa4 <display7SEG+0x39c>)
 8000eb6:	f001 f8bc 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ec0:	4838      	ldr	r0, [pc, #224]	; (8000fa4 <display7SEG+0x39c>)
 8000ec2:	f001 f8b6 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ecc:	4835      	ldr	r0, [pc, #212]	; (8000fa4 <display7SEG+0x39c>)
 8000ece:	f001 f8b0 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed8:	4832      	ldr	r0, [pc, #200]	; (8000fa4 <display7SEG+0x39c>)
 8000eda:	f001 f8aa 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ee4:	482f      	ldr	r0, [pc, #188]	; (8000fa4 <display7SEG+0x39c>)
 8000ee6:	f001 f8a4 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ef0:	482c      	ldr	r0, [pc, #176]	; (8000fa4 <display7SEG+0x39c>)
 8000ef2:	f001 f89e 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 8000ef6:	e058      	b.n	8000faa <display7SEG+0x3a2>
	case 8:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000efe:	4829      	ldr	r0, [pc, #164]	; (8000fa4 <display7SEG+0x39c>)
 8000f00:	f001 f897 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f0a:	4826      	ldr	r0, [pc, #152]	; (8000fa4 <display7SEG+0x39c>)
 8000f0c:	f001 f891 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f16:	4823      	ldr	r0, [pc, #140]	; (8000fa4 <display7SEG+0x39c>)
 8000f18:	f001 f88b 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f22:	4820      	ldr	r0, [pc, #128]	; (8000fa4 <display7SEG+0x39c>)
 8000f24:	f001 f885 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f2e:	481d      	ldr	r0, [pc, #116]	; (8000fa4 <display7SEG+0x39c>)
 8000f30:	f001 f87f 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f3a:	481a      	ldr	r0, [pc, #104]	; (8000fa4 <display7SEG+0x39c>)
 8000f3c:	f001 f879 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f46:	4817      	ldr	r0, [pc, #92]	; (8000fa4 <display7SEG+0x39c>)
 8000f48:	f001 f873 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 8000f4c:	e02d      	b.n	8000faa <display7SEG+0x3a2>
	case 9:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f54:	4813      	ldr	r0, [pc, #76]	; (8000fa4 <display7SEG+0x39c>)
 8000f56:	f001 f86c 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f60:	4810      	ldr	r0, [pc, #64]	; (8000fa4 <display7SEG+0x39c>)
 8000f62:	f001 f866 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f6c:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <display7SEG+0x39c>)
 8000f6e:	f001 f860 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f78:	480a      	ldr	r0, [pc, #40]	; (8000fa4 <display7SEG+0x39c>)
 8000f7a:	f001 f85a 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f84:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <display7SEG+0x39c>)
 8000f86:	f001 f854 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <display7SEG+0x39c>)
 8000f92:	f001 f84e 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f9c:	4801      	ldr	r0, [pc, #4]	; (8000fa4 <display7SEG+0x39c>)
 8000f9e:	f001 f848 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 8000fa2:	e002      	b.n	8000faa <display7SEG+0x3a2>
 8000fa4:	40010800 	.word	0x40010800
	default:
			break;
 8000fa8:	bf00      	nop
	}
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop

08000fb4 <currentMode>:


int currentMode(){
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
	if(status == RED_AMBER || status == RED_GREEN || status == GREEN_RED || status == AMBER_RED){
 8000fb8:	4b16      	ldr	r3, [pc, #88]	; (8001014 <currentMode+0x60>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d00b      	beq.n	8000fd8 <currentMode+0x24>
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <currentMode+0x60>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d007      	beq.n	8000fd8 <currentMode+0x24>
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <currentMode+0x60>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b04      	cmp	r3, #4
 8000fce:	d003      	beq.n	8000fd8 <currentMode+0x24>
 8000fd0:	4b10      	ldr	r3, [pc, #64]	; (8001014 <currentMode+0x60>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b05      	cmp	r3, #5
 8000fd6:	d103      	bne.n	8000fe0 <currentMode+0x2c>
		mode = 1;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <currentMode+0x64>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	e012      	b.n	8001006 <currentMode+0x52>
	} else if (status == MAN_RED){
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <currentMode+0x60>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b0c      	cmp	r3, #12
 8000fe6:	d103      	bne.n	8000ff0 <currentMode+0x3c>
		mode = 2;
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <currentMode+0x64>)
 8000fea:	2202      	movs	r2, #2
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	e00a      	b.n	8001006 <currentMode+0x52>
	} else if (status == MAN_AMBER){
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <currentMode+0x60>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b0d      	cmp	r3, #13
 8000ff6:	d103      	bne.n	8001000 <currentMode+0x4c>
		mode = 3;
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <currentMode+0x64>)
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	e002      	b.n	8001006 <currentMode+0x52>
	} else {
		mode = 4;
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <currentMode+0x64>)
 8001002:	2204      	movs	r2, #4
 8001004:	601a      	str	r2, [r3, #0]
	}

	return mode;
 8001006:	4b04      	ldr	r3, [pc, #16]	; (8001018 <currentMode+0x64>)
 8001008:	681b      	ldr	r3, [r3, #0]
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	2000003c 	.word	0x2000003c
 8001018:	2000004c 	.word	0x2000004c

0800101c <dispMode>:

void dispMode(int mode){
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	currentMode();
 8001024:	f7ff ffc6 	bl	8000fb4 <currentMode>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	2b03      	cmp	r3, #3
 800102e:	f200 80af 	bhi.w	8001190 <dispMode+0x174>
 8001032:	a201      	add	r2, pc, #4	; (adr r2, 8001038 <dispMode+0x1c>)
 8001034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001038:	08001049 	.word	0x08001049
 800103c:	0800109b 	.word	0x0800109b
 8001040:	080010ed 	.word	0x080010ed
 8001044:	0800113f 	.word	0x0800113f
	switch (mode){
	case 1:
			HAL_GPIO_WritePin(SEG_00_GPIO_Port, SEG_00_Pin, SET);
 8001048:	2201      	movs	r2, #1
 800104a:	2140      	movs	r1, #64	; 0x40
 800104c:	4853      	ldr	r0, [pc, #332]	; (800119c <dispMode+0x180>)
 800104e:	f000 fff0 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_01_GPIO_Port, SEG_01_Pin, RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2180      	movs	r1, #128	; 0x80
 8001056:	4851      	ldr	r0, [pc, #324]	; (800119c <dispMode+0x180>)
 8001058:	f000 ffeb 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_02_GPIO_Port, SEG_02_Pin, RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001062:	484e      	ldr	r0, [pc, #312]	; (800119c <dispMode+0x180>)
 8001064:	f000 ffe5 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_03_GPIO_Port, SEG_03_Pin, SET);
 8001068:	2201      	movs	r2, #1
 800106a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800106e:	484b      	ldr	r0, [pc, #300]	; (800119c <dispMode+0x180>)
 8001070:	f000 ffdf 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_04_GPIO_Port, SEG_04_Pin, SET);
 8001074:	2201      	movs	r2, #1
 8001076:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107a:	4848      	ldr	r0, [pc, #288]	; (800119c <dispMode+0x180>)
 800107c:	f000 ffd9 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_05_GPIO_Port, SEG_05_Pin, SET);
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001086:	4845      	ldr	r0, [pc, #276]	; (800119c <dispMode+0x180>)
 8001088:	f000 ffd3 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_06_GPIO_Port, SEG_06_Pin, SET);
 800108c:	2201      	movs	r2, #1
 800108e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001092:	4842      	ldr	r0, [pc, #264]	; (800119c <dispMode+0x180>)
 8001094:	f000 ffcd 	bl	8002032 <HAL_GPIO_WritePin>
			break;
 8001098:	e07b      	b.n	8001192 <dispMode+0x176>
		case 2:
			HAL_GPIO_WritePin(SEG_00_GPIO_Port, SEG_00_Pin, RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2140      	movs	r1, #64	; 0x40
 800109e:	483f      	ldr	r0, [pc, #252]	; (800119c <dispMode+0x180>)
 80010a0:	f000 ffc7 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_01_GPIO_Port, SEG_01_Pin, RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2180      	movs	r1, #128	; 0x80
 80010a8:	483c      	ldr	r0, [pc, #240]	; (800119c <dispMode+0x180>)
 80010aa:	f000 ffc2 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_02_GPIO_Port, SEG_02_Pin, SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b4:	4839      	ldr	r0, [pc, #228]	; (800119c <dispMode+0x180>)
 80010b6:	f000 ffbc 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_03_GPIO_Port, SEG_03_Pin, RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c0:	4836      	ldr	r0, [pc, #216]	; (800119c <dispMode+0x180>)
 80010c2:	f000 ffb6 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_04_GPIO_Port, SEG_04_Pin, RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010cc:	4833      	ldr	r0, [pc, #204]	; (800119c <dispMode+0x180>)
 80010ce:	f000 ffb0 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_05_GPIO_Port, SEG_05_Pin, SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010d8:	4830      	ldr	r0, [pc, #192]	; (800119c <dispMode+0x180>)
 80010da:	f000 ffaa 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_06_GPIO_Port, SEG_06_Pin, RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010e4:	482d      	ldr	r0, [pc, #180]	; (800119c <dispMode+0x180>)
 80010e6:	f000 ffa4 	bl	8002032 <HAL_GPIO_WritePin>
				break;
 80010ea:	e052      	b.n	8001192 <dispMode+0x176>
		case 3:
			HAL_GPIO_WritePin(SEG_00_GPIO_Port, SEG_00_Pin, RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2140      	movs	r1, #64	; 0x40
 80010f0:	482a      	ldr	r0, [pc, #168]	; (800119c <dispMode+0x180>)
 80010f2:	f000 ff9e 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_01_GPIO_Port, SEG_01_Pin, RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2180      	movs	r1, #128	; 0x80
 80010fa:	4828      	ldr	r0, [pc, #160]	; (800119c <dispMode+0x180>)
 80010fc:	f000 ff99 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_02_GPIO_Port, SEG_02_Pin, RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001106:	4825      	ldr	r0, [pc, #148]	; (800119c <dispMode+0x180>)
 8001108:	f000 ff93 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_03_GPIO_Port, SEG_03_Pin, RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001112:	4822      	ldr	r0, [pc, #136]	; (800119c <dispMode+0x180>)
 8001114:	f000 ff8d 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_04_GPIO_Port, SEG_04_Pin, SET);
 8001118:	2201      	movs	r2, #1
 800111a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800111e:	481f      	ldr	r0, [pc, #124]	; (800119c <dispMode+0x180>)
 8001120:	f000 ff87 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_05_GPIO_Port, SEG_05_Pin, SET);
 8001124:	2201      	movs	r2, #1
 8001126:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800112a:	481c      	ldr	r0, [pc, #112]	; (800119c <dispMode+0x180>)
 800112c:	f000 ff81 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_06_GPIO_Port, SEG_06_Pin, RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001136:	4819      	ldr	r0, [pc, #100]	; (800119c <dispMode+0x180>)
 8001138:	f000 ff7b 	bl	8002032 <HAL_GPIO_WritePin>
				break;
 800113c:	e029      	b.n	8001192 <dispMode+0x176>
		case 4:
			HAL_GPIO_WritePin(SEG_00_GPIO_Port, SEG_00_Pin, SET);
 800113e:	2201      	movs	r2, #1
 8001140:	2140      	movs	r1, #64	; 0x40
 8001142:	4816      	ldr	r0, [pc, #88]	; (800119c <dispMode+0x180>)
 8001144:	f000 ff75 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_01_GPIO_Port, SEG_01_Pin, RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	2180      	movs	r1, #128	; 0x80
 800114c:	4813      	ldr	r0, [pc, #76]	; (800119c <dispMode+0x180>)
 800114e:	f000 ff70 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_02_GPIO_Port, SEG_02_Pin, RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001158:	4810      	ldr	r0, [pc, #64]	; (800119c <dispMode+0x180>)
 800115a:	f000 ff6a 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_03_GPIO_Port, SEG_03_Pin, SET);
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001164:	480d      	ldr	r0, [pc, #52]	; (800119c <dispMode+0x180>)
 8001166:	f000 ff64 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_04_GPIO_Port, SEG_04_Pin, SET);
 800116a:	2201      	movs	r2, #1
 800116c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001170:	480a      	ldr	r0, [pc, #40]	; (800119c <dispMode+0x180>)
 8001172:	f000 ff5e 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_05_GPIO_Port, SEG_05_Pin, RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800117c:	4807      	ldr	r0, [pc, #28]	; (800119c <dispMode+0x180>)
 800117e:	f000 ff58 	bl	8002032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_06_GPIO_Port, SEG_06_Pin, RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001188:	4804      	ldr	r0, [pc, #16]	; (800119c <dispMode+0x180>)
 800118a:	f000 ff52 	bl	8002032 <HAL_GPIO_WritePin>
				break;
 800118e:	e000      	b.n	8001192 <dispMode+0x176>
		default:
			break;
 8001190:	bf00      	nop

	}
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40010c00 	.word	0x40010c00

080011a0 <update7SEG>:
void update7SEG (int index){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	index = index%4;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	425a      	negs	r2, r3
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	f002 0203 	and.w	r2, r2, #3
 80011b4:	bf58      	it	pl
 80011b6:	4253      	negpl	r3, r2
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b03      	cmp	r3, #3
 80011be:	f200 8099 	bhi.w	80012f4 <update7SEG+0x154>
 80011c2:	a201      	add	r2, pc, #4	; (adr r2, 80011c8 <update7SEG+0x28>)
 80011c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c8:	080011d9 	.word	0x080011d9
 80011cc:	0800121b 	.word	0x0800121b
 80011d0:	08001267 	.word	0x08001267
 80011d4:	080012a9 	.word	0x080012a9
	switch (index){
	case 0:
		  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	2102      	movs	r1, #2
 80011dc:	4847      	ldr	r0, [pc, #284]	; (80012fc <update7SEG+0x15c>)
 80011de:	f000 ff28 	bl	8002032 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80011e2:	2201      	movs	r2, #1
 80011e4:	2104      	movs	r1, #4
 80011e6:	4845      	ldr	r0, [pc, #276]	; (80012fc <update7SEG+0x15c>)
 80011e8:	f000 ff23 	bl	8002032 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80011ec:	2201      	movs	r2, #1
 80011ee:	2108      	movs	r1, #8
 80011f0:	4842      	ldr	r0, [pc, #264]	; (80012fc <update7SEG+0x15c>)
 80011f2:	f000 ff1e 	bl	8002032 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80011f6:	2201      	movs	r2, #1
 80011f8:	2110      	movs	r1, #16
 80011fa:	4840      	ldr	r0, [pc, #256]	; (80012fc <update7SEG+0x15c>)
 80011fc:	f000 ff19 	bl	8002032 <HAL_GPIO_WritePin>
		  display7SEG(get7SEG1Value()/10);
 8001200:	f7ff fc72 	bl	8000ae8 <get7SEG1Value>
 8001204:	4603      	mov	r3, r0
 8001206:	4a3e      	ldr	r2, [pc, #248]	; (8001300 <update7SEG+0x160>)
 8001208:	fb82 1203 	smull	r1, r2, r2, r3
 800120c:	1092      	asrs	r2, r2, #2
 800120e:	17db      	asrs	r3, r3, #31
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fcf8 	bl	8000c08 <display7SEG>
		break;
 8001218:	e06c      	b.n	80012f4 <update7SEG+0x154>
	case 1:
		  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800121a:	2201      	movs	r2, #1
 800121c:	2102      	movs	r1, #2
 800121e:	4837      	ldr	r0, [pc, #220]	; (80012fc <update7SEG+0x15c>)
 8001220:	f000 ff07 	bl	8002032 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	2104      	movs	r1, #4
 8001228:	4834      	ldr	r0, [pc, #208]	; (80012fc <update7SEG+0x15c>)
 800122a:	f000 ff02 	bl	8002032 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800122e:	2201      	movs	r2, #1
 8001230:	2108      	movs	r1, #8
 8001232:	4832      	ldr	r0, [pc, #200]	; (80012fc <update7SEG+0x15c>)
 8001234:	f000 fefd 	bl	8002032 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8001238:	2201      	movs	r2, #1
 800123a:	2110      	movs	r1, #16
 800123c:	482f      	ldr	r0, [pc, #188]	; (80012fc <update7SEG+0x15c>)
 800123e:	f000 fef8 	bl	8002032 <HAL_GPIO_WritePin>
		  display7SEG(get7SEG1Value()%10);
 8001242:	f7ff fc51 	bl	8000ae8 <get7SEG1Value>
 8001246:	4601      	mov	r1, r0
 8001248:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <update7SEG+0x160>)
 800124a:	fb83 2301 	smull	r2, r3, r3, r1
 800124e:	109a      	asrs	r2, r3, #2
 8001250:	17cb      	asrs	r3, r1, #31
 8001252:	1ad2      	subs	r2, r2, r3
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	1aca      	subs	r2, r1, r3
 800125e:	4610      	mov	r0, r2
 8001260:	f7ff fcd2 	bl	8000c08 <display7SEG>
		break;
 8001264:	e046      	b.n	80012f4 <update7SEG+0x154>
	case 2:
		  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001266:	2201      	movs	r2, #1
 8001268:	2102      	movs	r1, #2
 800126a:	4824      	ldr	r0, [pc, #144]	; (80012fc <update7SEG+0x15c>)
 800126c:	f000 fee1 	bl	8002032 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001270:	2201      	movs	r2, #1
 8001272:	2104      	movs	r1, #4
 8001274:	4821      	ldr	r0, [pc, #132]	; (80012fc <update7SEG+0x15c>)
 8001276:	f000 fedc 	bl	8002032 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	2108      	movs	r1, #8
 800127e:	481f      	ldr	r0, [pc, #124]	; (80012fc <update7SEG+0x15c>)
 8001280:	f000 fed7 	bl	8002032 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8001284:	2201      	movs	r2, #1
 8001286:	2110      	movs	r1, #16
 8001288:	481c      	ldr	r0, [pc, #112]	; (80012fc <update7SEG+0x15c>)
 800128a:	f000 fed2 	bl	8002032 <HAL_GPIO_WritePin>
		  display7SEG(get7SEG2Value()/10);
 800128e:	f7ff fc73 	bl	8000b78 <get7SEG2Value>
 8001292:	4603      	mov	r3, r0
 8001294:	4a1a      	ldr	r2, [pc, #104]	; (8001300 <update7SEG+0x160>)
 8001296:	fb82 1203 	smull	r1, r2, r2, r3
 800129a:	1092      	asrs	r2, r2, #2
 800129c:	17db      	asrs	r3, r3, #31
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fcb1 	bl	8000c08 <display7SEG>
		break;
 80012a6:	e025      	b.n	80012f4 <update7SEG+0x154>
	case 3:
		  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2102      	movs	r1, #2
 80012ac:	4813      	ldr	r0, [pc, #76]	; (80012fc <update7SEG+0x15c>)
 80012ae:	f000 fec0 	bl	8002032 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80012b2:	2201      	movs	r2, #1
 80012b4:	2104      	movs	r1, #4
 80012b6:	4811      	ldr	r0, [pc, #68]	; (80012fc <update7SEG+0x15c>)
 80012b8:	f000 febb 	bl	8002032 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80012bc:	2201      	movs	r2, #1
 80012be:	2108      	movs	r1, #8
 80012c0:	480e      	ldr	r0, [pc, #56]	; (80012fc <update7SEG+0x15c>)
 80012c2:	f000 feb6 	bl	8002032 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2110      	movs	r1, #16
 80012ca:	480c      	ldr	r0, [pc, #48]	; (80012fc <update7SEG+0x15c>)
 80012cc:	f000 feb1 	bl	8002032 <HAL_GPIO_WritePin>
		  display7SEG(get7SEG2Value()%10);
 80012d0:	f7ff fc52 	bl	8000b78 <get7SEG2Value>
 80012d4:	4601      	mov	r1, r0
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <update7SEG+0x160>)
 80012d8:	fb83 2301 	smull	r2, r3, r3, r1
 80012dc:	109a      	asrs	r2, r3, #2
 80012de:	17cb      	asrs	r3, r1, #31
 80012e0:	1ad2      	subs	r2, r2, r3
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	1aca      	subs	r2, r1, r3
 80012ec:	4610      	mov	r0, r2
 80012ee:	f7ff fc8b 	bl	8000c08 <display7SEG>
		break;
 80012f2:	bf00      	nop
	}
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40010800 	.word	0x40010800
 8001300:	66666667 	.word	0x66666667

08001304 <updateClock>:


void updateClock() {
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	if(timer2_flag == 1){
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <updateClock+0x34>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d111      	bne.n	8001334 <updateClock+0x30>
		if (index_led > 3){
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <updateClock+0x38>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b03      	cmp	r3, #3
 8001316:	dd02      	ble.n	800131e <updateClock+0x1a>
			index_led = 0;
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <updateClock+0x38>)
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
		}
		update7SEG(index_led++);
 800131e:	4b07      	ldr	r3, [pc, #28]	; (800133c <updateClock+0x38>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	4905      	ldr	r1, [pc, #20]	; (800133c <updateClock+0x38>)
 8001326:	600a      	str	r2, [r1, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff39 	bl	80011a0 <update7SEG>
		setTimer2(250);
 800132e:	20fa      	movs	r0, #250	; 0xfa
 8001330:	f000 fa0c 	bl	800174c <setTimer2>
	}
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	2000009c 	.word	0x2000009c
 800133c:	20000084 	.word	0x20000084

08001340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001344:	f000 fb74 	bl	8001a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001348:	f000 f838 	bl	80013bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134c:	f000 f8be 	bl	80014cc <MX_GPIO_Init>
  MX_TIM2_Init();
 8001350:	f000 f870 	bl	8001434 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001354:	4815      	ldr	r0, [pc, #84]	; (80013ac <main+0x6c>)
 8001356:	f001 fac9 	bl	80028ec <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer0(100);
 800135a:	2064      	movs	r0, #100	; 0x64
 800135c:	f000 f9be 	bl	80016dc <setTimer0>
  setTimer1(100);
 8001360:	2064      	movs	r0, #100	; 0x64
 8001362:	f000 f9d7 	bl	8001714 <setTimer1>
  setTimer2(100);
 8001366:	2064      	movs	r0, #100	; 0x64
 8001368:	f000 f9f0 	bl	800174c <setTimer2>
  setTimer3(100);
 800136c:	2064      	movs	r0, #100	; 0x64
 800136e:	f000 fa09 	bl	8001784 <setTimer3>
  setTimerLed(100);
 8001372:	2064      	movs	r0, #100	; 0x64
 8001374:	f000 fa22 	bl	80017bc <setTimerLed>

  while (1)
  {
	  if (timer0_flag == 1){
 8001378:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <main+0x70>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d107      	bne.n	8001390 <main+0x50>
		  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001380:	2120      	movs	r1, #32
 8001382:	480c      	ldr	r0, [pc, #48]	; (80013b4 <main+0x74>)
 8001384:	f000 fe6d 	bl	8002062 <HAL_GPIO_TogglePin>
		  setTimer0(1000);
 8001388:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800138c:	f000 f9a6 	bl	80016dc <setTimer0>
	  }

		dispMode(mode);
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <main+0x78>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fe41 	bl	800101c <dispMode>
		fsm_automatic_run();
 800139a:	f7ff f807 	bl	80003ac <fsm_automatic_run>
		fsm_manual_run();
 800139e:	f7ff f93b 	bl	8000618 <fsm_manual_run>
		fsm_setting_run();
 80013a2:	f7ff fa31 	bl	8000808 <fsm_setting_run>
		updateClock();
 80013a6:	f7ff ffad 	bl	8001304 <updateClock>
	  if (timer0_flag == 1){
 80013aa:	e7e5      	b.n	8001378 <main+0x38>
 80013ac:	200000bc 	.word	0x200000bc
 80013b0:	2000008c 	.word	0x2000008c
 80013b4:	40010800 	.word	0x40010800
 80013b8:	2000004c 	.word	0x2000004c

080013bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b090      	sub	sp, #64	; 0x40
 80013c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c2:	f107 0318 	add.w	r3, r7, #24
 80013c6:	2228      	movs	r2, #40	; 0x28
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f001 fe3e 	bl	800304c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013de:	2302      	movs	r3, #2
 80013e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e2:	2301      	movs	r3, #1
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013e6:	2310      	movs	r3, #16
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ee:	f107 0318 	add.w	r3, r7, #24
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 fe4e 	bl	8002094 <HAL_RCC_OscConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80013fe:	f000 f8f5 	bl	80015ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001402:	230f      	movs	r3, #15
 8001404:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f001 f8ba 	bl	8002594 <HAL_RCC_ClockConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001426:	f000 f8e1 	bl	80015ec <Error_Handler>
  }
}
 800142a:	bf00      	nop
 800142c:	3740      	adds	r7, #64	; 0x40
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143a:	f107 0308 	add.w	r3, r7, #8
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001448:	463b      	mov	r3, r7
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001450:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <MX_TIM2_Init+0x94>)
 8001452:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001456:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <MX_TIM2_Init+0x94>)
 800145a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800145e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <MX_TIM2_Init+0x94>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <MX_TIM2_Init+0x94>)
 8001468:	2209      	movs	r2, #9
 800146a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <MX_TIM2_Init+0x94>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <MX_TIM2_Init+0x94>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001478:	4813      	ldr	r0, [pc, #76]	; (80014c8 <MX_TIM2_Init+0x94>)
 800147a:	f001 f9e7 	bl	800284c <HAL_TIM_Base_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001484:	f000 f8b2 	bl	80015ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	4619      	mov	r1, r3
 8001494:	480c      	ldr	r0, [pc, #48]	; (80014c8 <MX_TIM2_Init+0x94>)
 8001496:	f001 fb65 	bl	8002b64 <HAL_TIM_ConfigClockSource>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014a0:	f000 f8a4 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a4:	2300      	movs	r3, #0
 80014a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ac:	463b      	mov	r3, r7
 80014ae:	4619      	mov	r1, r3
 80014b0:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_TIM2_Init+0x94>)
 80014b2:	f001 fd3d 	bl	8002f30 <HAL_TIMEx_MasterConfigSynchronization>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014bc:	f000 f896 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	200000bc 	.word	0x200000bc

080014cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d2:	f107 0310 	add.w	r3, r7, #16
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e0:	4b35      	ldr	r3, [pc, #212]	; (80015b8 <MX_GPIO_Init+0xec>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a34      	ldr	r2, [pc, #208]	; (80015b8 <MX_GPIO_Init+0xec>)
 80014e6:	f043 0310 	orr.w	r3, r3, #16
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b32      	ldr	r3, [pc, #200]	; (80015b8 <MX_GPIO_Init+0xec>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0310 	and.w	r3, r3, #16
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f8:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <MX_GPIO_Init+0xec>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a2e      	ldr	r2, [pc, #184]	; (80015b8 <MX_GPIO_Init+0xec>)
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	6193      	str	r3, [r2, #24]
 8001504:	4b2c      	ldr	r3, [pc, #176]	; (80015b8 <MX_GPIO_Init+0xec>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001510:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <MX_GPIO_Init+0xec>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4a28      	ldr	r2, [pc, #160]	; (80015b8 <MX_GPIO_Init+0xec>)
 8001516:	f043 0308 	orr.w	r3, r3, #8
 800151a:	6193      	str	r3, [r2, #24]
 800151c:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <MX_GPIO_Init+0xec>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f003 0308 	and.w	r3, r3, #8
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001528:	2200      	movs	r2, #0
 800152a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 800152e:	4823      	ldr	r0, [pc, #140]	; (80015bc <MX_GPIO_Init+0xf0>)
 8001530:	f000 fd7f 	bl	8002032 <HAL_GPIO_WritePin>
                          |LED_RED_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LED_BLUE_Pin
                          |SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_RED_Pin|LED_1_GREEN_Pin|LED_1_YELLOW_Pin|SEG_04_Pin
 8001534:	2200      	movs	r2, #0
 8001536:	f641 71ff 	movw	r1, #8191	; 0x1fff
 800153a:	4821      	ldr	r0, [pc, #132]	; (80015c0 <MX_GPIO_Init+0xf4>)
 800153c:	f000 fd79 	bl	8002032 <HAL_GPIO_WritePin>
                          |SEG_05_Pin|SEG_06_Pin|LED_2_RED_Pin|LED_2_GREEN_Pin
                          |LED_2_YELLOW_Pin|SEG_00_Pin|SEG_01_Pin|SEG_02_Pin
                          |SEG_03_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Button0_Pin */
  GPIO_InitStruct.Pin = Button0_Pin;
 8001540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800154a:	2301      	movs	r3, #1
 800154c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button0_GPIO_Port, &GPIO_InitStruct);
 800154e:	f107 0310 	add.w	r3, r7, #16
 8001552:	4619      	mov	r1, r3
 8001554:	481b      	ldr	r0, [pc, #108]	; (80015c4 <MX_GPIO_Init+0xf8>)
 8001556:	f000 fbdb 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           LED_RED_Pin LED_GREEN_Pin LED_YELLOW_Pin LED_BLUE_Pin
                           SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 800155a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800155e:	613b      	str	r3, [r7, #16]
                          |LED_RED_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LED_BLUE_Pin
                          |SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001560:	2301      	movs	r3, #1
 8001562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2302      	movs	r3, #2
 800156a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 0310 	add.w	r3, r7, #16
 8001570:	4619      	mov	r1, r3
 8001572:	4812      	ldr	r0, [pc, #72]	; (80015bc <MX_GPIO_Init+0xf0>)
 8001574:	f000 fbcc 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_RED_Pin LED_1_GREEN_Pin LED_1_YELLOW_Pin SEG_04_Pin
                           SEG_05_Pin SEG_06_Pin LED_2_RED_Pin LED_2_GREEN_Pin
                           LED_2_YELLOW_Pin SEG_00_Pin SEG_01_Pin SEG_02_Pin
                           SEG_03_Pin */
  GPIO_InitStruct.Pin = LED_1_RED_Pin|LED_1_GREEN_Pin|LED_1_YELLOW_Pin|SEG_04_Pin
 8001578:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800157c:	613b      	str	r3, [r7, #16]
                          |SEG_05_Pin|SEG_06_Pin|LED_2_RED_Pin|LED_2_GREEN_Pin
                          |LED_2_YELLOW_Pin|SEG_00_Pin|SEG_01_Pin|SEG_02_Pin
                          |SEG_03_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2302      	movs	r3, #2
 8001588:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158a:	f107 0310 	add.w	r3, r7, #16
 800158e:	4619      	mov	r1, r3
 8001590:	480b      	ldr	r0, [pc, #44]	; (80015c0 <MX_GPIO_Init+0xf4>)
 8001592:	f000 fbbd 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 8001596:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800159a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a0:	2301      	movs	r3, #1
 80015a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	4619      	mov	r1, r3
 80015aa:	4805      	ldr	r0, [pc, #20]	; (80015c0 <MX_GPIO_Init+0xf4>)
 80015ac:	f000 fbb0 	bl	8001d10 <HAL_GPIO_Init>

}
 80015b0:	bf00      	nop
 80015b2:	3720      	adds	r7, #32
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40010800 	.word	0x40010800
 80015c0:	40010c00 	.word	0x40010c00
 80015c4:	40011000 	.word	0x40011000

080015c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80015d0:	f000 f812 	bl	80015f8 <SCH_Update>
	getKey1Input();
 80015d4:	f7fe fdfc 	bl	80001d0 <getKey1Input>
	getKey2Input();
 80015d8:	f7fe fe48 	bl	800026c <getKey2Input>
	getKey3Input();
 80015dc:	f7fe fe96 	bl	800030c <getKey3Input>
	timerRun();
 80015e0:	f000 f908 	bl	80017f4 <timerRun>
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f0:	b672      	cpsid	i
}
 80015f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <Error_Handler+0x8>
	...

080015f8 <SCH_Update>:
	//Error_code_G = 0;
	//Timer_init();
	//Watchdog_init();
}

void SCH_Update(void) {
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
//				SCH_tasks_G[0].Delay = 1;
//			}
//		}
//	}
	unsigned char Index;
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80015fe:	2300      	movs	r3, #0
 8001600:	71fb      	strb	r3, [r7, #7]
 8001602:	e05f      	b.n	80016c4 <SCH_Update+0xcc>
		if (SCH_tasks_G[Index].pTask) {
 8001604:	79fa      	ldrb	r2, [r7, #7]
 8001606:	4934      	ldr	r1, [pc, #208]	; (80016d8 <SCH_Update+0xe0>)
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d052      	beq.n	80016be <SCH_Update+0xc6>
			SCH_tasks_G[Index].Delay -= 1;
 8001618:	79fa      	ldrb	r2, [r7, #7]
 800161a:	492f      	ldr	r1, [pc, #188]	; (80016d8 <SCH_Update+0xe0>)
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	3304      	adds	r3, #4
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	79fa      	ldrb	r2, [r7, #7]
 800162c:	1e59      	subs	r1, r3, #1
 800162e:	482a      	ldr	r0, [pc, #168]	; (80016d8 <SCH_Update+0xe0>)
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4403      	add	r3, r0
 800163a:	3304      	adds	r3, #4
 800163c:	6019      	str	r1, [r3, #0]
			if (SCH_tasks_G[Index].Delay <= 0) {
 800163e:	79fa      	ldrb	r2, [r7, #7]
 8001640:	4925      	ldr	r1, [pc, #148]	; (80016d8 <SCH_Update+0xe0>)
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	440b      	add	r3, r1
 800164c:	3304      	adds	r3, #4
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	dc34      	bgt.n	80016be <SCH_Update+0xc6>
				SCH_tasks_G[Index].RunMe += 1;
 8001654:	79fa      	ldrb	r2, [r7, #7]
 8001656:	4920      	ldr	r1, [pc, #128]	; (80016d8 <SCH_Update+0xe0>)
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	330c      	adds	r3, #12
 8001664:	f993 3000 	ldrsb.w	r3, [r3]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	3301      	adds	r3, #1
 800166c:	b2db      	uxtb	r3, r3
 800166e:	79fa      	ldrb	r2, [r7, #7]
 8001670:	b258      	sxtb	r0, r3
 8001672:	4919      	ldr	r1, [pc, #100]	; (80016d8 <SCH_Update+0xe0>)
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	330c      	adds	r3, #12
 8001680:	4602      	mov	r2, r0
 8001682:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks_G[Index].Period) {
 8001684:	79fa      	ldrb	r2, [r7, #7]
 8001686:	4914      	ldr	r1, [pc, #80]	; (80016d8 <SCH_Update+0xe0>)
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	3308      	adds	r3, #8
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d011      	beq.n	80016be <SCH_Update+0xc6>
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 800169a:	79f9      	ldrb	r1, [r7, #7]
 800169c:	79fa      	ldrb	r2, [r7, #7]
 800169e:	480e      	ldr	r0, [pc, #56]	; (80016d8 <SCH_Update+0xe0>)
 80016a0:	460b      	mov	r3, r1
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4403      	add	r3, r0
 80016aa:	3308      	adds	r3, #8
 80016ac:	6819      	ldr	r1, [r3, #0]
 80016ae:	480a      	ldr	r0, [pc, #40]	; (80016d8 <SCH_Update+0xe0>)
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4403      	add	r3, r0
 80016ba:	3304      	adds	r3, #4
 80016bc:	6019      	str	r1, [r3, #0]
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	3301      	adds	r3, #1
 80016c2:	71fb      	strb	r3, [r7, #7]
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	2b09      	cmp	r3, #9
 80016c8:	d99c      	bls.n	8001604 <SCH_Update+0xc>
				}
			}
		}
	}
}
 80016ca:	bf00      	nop
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	20000104 	.word	0x20000104

080016dc <setTimer0>:
int timer3_flag = 0;

int timer_led_counter = 0;
int timer_led_flag = 0;

void setTimer0(int duration){
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	timer0_counter = duration/TIMER_CYCLE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a08      	ldr	r2, [pc, #32]	; (8001708 <setTimer0+0x2c>)
 80016e8:	fb82 1203 	smull	r1, r2, r2, r3
 80016ec:	1092      	asrs	r2, r2, #2
 80016ee:	17db      	asrs	r3, r3, #31
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	4a06      	ldr	r2, [pc, #24]	; (800170c <setTimer0+0x30>)
 80016f4:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <setTimer0+0x34>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	66666667 	.word	0x66666667
 800170c:	20000088 	.word	0x20000088
 8001710:	2000008c 	.word	0x2000008c

08001714 <setTimer1>:

void setTimer1(int duration){
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a08      	ldr	r2, [pc, #32]	; (8001740 <setTimer1+0x2c>)
 8001720:	fb82 1203 	smull	r1, r2, r2, r3
 8001724:	1092      	asrs	r2, r2, #2
 8001726:	17db      	asrs	r3, r3, #31
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	4a06      	ldr	r2, [pc, #24]	; (8001744 <setTimer1+0x30>)
 800172c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <setTimer1+0x34>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	66666667 	.word	0x66666667
 8001744:	20000090 	.word	0x20000090
 8001748:	20000094 	.word	0x20000094

0800174c <setTimer2>:

void setTimer2(int duration){
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a08      	ldr	r2, [pc, #32]	; (8001778 <setTimer2+0x2c>)
 8001758:	fb82 1203 	smull	r1, r2, r2, r3
 800175c:	1092      	asrs	r2, r2, #2
 800175e:	17db      	asrs	r3, r3, #31
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	4a06      	ldr	r2, [pc, #24]	; (800177c <setTimer2+0x30>)
 8001764:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <setTimer2+0x34>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	66666667 	.word	0x66666667
 800177c:	20000098 	.word	0x20000098
 8001780:	2000009c 	.word	0x2000009c

08001784 <setTimer3>:

void setTimer3(int duration){
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIMER_CYCLE;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a08      	ldr	r2, [pc, #32]	; (80017b0 <setTimer3+0x2c>)
 8001790:	fb82 1203 	smull	r1, r2, r2, r3
 8001794:	1092      	asrs	r2, r2, #2
 8001796:	17db      	asrs	r3, r3, #31
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	4a06      	ldr	r2, [pc, #24]	; (80017b4 <setTimer3+0x30>)
 800179c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <setTimer3+0x34>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	66666667 	.word	0x66666667
 80017b4:	200000a0 	.word	0x200000a0
 80017b8:	200000a4 	.word	0x200000a4

080017bc <setTimerLed>:

void setTimerLed(int duration){
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	timer_led_counter = duration/TIMER_CYCLE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a08      	ldr	r2, [pc, #32]	; (80017e8 <setTimerLed+0x2c>)
 80017c8:	fb82 1203 	smull	r1, r2, r2, r3
 80017cc:	1092      	asrs	r2, r2, #2
 80017ce:	17db      	asrs	r3, r3, #31
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	4a06      	ldr	r2, [pc, #24]	; (80017ec <setTimerLed+0x30>)
 80017d4:	6013      	str	r3, [r2, #0]
	timer_led_flag = 0;
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <setTimerLed+0x34>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	66666667 	.word	0x66666667
 80017ec:	200000a8 	.word	0x200000a8
 80017f0:	200000ac 	.word	0x200000ac

080017f4 <timerRun>:

void timerRun(){
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
	if (timer0_counter > 0){
 80017f8:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <timerRun+0xac>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	dd0b      	ble.n	8001818 <timerRun+0x24>
			timer0_counter--;
 8001800:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <timerRun+0xac>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3b01      	subs	r3, #1
 8001806:	4a26      	ldr	r2, [pc, #152]	; (80018a0 <timerRun+0xac>)
 8001808:	6013      	str	r3, [r2, #0]
			if (timer0_counter <= 0){
 800180a:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <timerRun+0xac>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	dc02      	bgt.n	8001818 <timerRun+0x24>
				timer0_flag = 1;
 8001812:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <timerRun+0xb0>)
 8001814:	2201      	movs	r2, #1
 8001816:	601a      	str	r2, [r3, #0]
			}
		}
	if (timer1_counter > 0){
 8001818:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <timerRun+0xb4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	dd0b      	ble.n	8001838 <timerRun+0x44>
		timer1_counter--;
 8001820:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <timerRun+0xb4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	3b01      	subs	r3, #1
 8001826:	4a20      	ldr	r2, [pc, #128]	; (80018a8 <timerRun+0xb4>)
 8001828:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0){
 800182a:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <timerRun+0xb4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	dc02      	bgt.n	8001838 <timerRun+0x44>
			timer1_flag = 1;
 8001832:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <timerRun+0xb8>)
 8001834:	2201      	movs	r2, #1
 8001836:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer2_counter > 0){
 8001838:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <timerRun+0xbc>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	dd0b      	ble.n	8001858 <timerRun+0x64>
		timer2_counter--;
 8001840:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <timerRun+0xbc>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	3b01      	subs	r3, #1
 8001846:	4a1a      	ldr	r2, [pc, #104]	; (80018b0 <timerRun+0xbc>)
 8001848:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0){
 800184a:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <timerRun+0xbc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	dc02      	bgt.n	8001858 <timerRun+0x64>
			timer2_flag = 1;
 8001852:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <timerRun+0xc0>)
 8001854:	2201      	movs	r2, #1
 8001856:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer3_counter > 0){
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <timerRun+0xc4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	dd0b      	ble.n	8001878 <timerRun+0x84>
		timer3_counter--;
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <timerRun+0xc4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	3b01      	subs	r3, #1
 8001866:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <timerRun+0xc4>)
 8001868:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0){
 800186a:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <timerRun+0xc4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	dc02      	bgt.n	8001878 <timerRun+0x84>
			timer3_flag = 1;
 8001872:	4b12      	ldr	r3, [pc, #72]	; (80018bc <timerRun+0xc8>)
 8001874:	2201      	movs	r2, #1
 8001876:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer_led_counter > 0){
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <timerRun+0xcc>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	dd0b      	ble.n	8001898 <timerRun+0xa4>
		timer_led_counter--;
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <timerRun+0xcc>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	3b01      	subs	r3, #1
 8001886:	4a0e      	ldr	r2, [pc, #56]	; (80018c0 <timerRun+0xcc>)
 8001888:	6013      	str	r3, [r2, #0]
		if (timer_led_counter <= 0){
 800188a:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <timerRun+0xcc>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	dc02      	bgt.n	8001898 <timerRun+0xa4>
			timer_led_flag = 1;
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <timerRun+0xd0>)
 8001894:	2201      	movs	r2, #1
 8001896:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	20000088 	.word	0x20000088
 80018a4:	2000008c 	.word	0x2000008c
 80018a8:	20000090 	.word	0x20000090
 80018ac:	20000094 	.word	0x20000094
 80018b0:	20000098 	.word	0x20000098
 80018b4:	2000009c 	.word	0x2000009c
 80018b8:	200000a0 	.word	0x200000a0
 80018bc:	200000a4 	.word	0x200000a4
 80018c0:	200000a8 	.word	0x200000a8
 80018c4:	200000ac 	.word	0x200000ac

080018c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <HAL_MspInit+0x5c>)
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	4a14      	ldr	r2, [pc, #80]	; (8001924 <HAL_MspInit+0x5c>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6193      	str	r3, [r2, #24]
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_MspInit+0x5c>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_MspInit+0x5c>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	4a0e      	ldr	r2, [pc, #56]	; (8001924 <HAL_MspInit+0x5c>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	61d3      	str	r3, [r2, #28]
 80018f2:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <HAL_MspInit+0x5c>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <HAL_MspInit+0x60>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	4a04      	ldr	r2, [pc, #16]	; (8001928 <HAL_MspInit+0x60>)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191a:	bf00      	nop
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	40021000 	.word	0x40021000
 8001928:	40010000 	.word	0x40010000

0800192c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800193c:	d113      	bne.n	8001966 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800193e:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <HAL_TIM_Base_MspInit+0x44>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <HAL_TIM_Base_MspInit+0x44>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	61d3      	str	r3, [r2, #28]
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_TIM_Base_MspInit+0x44>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	2100      	movs	r1, #0
 800195a:	201c      	movs	r0, #28
 800195c:	f000 f9a1 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001960:	201c      	movs	r0, #28
 8001962:	f000 f9ba 	bl	8001cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000

08001974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <NMI_Handler+0x4>

0800197a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <HardFault_Handler+0x4>

08001980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <MemManage_Handler+0x4>

08001986 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <BusFault_Handler+0x4>

0800198c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <UsageFault_Handler+0x4>

08001992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ba:	f000 f87f 	bl	8001abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <TIM2_IRQHandler+0x10>)
 80019ca:	f000 ffdb 	bl	8002984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200000bc 	.word	0x200000bc

080019d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019e4:	f7ff fff8 	bl	80019d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019e8:	480b      	ldr	r0, [pc, #44]	; (8001a18 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019ea:	490c      	ldr	r1, [pc, #48]	; (8001a1c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019ec:	4a0c      	ldr	r2, [pc, #48]	; (8001a20 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f0:	e002      	b.n	80019f8 <LoopCopyDataInit>

080019f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f6:	3304      	adds	r3, #4

080019f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019fc:	d3f9      	bcc.n	80019f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fe:	4a09      	ldr	r2, [pc, #36]	; (8001a24 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a00:	4c09      	ldr	r4, [pc, #36]	; (8001a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a04:	e001      	b.n	8001a0a <LoopFillZerobss>

08001a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a08:	3204      	adds	r2, #4

08001a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a0c:	d3fb      	bcc.n	8001a06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a0e:	f001 faf9 	bl	8003004 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a12:	f7ff fc95 	bl	8001340 <main>
  bx lr
 8001a16:	4770      	bx	lr
  ldr r0, =_sdata
 8001a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a1c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001a20:	080030a0 	.word	0x080030a0
  ldr r2, =_sbss
 8001a24:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001a28:	200001d0 	.word	0x200001d0

08001a2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a2c:	e7fe      	b.n	8001a2c <ADC1_2_IRQHandler>
	...

08001a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <HAL_Init+0x28>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a07      	ldr	r2, [pc, #28]	; (8001a58 <HAL_Init+0x28>)
 8001a3a:	f043 0310 	orr.w	r3, r3, #16
 8001a3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a40:	2003      	movs	r0, #3
 8001a42:	f000 f923 	bl	8001c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a46:	200f      	movs	r0, #15
 8001a48:	f000 f808 	bl	8001a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a4c:	f7ff ff3c 	bl	80018c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40022000 	.word	0x40022000

08001a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_InitTick+0x54>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_InitTick+0x58>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 f93b 	bl	8001cf6 <HAL_SYSTICK_Config>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e00e      	b.n	8001aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b0f      	cmp	r3, #15
 8001a8e:	d80a      	bhi.n	8001aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a90:	2200      	movs	r2, #0
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	f04f 30ff 	mov.w	r0, #4294967295
 8001a98:	f000 f903 	bl	8001ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a9c:	4a06      	ldr	r2, [pc, #24]	; (8001ab8 <HAL_InitTick+0x5c>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e000      	b.n	8001aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000050 	.word	0x20000050
 8001ab4:	20000058 	.word	0x20000058
 8001ab8:	20000054 	.word	0x20000054

08001abc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_IncTick+0x1c>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_IncTick+0x20>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	4a03      	ldr	r2, [pc, #12]	; (8001adc <HAL_IncTick+0x20>)
 8001ace:	6013      	str	r3, [r2, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	20000058 	.word	0x20000058
 8001adc:	200001cc 	.word	0x200001cc

08001ae0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae4:	4b02      	ldr	r3, [pc, #8]	; (8001af0 <HAL_GetTick+0x10>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	200001cc 	.word	0x200001cc

08001af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b10:	4013      	ands	r3, r2
 8001b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b26:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	60d3      	str	r3, [r2, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b40:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <__NVIC_GetPriorityGrouping+0x18>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	0a1b      	lsrs	r3, r3, #8
 8001b46:	f003 0307 	and.w	r3, r3, #7
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	db0b      	blt.n	8001b82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	f003 021f 	and.w	r2, r3, #31
 8001b70:	4906      	ldr	r1, [pc, #24]	; (8001b8c <__NVIC_EnableIRQ+0x34>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	095b      	lsrs	r3, r3, #5
 8001b78:	2001      	movs	r0, #1
 8001b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	e000e100 	.word	0xe000e100

08001b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	db0a      	blt.n	8001bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	490c      	ldr	r1, [pc, #48]	; (8001bdc <__NVIC_SetPriority+0x4c>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	0112      	lsls	r2, r2, #4
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb8:	e00a      	b.n	8001bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4908      	ldr	r1, [pc, #32]	; (8001be0 <__NVIC_SetPriority+0x50>)
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	3b04      	subs	r3, #4
 8001bc8:	0112      	lsls	r2, r2, #4
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	440b      	add	r3, r1
 8001bce:	761a      	strb	r2, [r3, #24]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000e100 	.word	0xe000e100
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	; 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f1c3 0307 	rsb	r3, r3, #7
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	bf28      	it	cs
 8001c02:	2304      	movcs	r3, #4
 8001c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d902      	bls.n	8001c14 <NVIC_EncodePriority+0x30>
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3b03      	subs	r3, #3
 8001c12:	e000      	b.n	8001c16 <NVIC_EncodePriority+0x32>
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43da      	mvns	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	401a      	ands	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa01 f303 	lsl.w	r3, r1, r3
 8001c36:	43d9      	mvns	r1, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	4313      	orrs	r3, r2
         );
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3724      	adds	r7, #36	; 0x24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c58:	d301      	bcc.n	8001c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00f      	b.n	8001c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <SysTick_Config+0x40>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c66:	210f      	movs	r1, #15
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	f7ff ff90 	bl	8001b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <SysTick_Config+0x40>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c76:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <SysTick_Config+0x40>)
 8001c78:	2207      	movs	r2, #7
 8001c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	e000e010 	.word	0xe000e010

08001c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ff2d 	bl	8001af4 <__NVIC_SetPriorityGrouping>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb4:	f7ff ff42 	bl	8001b3c <__NVIC_GetPriorityGrouping>
 8001cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	6978      	ldr	r0, [r7, #20]
 8001cc0:	f7ff ff90 	bl	8001be4 <NVIC_EncodePriority>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff5f 	bl	8001b90 <__NVIC_SetPriority>
}
 8001cd2:	bf00      	nop
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff35 	bl	8001b58 <__NVIC_EnableIRQ>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ffa2 	bl	8001c48 <SysTick_Config>
 8001d04:	4603      	mov	r3, r0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b08b      	sub	sp, #44	; 0x2c
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d22:	e148      	b.n	8001fb6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d24:	2201      	movs	r2, #1
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	f040 8137 	bne.w	8001fb0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	4aa3      	ldr	r2, [pc, #652]	; (8001fd4 <HAL_GPIO_Init+0x2c4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d05e      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d4c:	4aa1      	ldr	r2, [pc, #644]	; (8001fd4 <HAL_GPIO_Init+0x2c4>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d875      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d52:	4aa1      	ldr	r2, [pc, #644]	; (8001fd8 <HAL_GPIO_Init+0x2c8>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d058      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d58:	4a9f      	ldr	r2, [pc, #636]	; (8001fd8 <HAL_GPIO_Init+0x2c8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d86f      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d5e:	4a9f      	ldr	r2, [pc, #636]	; (8001fdc <HAL_GPIO_Init+0x2cc>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d052      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d64:	4a9d      	ldr	r2, [pc, #628]	; (8001fdc <HAL_GPIO_Init+0x2cc>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d869      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d6a:	4a9d      	ldr	r2, [pc, #628]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d04c      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d70:	4a9b      	ldr	r2, [pc, #620]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d863      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d76:	4a9b      	ldr	r2, [pc, #620]	; (8001fe4 <HAL_GPIO_Init+0x2d4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d046      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d7c:	4a99      	ldr	r2, [pc, #612]	; (8001fe4 <HAL_GPIO_Init+0x2d4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d85d      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d82:	2b12      	cmp	r3, #18
 8001d84:	d82a      	bhi.n	8001ddc <HAL_GPIO_Init+0xcc>
 8001d86:	2b12      	cmp	r3, #18
 8001d88:	d859      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d8a:	a201      	add	r2, pc, #4	; (adr r2, 8001d90 <HAL_GPIO_Init+0x80>)
 8001d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d90:	08001e0b 	.word	0x08001e0b
 8001d94:	08001de5 	.word	0x08001de5
 8001d98:	08001df7 	.word	0x08001df7
 8001d9c:	08001e39 	.word	0x08001e39
 8001da0:	08001e3f 	.word	0x08001e3f
 8001da4:	08001e3f 	.word	0x08001e3f
 8001da8:	08001e3f 	.word	0x08001e3f
 8001dac:	08001e3f 	.word	0x08001e3f
 8001db0:	08001e3f 	.word	0x08001e3f
 8001db4:	08001e3f 	.word	0x08001e3f
 8001db8:	08001e3f 	.word	0x08001e3f
 8001dbc:	08001e3f 	.word	0x08001e3f
 8001dc0:	08001e3f 	.word	0x08001e3f
 8001dc4:	08001e3f 	.word	0x08001e3f
 8001dc8:	08001e3f 	.word	0x08001e3f
 8001dcc:	08001e3f 	.word	0x08001e3f
 8001dd0:	08001e3f 	.word	0x08001e3f
 8001dd4:	08001ded 	.word	0x08001ded
 8001dd8:	08001e01 	.word	0x08001e01
 8001ddc:	4a82      	ldr	r2, [pc, #520]	; (8001fe8 <HAL_GPIO_Init+0x2d8>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d013      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001de2:	e02c      	b.n	8001e3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	623b      	str	r3, [r7, #32]
          break;
 8001dea:	e029      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	3304      	adds	r3, #4
 8001df2:	623b      	str	r3, [r7, #32]
          break;
 8001df4:	e024      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	3308      	adds	r3, #8
 8001dfc:	623b      	str	r3, [r7, #32]
          break;
 8001dfe:	e01f      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	330c      	adds	r3, #12
 8001e06:	623b      	str	r3, [r7, #32]
          break;
 8001e08:	e01a      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d102      	bne.n	8001e18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e12:	2304      	movs	r3, #4
 8001e14:	623b      	str	r3, [r7, #32]
          break;
 8001e16:	e013      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d105      	bne.n	8001e2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e20:	2308      	movs	r3, #8
 8001e22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	611a      	str	r2, [r3, #16]
          break;
 8001e2a:	e009      	b.n	8001e40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	615a      	str	r2, [r3, #20]
          break;
 8001e36:	e003      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	623b      	str	r3, [r7, #32]
          break;
 8001e3c:	e000      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          break;
 8001e3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2bff      	cmp	r3, #255	; 0xff
 8001e44:	d801      	bhi.n	8001e4a <HAL_GPIO_Init+0x13a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	e001      	b.n	8001e4e <HAL_GPIO_Init+0x13e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	2bff      	cmp	r3, #255	; 0xff
 8001e54:	d802      	bhi.n	8001e5c <HAL_GPIO_Init+0x14c>
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	e002      	b.n	8001e62 <HAL_GPIO_Init+0x152>
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	3b08      	subs	r3, #8
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	210f      	movs	r1, #15
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	401a      	ands	r2, r3
 8001e74:	6a39      	ldr	r1, [r7, #32]
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 8090 	beq.w	8001fb0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e90:	4b56      	ldr	r3, [pc, #344]	; (8001fec <HAL_GPIO_Init+0x2dc>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4a55      	ldr	r2, [pc, #340]	; (8001fec <HAL_GPIO_Init+0x2dc>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	6193      	str	r3, [r2, #24]
 8001e9c:	4b53      	ldr	r3, [pc, #332]	; (8001fec <HAL_GPIO_Init+0x2dc>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ea8:	4a51      	ldr	r2, [pc, #324]	; (8001ff0 <HAL_GPIO_Init+0x2e0>)
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	089b      	lsrs	r3, r3, #2
 8001eae:	3302      	adds	r3, #2
 8001eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	220f      	movs	r2, #15
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a49      	ldr	r2, [pc, #292]	; (8001ff4 <HAL_GPIO_Init+0x2e4>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d00d      	beq.n	8001ef0 <HAL_GPIO_Init+0x1e0>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a48      	ldr	r2, [pc, #288]	; (8001ff8 <HAL_GPIO_Init+0x2e8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d007      	beq.n	8001eec <HAL_GPIO_Init+0x1dc>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a47      	ldr	r2, [pc, #284]	; (8001ffc <HAL_GPIO_Init+0x2ec>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d101      	bne.n	8001ee8 <HAL_GPIO_Init+0x1d8>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	e004      	b.n	8001ef2 <HAL_GPIO_Init+0x1e2>
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e002      	b.n	8001ef2 <HAL_GPIO_Init+0x1e2>
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <HAL_GPIO_Init+0x1e2>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef4:	f002 0203 	and.w	r2, r2, #3
 8001ef8:	0092      	lsls	r2, r2, #2
 8001efa:	4093      	lsls	r3, r2
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f02:	493b      	ldr	r1, [pc, #236]	; (8001ff0 <HAL_GPIO_Init+0x2e0>)
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	089b      	lsrs	r3, r3, #2
 8001f08:	3302      	adds	r3, #2
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d006      	beq.n	8001f2a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f1c:	4b38      	ldr	r3, [pc, #224]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	4937      	ldr	r1, [pc, #220]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	608b      	str	r3, [r1, #8]
 8001f28:	e006      	b.n	8001f38 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f2a:	4b35      	ldr	r3, [pc, #212]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	4933      	ldr	r1, [pc, #204]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d006      	beq.n	8001f52 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f44:	4b2e      	ldr	r3, [pc, #184]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	492d      	ldr	r1, [pc, #180]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	60cb      	str	r3, [r1, #12]
 8001f50:	e006      	b.n	8001f60 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f52:	4b2b      	ldr	r3, [pc, #172]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	4929      	ldr	r1, [pc, #164]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d006      	beq.n	8001f7a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f6c:	4b24      	ldr	r3, [pc, #144]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	4923      	ldr	r1, [pc, #140]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]
 8001f78:	e006      	b.n	8001f88 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f7a:	4b21      	ldr	r3, [pc, #132]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	491f      	ldr	r1, [pc, #124]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d006      	beq.n	8001fa2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f94:	4b1a      	ldr	r3, [pc, #104]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4919      	ldr	r1, [pc, #100]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]
 8001fa0:	e006      	b.n	8001fb0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fa2:	4b17      	ldr	r3, [pc, #92]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	4915      	ldr	r1, [pc, #84]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f47f aeaf 	bne.w	8001d24 <HAL_GPIO_Init+0x14>
  }
}
 8001fc6:	bf00      	nop
 8001fc8:	bf00      	nop
 8001fca:	372c      	adds	r7, #44	; 0x2c
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	10320000 	.word	0x10320000
 8001fd8:	10310000 	.word	0x10310000
 8001fdc:	10220000 	.word	0x10220000
 8001fe0:	10210000 	.word	0x10210000
 8001fe4:	10120000 	.word	0x10120000
 8001fe8:	10110000 	.word	0x10110000
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	40010800 	.word	0x40010800
 8001ff8:	40010c00 	.word	0x40010c00
 8001ffc:	40011000 	.word	0x40011000
 8002000:	40010400 	.word	0x40010400

08002004 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	887b      	ldrh	r3, [r7, #2]
 8002016:	4013      	ands	r3, r2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800201c:	2301      	movs	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
 8002020:	e001      	b.n	8002026 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002022:	2300      	movs	r3, #0
 8002024:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002026:	7bfb      	ldrb	r3, [r7, #15]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	460b      	mov	r3, r1
 800203c:	807b      	strh	r3, [r7, #2]
 800203e:	4613      	mov	r3, r2
 8002040:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002042:	787b      	ldrb	r3, [r7, #1]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002048:	887a      	ldrh	r2, [r7, #2]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800204e:	e003      	b.n	8002058 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002050:	887b      	ldrh	r3, [r7, #2]
 8002052:	041a      	lsls	r2, r3, #16
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	611a      	str	r2, [r3, #16]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr

08002062 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002062:	b480      	push	{r7}
 8002064:	b085      	sub	sp, #20
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002074:	887a      	ldrh	r2, [r7, #2]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4013      	ands	r3, r2
 800207a:	041a      	lsls	r2, r3, #16
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	43d9      	mvns	r1, r3
 8002080:	887b      	ldrh	r3, [r7, #2]
 8002082:	400b      	ands	r3, r1
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	611a      	str	r2, [r3, #16]
}
 800208a:	bf00      	nop
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e26c      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 8087 	beq.w	80021c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020b4:	4b92      	ldr	r3, [pc, #584]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 030c 	and.w	r3, r3, #12
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d00c      	beq.n	80020da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020c0:	4b8f      	ldr	r3, [pc, #572]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 030c 	and.w	r3, r3, #12
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d112      	bne.n	80020f2 <HAL_RCC_OscConfig+0x5e>
 80020cc:	4b8c      	ldr	r3, [pc, #560]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d8:	d10b      	bne.n	80020f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020da:	4b89      	ldr	r3, [pc, #548]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d06c      	beq.n	80021c0 <HAL_RCC_OscConfig+0x12c>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d168      	bne.n	80021c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e246      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020fa:	d106      	bne.n	800210a <HAL_RCC_OscConfig+0x76>
 80020fc:	4b80      	ldr	r3, [pc, #512]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a7f      	ldr	r2, [pc, #508]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	e02e      	b.n	8002168 <HAL_RCC_OscConfig+0xd4>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0x98>
 8002112:	4b7b      	ldr	r3, [pc, #492]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a7a      	ldr	r2, [pc, #488]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	4b78      	ldr	r3, [pc, #480]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a77      	ldr	r2, [pc, #476]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002124:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e01d      	b.n	8002168 <HAL_RCC_OscConfig+0xd4>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0xbc>
 8002136:	4b72      	ldr	r3, [pc, #456]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a71      	ldr	r2, [pc, #452]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 800213c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	4b6f      	ldr	r3, [pc, #444]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a6e      	ldr	r2, [pc, #440]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e00b      	b.n	8002168 <HAL_RCC_OscConfig+0xd4>
 8002150:	4b6b      	ldr	r3, [pc, #428]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a6a      	ldr	r2, [pc, #424]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b68      	ldr	r3, [pc, #416]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a67      	ldr	r2, [pc, #412]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002166:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d013      	beq.n	8002198 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7ff fcb6 	bl	8001ae0 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002178:	f7ff fcb2 	bl	8001ae0 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e1fa      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	4b5d      	ldr	r3, [pc, #372]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0xe4>
 8002196:	e014      	b.n	80021c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002198:	f7ff fca2 	bl	8001ae0 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a0:	f7ff fc9e 	bl	8001ae0 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	; 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e1e6      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b2:	4b53      	ldr	r3, [pc, #332]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x10c>
 80021be:	e000      	b.n	80021c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d063      	beq.n	8002296 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ce:	4b4c      	ldr	r3, [pc, #304]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00b      	beq.n	80021f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021da:	4b49      	ldr	r3, [pc, #292]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d11c      	bne.n	8002220 <HAL_RCC_OscConfig+0x18c>
 80021e6:	4b46      	ldr	r3, [pc, #280]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d116      	bne.n	8002220 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f2:	4b43      	ldr	r3, [pc, #268]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <HAL_RCC_OscConfig+0x176>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d001      	beq.n	800220a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e1ba      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220a:	4b3d      	ldr	r3, [pc, #244]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4939      	ldr	r1, [pc, #228]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221e:	e03a      	b.n	8002296 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d020      	beq.n	800226a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002228:	4b36      	ldr	r3, [pc, #216]	; (8002304 <HAL_RCC_OscConfig+0x270>)
 800222a:	2201      	movs	r2, #1
 800222c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222e:	f7ff fc57 	bl	8001ae0 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002236:	f7ff fc53 	bl	8001ae0 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e19b      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002248:	4b2d      	ldr	r3, [pc, #180]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002254:	4b2a      	ldr	r3, [pc, #168]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4927      	ldr	r1, [pc, #156]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]
 8002268:	e015      	b.n	8002296 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800226a:	4b26      	ldr	r3, [pc, #152]	; (8002304 <HAL_RCC_OscConfig+0x270>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002270:	f7ff fc36 	bl	8001ae0 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002278:	f7ff fc32 	bl	8001ae0 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e17a      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228a:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d03a      	beq.n	8002318 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d019      	beq.n	80022de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022aa:	4b17      	ldr	r3, [pc, #92]	; (8002308 <HAL_RCC_OscConfig+0x274>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b0:	f7ff fc16 	bl	8001ae0 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b8:	f7ff fc12 	bl	8001ae0 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e15a      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ca:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022d6:	2001      	movs	r0, #1
 80022d8:	f000 fa9a 	bl	8002810 <RCC_Delay>
 80022dc:	e01c      	b.n	8002318 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022de:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <HAL_RCC_OscConfig+0x274>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e4:	f7ff fbfc 	bl	8001ae0 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ea:	e00f      	b.n	800230c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ec:	f7ff fbf8 	bl	8001ae0 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d908      	bls.n	800230c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e140      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000
 8002304:	42420000 	.word	0x42420000
 8002308:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800230c:	4b9e      	ldr	r3, [pc, #632]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1e9      	bne.n	80022ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80a6 	beq.w	8002472 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800232a:	4b97      	ldr	r3, [pc, #604]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10d      	bne.n	8002352 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002336:	4b94      	ldr	r3, [pc, #592]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	4a93      	ldr	r2, [pc, #588]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 800233c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002340:	61d3      	str	r3, [r2, #28]
 8002342:	4b91      	ldr	r3, [pc, #580]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234e:	2301      	movs	r3, #1
 8002350:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002352:	4b8e      	ldr	r3, [pc, #568]	; (800258c <HAL_RCC_OscConfig+0x4f8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235a:	2b00      	cmp	r3, #0
 800235c:	d118      	bne.n	8002390 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800235e:	4b8b      	ldr	r3, [pc, #556]	; (800258c <HAL_RCC_OscConfig+0x4f8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a8a      	ldr	r2, [pc, #552]	; (800258c <HAL_RCC_OscConfig+0x4f8>)
 8002364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800236a:	f7ff fbb9 	bl	8001ae0 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002372:	f7ff fbb5 	bl	8001ae0 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b64      	cmp	r3, #100	; 0x64
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e0fd      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002384:	4b81      	ldr	r3, [pc, #516]	; (800258c <HAL_RCC_OscConfig+0x4f8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d106      	bne.n	80023a6 <HAL_RCC_OscConfig+0x312>
 8002398:	4b7b      	ldr	r3, [pc, #492]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4a7a      	ldr	r2, [pc, #488]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6213      	str	r3, [r2, #32]
 80023a4:	e02d      	b.n	8002402 <HAL_RCC_OscConfig+0x36e>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x334>
 80023ae:	4b76      	ldr	r3, [pc, #472]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	4a75      	ldr	r2, [pc, #468]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	f023 0301 	bic.w	r3, r3, #1
 80023b8:	6213      	str	r3, [r2, #32]
 80023ba:	4b73      	ldr	r3, [pc, #460]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4a72      	ldr	r2, [pc, #456]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80023c0:	f023 0304 	bic.w	r3, r3, #4
 80023c4:	6213      	str	r3, [r2, #32]
 80023c6:	e01c      	b.n	8002402 <HAL_RCC_OscConfig+0x36e>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	2b05      	cmp	r3, #5
 80023ce:	d10c      	bne.n	80023ea <HAL_RCC_OscConfig+0x356>
 80023d0:	4b6d      	ldr	r3, [pc, #436]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4a6c      	ldr	r2, [pc, #432]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80023d6:	f043 0304 	orr.w	r3, r3, #4
 80023da:	6213      	str	r3, [r2, #32]
 80023dc:	4b6a      	ldr	r3, [pc, #424]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	4a69      	ldr	r2, [pc, #420]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6213      	str	r3, [r2, #32]
 80023e8:	e00b      	b.n	8002402 <HAL_RCC_OscConfig+0x36e>
 80023ea:	4b67      	ldr	r3, [pc, #412]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	4a66      	ldr	r2, [pc, #408]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80023f0:	f023 0301 	bic.w	r3, r3, #1
 80023f4:	6213      	str	r3, [r2, #32]
 80023f6:	4b64      	ldr	r3, [pc, #400]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	4a63      	ldr	r2, [pc, #396]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80023fc:	f023 0304 	bic.w	r3, r3, #4
 8002400:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d015      	beq.n	8002436 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240a:	f7ff fb69 	bl	8001ae0 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002412:	f7ff fb65 	bl	8001ae0 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e0ab      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002428:	4b57      	ldr	r3, [pc, #348]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0ee      	beq.n	8002412 <HAL_RCC_OscConfig+0x37e>
 8002434:	e014      	b.n	8002460 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002436:	f7ff fb53 	bl	8001ae0 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243c:	e00a      	b.n	8002454 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f7ff fb4f 	bl	8001ae0 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	f241 3288 	movw	r2, #5000	; 0x1388
 800244c:	4293      	cmp	r3, r2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e095      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002454:	4b4c      	ldr	r3, [pc, #304]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1ee      	bne.n	800243e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002460:	7dfb      	ldrb	r3, [r7, #23]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d105      	bne.n	8002472 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002466:	4b48      	ldr	r3, [pc, #288]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	4a47      	ldr	r2, [pc, #284]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 800246c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002470:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 8081 	beq.w	800257e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800247c:	4b42      	ldr	r3, [pc, #264]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 030c 	and.w	r3, r3, #12
 8002484:	2b08      	cmp	r3, #8
 8002486:	d061      	beq.n	800254c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	2b02      	cmp	r3, #2
 800248e:	d146      	bne.n	800251e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002490:	4b3f      	ldr	r3, [pc, #252]	; (8002590 <HAL_RCC_OscConfig+0x4fc>)
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002496:	f7ff fb23 	bl	8001ae0 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249e:	f7ff fb1f 	bl	8001ae0 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e067      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b0:	4b35      	ldr	r3, [pc, #212]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1f0      	bne.n	800249e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c4:	d108      	bne.n	80024d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024c6:	4b30      	ldr	r3, [pc, #192]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	492d      	ldr	r1, [pc, #180]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d8:	4b2b      	ldr	r3, [pc, #172]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a19      	ldr	r1, [r3, #32]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	430b      	orrs	r3, r1
 80024ea:	4927      	ldr	r1, [pc, #156]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f0:	4b27      	ldr	r3, [pc, #156]	; (8002590 <HAL_RCC_OscConfig+0x4fc>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f6:	f7ff faf3 	bl	8001ae0 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fe:	f7ff faef 	bl	8001ae0 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e037      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002510:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x46a>
 800251c:	e02f      	b.n	800257e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251e:	4b1c      	ldr	r3, [pc, #112]	; (8002590 <HAL_RCC_OscConfig+0x4fc>)
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7ff fadc 	bl	8001ae0 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252c:	f7ff fad8 	bl	8001ae0 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e020      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253e:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x498>
 800254a:	e018      	b.n	800257e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e013      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	429a      	cmp	r2, r3
 800256a:	d106      	bne.n	800257a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002576:	429a      	cmp	r2, r3
 8002578:	d001      	beq.n	800257e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40021000 	.word	0x40021000
 800258c:	40007000 	.word	0x40007000
 8002590:	42420060 	.word	0x42420060

08002594 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e0d0      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025a8:	4b6a      	ldr	r3, [pc, #424]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d910      	bls.n	80025d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b6:	4b67      	ldr	r3, [pc, #412]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 0207 	bic.w	r2, r3, #7
 80025be:	4965      	ldr	r1, [pc, #404]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b63      	ldr	r3, [pc, #396]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0b8      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d020      	beq.n	8002626 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f0:	4b59      	ldr	r3, [pc, #356]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	4a58      	ldr	r2, [pc, #352]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002608:	4b53      	ldr	r3, [pc, #332]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	4a52      	ldr	r2, [pc, #328]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002612:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002614:	4b50      	ldr	r3, [pc, #320]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	494d      	ldr	r1, [pc, #308]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d040      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d107      	bne.n	800264a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	4b47      	ldr	r3, [pc, #284]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d115      	bne.n	8002672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e07f      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d107      	bne.n	8002662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002652:	4b41      	ldr	r3, [pc, #260]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e073      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002662:	4b3d      	ldr	r3, [pc, #244]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e06b      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002672:	4b39      	ldr	r3, [pc, #228]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f023 0203 	bic.w	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	4936      	ldr	r1, [pc, #216]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002684:	f7ff fa2c 	bl	8001ae0 <HAL_GetTick>
 8002688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268a:	e00a      	b.n	80026a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268c:	f7ff fa28 	bl	8001ae0 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	f241 3288 	movw	r2, #5000	; 0x1388
 800269a:	4293      	cmp	r3, r2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e053      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a2:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 020c 	and.w	r2, r3, #12
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d1eb      	bne.n	800268c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026b4:	4b27      	ldr	r3, [pc, #156]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d210      	bcs.n	80026e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c2:	4b24      	ldr	r3, [pc, #144]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 0207 	bic.w	r2, r3, #7
 80026ca:	4922      	ldr	r1, [pc, #136]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d2:	4b20      	ldr	r3, [pc, #128]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e032      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f0:	4b19      	ldr	r3, [pc, #100]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4916      	ldr	r1, [pc, #88]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d009      	beq.n	8002722 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800270e:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	490e      	ldr	r1, [pc, #56]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002722:	f000 f821 	bl	8002768 <HAL_RCC_GetSysClockFreq>
 8002726:	4602      	mov	r2, r0
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	490a      	ldr	r1, [pc, #40]	; (800275c <HAL_RCC_ClockConfig+0x1c8>)
 8002734:	5ccb      	ldrb	r3, [r1, r3]
 8002736:	fa22 f303 	lsr.w	r3, r2, r3
 800273a:	4a09      	ldr	r2, [pc, #36]	; (8002760 <HAL_RCC_ClockConfig+0x1cc>)
 800273c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HAL_RCC_ClockConfig+0x1d0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff f98a 	bl	8001a5c <HAL_InitTick>

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40022000 	.word	0x40022000
 8002758:	40021000 	.word	0x40021000
 800275c:	08003074 	.word	0x08003074
 8002760:	20000050 	.word	0x20000050
 8002764:	20000054 	.word	0x20000054

08002768 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002768:	b480      	push	{r7}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	2300      	movs	r3, #0
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	2300      	movs	r3, #0
 800277c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002782:	4b1e      	ldr	r3, [pc, #120]	; (80027fc <HAL_RCC_GetSysClockFreq+0x94>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b04      	cmp	r3, #4
 8002790:	d002      	beq.n	8002798 <HAL_RCC_GetSysClockFreq+0x30>
 8002792:	2b08      	cmp	r3, #8
 8002794:	d003      	beq.n	800279e <HAL_RCC_GetSysClockFreq+0x36>
 8002796:	e027      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002798:	4b19      	ldr	r3, [pc, #100]	; (8002800 <HAL_RCC_GetSysClockFreq+0x98>)
 800279a:	613b      	str	r3, [r7, #16]
      break;
 800279c:	e027      	b.n	80027ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	0c9b      	lsrs	r3, r3, #18
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	4a17      	ldr	r2, [pc, #92]	; (8002804 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027a8:	5cd3      	ldrb	r3, [r2, r3]
 80027aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d010      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027b6:	4b11      	ldr	r3, [pc, #68]	; (80027fc <HAL_RCC_GetSysClockFreq+0x94>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	0c5b      	lsrs	r3, r3, #17
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	4a11      	ldr	r2, [pc, #68]	; (8002808 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027c2:	5cd3      	ldrb	r3, [r2, r3]
 80027c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a0d      	ldr	r2, [pc, #52]	; (8002800 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ca:	fb02 f203 	mul.w	r2, r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	e004      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a0c      	ldr	r2, [pc, #48]	; (800280c <HAL_RCC_GetSysClockFreq+0xa4>)
 80027dc:	fb02 f303 	mul.w	r3, r2, r3
 80027e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	613b      	str	r3, [r7, #16]
      break;
 80027e6:	e002      	b.n	80027ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ea:	613b      	str	r3, [r7, #16]
      break;
 80027ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ee:	693b      	ldr	r3, [r7, #16]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	371c      	adds	r7, #28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40021000 	.word	0x40021000
 8002800:	007a1200 	.word	0x007a1200
 8002804:	08003084 	.word	0x08003084
 8002808:	08003094 	.word	0x08003094
 800280c:	003d0900 	.word	0x003d0900

08002810 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002818:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <RCC_Delay+0x34>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a0a      	ldr	r2, [pc, #40]	; (8002848 <RCC_Delay+0x38>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	0a5b      	lsrs	r3, r3, #9
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	fb02 f303 	mul.w	r3, r2, r3
 800282a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800282c:	bf00      	nop
  }
  while (Delay --);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1e5a      	subs	r2, r3, #1
 8002832:	60fa      	str	r2, [r7, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1f9      	bne.n	800282c <RCC_Delay+0x1c>
}
 8002838:	bf00      	nop
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	20000050 	.word	0x20000050
 8002848:	10624dd3 	.word	0x10624dd3

0800284c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e041      	b.n	80028e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d106      	bne.n	8002878 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff f85a 	bl	800192c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3304      	adds	r3, #4
 8002888:	4619      	mov	r1, r3
 800288a:	4610      	mov	r0, r2
 800288c:	f000 fa56 	bl	8002d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d001      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e035      	b.n	8002970 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a16      	ldr	r2, [pc, #88]	; (800297c <HAL_TIM_Base_Start_IT+0x90>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d009      	beq.n	800293a <HAL_TIM_Base_Start_IT+0x4e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800292e:	d004      	beq.n	800293a <HAL_TIM_Base_Start_IT+0x4e>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a12      	ldr	r2, [pc, #72]	; (8002980 <HAL_TIM_Base_Start_IT+0x94>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d111      	bne.n	800295e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2b06      	cmp	r3, #6
 800294a:	d010      	beq.n	800296e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800295c:	e007      	b.n	800296e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f042 0201 	orr.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40012c00 	.word	0x40012c00
 8002980:	40000400 	.word	0x40000400

08002984 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d020      	beq.n	80029e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01b      	beq.n	80029e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0202 	mvn.w	r2, #2
 80029b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f998 	bl	8002d04 <HAL_TIM_IC_CaptureCallback>
 80029d4:	e005      	b.n	80029e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f98b 	bl	8002cf2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f99a 	bl	8002d16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d020      	beq.n	8002a34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d01b      	beq.n	8002a34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 0204 	mvn.w	r2, #4
 8002a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2202      	movs	r2, #2
 8002a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f972 	bl	8002d04 <HAL_TIM_IC_CaptureCallback>
 8002a20:	e005      	b.n	8002a2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f965 	bl	8002cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f974 	bl	8002d16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d020      	beq.n	8002a80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d01b      	beq.n	8002a80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0208 	mvn.w	r2, #8
 8002a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2204      	movs	r2, #4
 8002a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f94c 	bl	8002d04 <HAL_TIM_IC_CaptureCallback>
 8002a6c:	e005      	b.n	8002a7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f93f 	bl	8002cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f94e 	bl	8002d16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d020      	beq.n	8002acc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d01b      	beq.n	8002acc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0210 	mvn.w	r2, #16
 8002a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2208      	movs	r2, #8
 8002aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f926 	bl	8002d04 <HAL_TIM_IC_CaptureCallback>
 8002ab8:	e005      	b.n	8002ac6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f919 	bl	8002cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f928 	bl	8002d16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00c      	beq.n	8002af0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d007      	beq.n	8002af0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f06f 0201 	mvn.w	r2, #1
 8002ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7fe fd6c 	bl	80015c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00c      	beq.n	8002b14 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d007      	beq.n	8002b14 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 fa6f 	bl	8002ff2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00c      	beq.n	8002b38 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d007      	beq.n	8002b38 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f8f8 	bl	8002d28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00c      	beq.n	8002b5c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d007      	beq.n	8002b5c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f06f 0220 	mvn.w	r2, #32
 8002b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fa42 	bl	8002fe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_TIM_ConfigClockSource+0x1c>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e0b4      	b.n	8002cea <HAL_TIM_ConfigClockSource+0x186>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ba6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb8:	d03e      	beq.n	8002c38 <HAL_TIM_ConfigClockSource+0xd4>
 8002bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bbe:	f200 8087 	bhi.w	8002cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc6:	f000 8086 	beq.w	8002cd6 <HAL_TIM_ConfigClockSource+0x172>
 8002bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bce:	d87f      	bhi.n	8002cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd0:	2b70      	cmp	r3, #112	; 0x70
 8002bd2:	d01a      	beq.n	8002c0a <HAL_TIM_ConfigClockSource+0xa6>
 8002bd4:	2b70      	cmp	r3, #112	; 0x70
 8002bd6:	d87b      	bhi.n	8002cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd8:	2b60      	cmp	r3, #96	; 0x60
 8002bda:	d050      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x11a>
 8002bdc:	2b60      	cmp	r3, #96	; 0x60
 8002bde:	d877      	bhi.n	8002cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002be0:	2b50      	cmp	r3, #80	; 0x50
 8002be2:	d03c      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0xfa>
 8002be4:	2b50      	cmp	r3, #80	; 0x50
 8002be6:	d873      	bhi.n	8002cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002be8:	2b40      	cmp	r3, #64	; 0x40
 8002bea:	d058      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0x13a>
 8002bec:	2b40      	cmp	r3, #64	; 0x40
 8002bee:	d86f      	bhi.n	8002cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf0:	2b30      	cmp	r3, #48	; 0x30
 8002bf2:	d064      	beq.n	8002cbe <HAL_TIM_ConfigClockSource+0x15a>
 8002bf4:	2b30      	cmp	r3, #48	; 0x30
 8002bf6:	d86b      	bhi.n	8002cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	d060      	beq.n	8002cbe <HAL_TIM_ConfigClockSource+0x15a>
 8002bfc:	2b20      	cmp	r3, #32
 8002bfe:	d867      	bhi.n	8002cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d05c      	beq.n	8002cbe <HAL_TIM_ConfigClockSource+0x15a>
 8002c04:	2b10      	cmp	r3, #16
 8002c06:	d05a      	beq.n	8002cbe <HAL_TIM_ConfigClockSource+0x15a>
 8002c08:	e062      	b.n	8002cd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	6899      	ldr	r1, [r3, #8]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f000 f96a 	bl	8002ef2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	609a      	str	r2, [r3, #8]
      break;
 8002c36:	e04f      	b.n	8002cd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6818      	ldr	r0, [r3, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	6899      	ldr	r1, [r3, #8]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f000 f953 	bl	8002ef2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c5a:	609a      	str	r2, [r3, #8]
      break;
 8002c5c:	e03c      	b.n	8002cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6859      	ldr	r1, [r3, #4]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f000 f8ca 	bl	8002e04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2150      	movs	r1, #80	; 0x50
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 f921 	bl	8002ebe <TIM_ITRx_SetConfig>
      break;
 8002c7c:	e02c      	b.n	8002cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	6859      	ldr	r1, [r3, #4]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	f000 f8e8 	bl	8002e60 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2160      	movs	r1, #96	; 0x60
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 f911 	bl	8002ebe <TIM_ITRx_SetConfig>
      break;
 8002c9c:	e01c      	b.n	8002cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6818      	ldr	r0, [r3, #0]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	6859      	ldr	r1, [r3, #4]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	461a      	mov	r2, r3
 8002cac:	f000 f8aa 	bl	8002e04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2140      	movs	r1, #64	; 0x40
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 f901 	bl	8002ebe <TIM_ITRx_SetConfig>
      break;
 8002cbc:	e00c      	b.n	8002cd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4610      	mov	r0, r2
 8002cca:	f000 f8f8 	bl	8002ebe <TIM_ITRx_SetConfig>
      break;
 8002cce:	e003      	b.n	8002cd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd4:	e000      	b.n	8002cd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr

08002d16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr

08002d28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr
	...

08002d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a2b      	ldr	r2, [pc, #172]	; (8002dfc <TIM_Base_SetConfig+0xc0>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d007      	beq.n	8002d64 <TIM_Base_SetConfig+0x28>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5a:	d003      	beq.n	8002d64 <TIM_Base_SetConfig+0x28>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a28      	ldr	r2, [pc, #160]	; (8002e00 <TIM_Base_SetConfig+0xc4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d108      	bne.n	8002d76 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a20      	ldr	r2, [pc, #128]	; (8002dfc <TIM_Base_SetConfig+0xc0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d007      	beq.n	8002d8e <TIM_Base_SetConfig+0x52>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d84:	d003      	beq.n	8002d8e <TIM_Base_SetConfig+0x52>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a1d      	ldr	r2, [pc, #116]	; (8002e00 <TIM_Base_SetConfig+0xc4>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d108      	bne.n	8002da0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a0d      	ldr	r2, [pc, #52]	; (8002dfc <TIM_Base_SetConfig+0xc0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d103      	bne.n	8002dd4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	f023 0201 	bic.w	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	611a      	str	r2, [r3, #16]
  }
}
 8002df2:	bf00      	nop
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr
 8002dfc:	40012c00 	.word	0x40012c00
 8002e00:	40000400 	.word	0x40000400

08002e04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	f023 0201 	bic.w	r2, r3, #1
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f023 030a 	bic.w	r3, r3, #10
 8002e40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	621a      	str	r2, [r3, #32]
}
 8002e56:	bf00      	nop
 8002e58:	371c      	adds	r7, #28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr

08002e60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	f023 0210 	bic.w	r2, r3, #16
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	031b      	lsls	r3, r3, #12
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e9c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	621a      	str	r2, [r3, #32]
}
 8002eb4:	bf00      	nop
 8002eb6:	371c      	adds	r7, #28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr

08002ebe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b085      	sub	sp, #20
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f043 0307 	orr.w	r3, r3, #7
 8002ee0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	609a      	str	r2, [r3, #8]
}
 8002ee8:	bf00      	nop
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr

08002ef2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b087      	sub	sp, #28
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607a      	str	r2, [r7, #4]
 8002efe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	021a      	lsls	r2, r3, #8
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	431a      	orrs	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	609a      	str	r2, [r3, #8]
}
 8002f26:	bf00      	nop
 8002f28:	371c      	adds	r7, #28
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d101      	bne.n	8002f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f44:	2302      	movs	r3, #2
 8002f46:	e041      	b.n	8002fcc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a14      	ldr	r2, [pc, #80]	; (8002fd8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d009      	beq.n	8002fa0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f94:	d004      	beq.n	8002fa0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a10      	ldr	r2, [pc, #64]	; (8002fdc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d10c      	bne.n	8002fba <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fa6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40012c00 	.word	0x40012c00
 8002fdc:	40000400 	.word	0x40000400

08002fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr

08002ff2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr

08003004 <__libc_init_array>:
 8003004:	b570      	push	{r4, r5, r6, lr}
 8003006:	2600      	movs	r6, #0
 8003008:	4d0c      	ldr	r5, [pc, #48]	; (800303c <__libc_init_array+0x38>)
 800300a:	4c0d      	ldr	r4, [pc, #52]	; (8003040 <__libc_init_array+0x3c>)
 800300c:	1b64      	subs	r4, r4, r5
 800300e:	10a4      	asrs	r4, r4, #2
 8003010:	42a6      	cmp	r6, r4
 8003012:	d109      	bne.n	8003028 <__libc_init_array+0x24>
 8003014:	f000 f822 	bl	800305c <_init>
 8003018:	2600      	movs	r6, #0
 800301a:	4d0a      	ldr	r5, [pc, #40]	; (8003044 <__libc_init_array+0x40>)
 800301c:	4c0a      	ldr	r4, [pc, #40]	; (8003048 <__libc_init_array+0x44>)
 800301e:	1b64      	subs	r4, r4, r5
 8003020:	10a4      	asrs	r4, r4, #2
 8003022:	42a6      	cmp	r6, r4
 8003024:	d105      	bne.n	8003032 <__libc_init_array+0x2e>
 8003026:	bd70      	pop	{r4, r5, r6, pc}
 8003028:	f855 3b04 	ldr.w	r3, [r5], #4
 800302c:	4798      	blx	r3
 800302e:	3601      	adds	r6, #1
 8003030:	e7ee      	b.n	8003010 <__libc_init_array+0xc>
 8003032:	f855 3b04 	ldr.w	r3, [r5], #4
 8003036:	4798      	blx	r3
 8003038:	3601      	adds	r6, #1
 800303a:	e7f2      	b.n	8003022 <__libc_init_array+0x1e>
 800303c:	08003098 	.word	0x08003098
 8003040:	08003098 	.word	0x08003098
 8003044:	08003098 	.word	0x08003098
 8003048:	0800309c 	.word	0x0800309c

0800304c <memset>:
 800304c:	4603      	mov	r3, r0
 800304e:	4402      	add	r2, r0
 8003050:	4293      	cmp	r3, r2
 8003052:	d100      	bne.n	8003056 <memset+0xa>
 8003054:	4770      	bx	lr
 8003056:	f803 1b01 	strb.w	r1, [r3], #1
 800305a:	e7f9      	b.n	8003050 <memset+0x4>

0800305c <_init>:
 800305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305e:	bf00      	nop
 8003060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003062:	bc08      	pop	{r3}
 8003064:	469e      	mov	lr, r3
 8003066:	4770      	bx	lr

08003068 <_fini>:
 8003068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306a:	bf00      	nop
 800306c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800306e:	bc08      	pop	{r3}
 8003070:	469e      	mov	lr, r3
 8003072:	4770      	bx	lr
