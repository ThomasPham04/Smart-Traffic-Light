
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080031ac  080031ac  000131ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031d0  080031d0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080031d0  080031d0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031d0  080031d0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031d0  080031d0  000131d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031d4  080031d4  000131d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080031d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000005c  08003234  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08003234  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009efc  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c8f  00000000  00000000  00029f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  0002bc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  0002c718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017191  00000000  00000000  0002d100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca23  00000000  00000000  00044291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082973  00000000  00000000  00050cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3627  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ac8  00000000  00000000  000d367c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003194 	.word	0x08003194

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003194 	.word	0x08003194

0800014c <isButton1Pressed>:

int Key3Reg3 = NORMAL_STATE;
int TimerForKey3Press = 200;


int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000078 	.word	0x20000078

08000170 <isButton2Pressed>:

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	2000007c 	.word	0x2000007c

08000194 <isButton3Pressed>:

int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000080 	.word	0x20000080

080001b8 <subKey1Process>:


void subKey1Process(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
	button1_flag = 1;
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <subKey1Process+0x14>)
 80001be:	2201      	movs	r2, #1
 80001c0:	601a      	str	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000078 	.word	0x20000078

080001d0 <getKey1Input>:
void subKey3Process(){
//	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
	button3_flag = 1;
}

void getKey1Input(){
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	Key1Reg0 = Key1Reg1;
 80001d4:	4b1f      	ldr	r3, [pc, #124]	; (8000254 <getKey1Input+0x84>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a1f      	ldr	r2, [pc, #124]	; (8000258 <getKey1Input+0x88>)
 80001da:	6013      	str	r3, [r2, #0]
	Key1Reg1 = Key1Reg2;
 80001dc:	4b1f      	ldr	r3, [pc, #124]	; (800025c <getKey1Input+0x8c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a1c      	ldr	r2, [pc, #112]	; (8000254 <getKey1Input+0x84>)
 80001e2:	6013      	str	r3, [r2, #0]
	Key1Reg2 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80001e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e8:	481d      	ldr	r0, [pc, #116]	; (8000260 <getKey1Input+0x90>)
 80001ea:	f001 ffa7 	bl	800213c <HAL_GPIO_ReadPin>
 80001ee:	4603      	mov	r3, r0
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b1a      	ldr	r3, [pc, #104]	; (800025c <getKey1Input+0x8c>)
 80001f4:	601a      	str	r2, [r3, #0]
	if ((Key1Reg0 == Key1Reg1) && (Key1Reg1 == Key1Reg2)){
 80001f6:	4b18      	ldr	r3, [pc, #96]	; (8000258 <getKey1Input+0x88>)
 80001f8:	681a      	ldr	r2, [r3, #0]
 80001fa:	4b16      	ldr	r3, [pc, #88]	; (8000254 <getKey1Input+0x84>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	429a      	cmp	r2, r3
 8000200:	d125      	bne.n	800024e <getKey1Input+0x7e>
 8000202:	4b14      	ldr	r3, [pc, #80]	; (8000254 <getKey1Input+0x84>)
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	4b15      	ldr	r3, [pc, #84]	; (800025c <getKey1Input+0x8c>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	429a      	cmp	r2, r3
 800020c:	d11f      	bne.n	800024e <getKey1Input+0x7e>
		if (Key1Reg3 != Key1Reg2){//nhan tha
 800020e:	4b15      	ldr	r3, [pc, #84]	; (8000264 <getKey1Input+0x94>)
 8000210:	681a      	ldr	r2, [r3, #0]
 8000212:	4b12      	ldr	r3, [pc, #72]	; (800025c <getKey1Input+0x8c>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	429a      	cmp	r2, r3
 8000218:	d00d      	beq.n	8000236 <getKey1Input+0x66>
			Key1Reg3 = Key1Reg2;
 800021a:	4b10      	ldr	r3, [pc, #64]	; (800025c <getKey1Input+0x8c>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a11      	ldr	r2, [pc, #68]	; (8000264 <getKey1Input+0x94>)
 8000220:	6013      	str	r3, [r2, #0]
			if (Key1Reg2 == PRESSED_STATE){
 8000222:	4b0e      	ldr	r3, [pc, #56]	; (800025c <getKey1Input+0x8c>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d111      	bne.n	800024e <getKey1Input+0x7e>
				//TODO
				subKey1Process();
 800022a:	f7ff ffc5 	bl	80001b8 <subKey1Process>
				TimerForKey1Press = 200;
 800022e:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <getKey1Input+0x98>)
 8000230:	22c8      	movs	r2, #200	; 0xc8
 8000232:	601a      	str	r2, [r3, #0]
			if (TimerForKey1Press == 0){
				Key1Reg3 = NORMAL_STATE;
			}
		}
	}
}
 8000234:	e00b      	b.n	800024e <getKey1Input+0x7e>
			TimerForKey1Press--;
 8000236:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <getKey1Input+0x98>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	3b01      	subs	r3, #1
 800023c:	4a0a      	ldr	r2, [pc, #40]	; (8000268 <getKey1Input+0x98>)
 800023e:	6013      	str	r3, [r2, #0]
			if (TimerForKey1Press == 0){
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <getKey1Input+0x98>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d102      	bne.n	800024e <getKey1Input+0x7e>
				Key1Reg3 = NORMAL_STATE;
 8000248:	4b06      	ldr	r3, [pc, #24]	; (8000264 <getKey1Input+0x94>)
 800024a:	2201      	movs	r2, #1
 800024c:	601a      	str	r2, [r3, #0]
}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000004 	.word	0x20000004
 8000258:	20000000 	.word	0x20000000
 800025c:	20000008 	.word	0x20000008
 8000260:	40010c00 	.word	0x40010c00
 8000264:	2000000c 	.word	0x2000000c
 8000268:	20000010 	.word	0x20000010

0800026c <getKey2Input>:

void getKey2Input(){
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	Key2Reg0 = Key2Reg1;
 8000270:	4b1f      	ldr	r3, [pc, #124]	; (80002f0 <getKey2Input+0x84>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a1f      	ldr	r2, [pc, #124]	; (80002f4 <getKey2Input+0x88>)
 8000276:	6013      	str	r3, [r2, #0]
	Key2Reg1 = Key2Reg2;
 8000278:	4b1f      	ldr	r3, [pc, #124]	; (80002f8 <getKey2Input+0x8c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a1c      	ldr	r2, [pc, #112]	; (80002f0 <getKey2Input+0x84>)
 800027e:	6013      	str	r3, [r2, #0]
	Key2Reg2 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000280:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000284:	481d      	ldr	r0, [pc, #116]	; (80002fc <getKey2Input+0x90>)
 8000286:	f001 ff59 	bl	800213c <HAL_GPIO_ReadPin>
 800028a:	4603      	mov	r3, r0
 800028c:	461a      	mov	r2, r3
 800028e:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <getKey2Input+0x8c>)
 8000290:	601a      	str	r2, [r3, #0]
	if ((Key2Reg0 == Key2Reg1) && (Key2Reg1 == Key2Reg2)){
 8000292:	4b18      	ldr	r3, [pc, #96]	; (80002f4 <getKey2Input+0x88>)
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	4b16      	ldr	r3, [pc, #88]	; (80002f0 <getKey2Input+0x84>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	429a      	cmp	r2, r3
 800029c:	d126      	bne.n	80002ec <getKey2Input+0x80>
 800029e:	4b14      	ldr	r3, [pc, #80]	; (80002f0 <getKey2Input+0x84>)
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <getKey2Input+0x8c>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d120      	bne.n	80002ec <getKey2Input+0x80>
		if (Key2Reg3 != Key2Reg2){
 80002aa:	4b15      	ldr	r3, [pc, #84]	; (8000300 <getKey2Input+0x94>)
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	4b12      	ldr	r3, [pc, #72]	; (80002f8 <getKey2Input+0x8c>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d00e      	beq.n	80002d4 <getKey2Input+0x68>
			Key2Reg3 = Key2Reg2;
 80002b6:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <getKey2Input+0x8c>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a11      	ldr	r2, [pc, #68]	; (8000300 <getKey2Input+0x94>)
 80002bc:	6013      	str	r3, [r2, #0]
			if (Key2Reg2 == PRESSED_STATE){
 80002be:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <getKey2Input+0x8c>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d112      	bne.n	80002ec <getKey2Input+0x80>
				//TODO
				button2_flag = 1;
 80002c6:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <getKey2Input+0x98>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	601a      	str	r2, [r3, #0]
				TimerForKey2Press = 200;
 80002cc:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <getKey2Input+0x9c>)
 80002ce:	22c8      	movs	r2, #200	; 0xc8
 80002d0:	601a      	str	r2, [r3, #0]
			if (TimerForKey2Press == 0){
				Key2Reg3 = NORMAL_STATE;
			}
		}
	}
}
 80002d2:	e00b      	b.n	80002ec <getKey2Input+0x80>
			TimerForKey2Press--;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <getKey2Input+0x9c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	3b01      	subs	r3, #1
 80002da:	4a0b      	ldr	r2, [pc, #44]	; (8000308 <getKey2Input+0x9c>)
 80002dc:	6013      	str	r3, [r2, #0]
			if (TimerForKey2Press == 0){
 80002de:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <getKey2Input+0x9c>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d102      	bne.n	80002ec <getKey2Input+0x80>
				Key2Reg3 = NORMAL_STATE;
 80002e6:	4b06      	ldr	r3, [pc, #24]	; (8000300 <getKey2Input+0x94>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	601a      	str	r2, [r3, #0]
}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000018 	.word	0x20000018
 80002f4:	20000014 	.word	0x20000014
 80002f8:	2000001c 	.word	0x2000001c
 80002fc:	40010c00 	.word	0x40010c00
 8000300:	20000020 	.word	0x20000020
 8000304:	2000007c 	.word	0x2000007c
 8000308:	20000024 	.word	0x20000024

0800030c <getKey3Input>:


void getKey3Input(){
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	Key3Reg0 = Key3Reg1;
 8000310:	4b1f      	ldr	r3, [pc, #124]	; (8000390 <getKey3Input+0x84>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a1f      	ldr	r2, [pc, #124]	; (8000394 <getKey3Input+0x88>)
 8000316:	6013      	str	r3, [r2, #0]
	Key3Reg1 = Key3Reg2;
 8000318:	4b1f      	ldr	r3, [pc, #124]	; (8000398 <getKey3Input+0x8c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a1c      	ldr	r2, [pc, #112]	; (8000390 <getKey3Input+0x84>)
 800031e:	6013      	str	r3, [r2, #0]
	Key3Reg2 = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000320:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000324:	481d      	ldr	r0, [pc, #116]	; (800039c <getKey3Input+0x90>)
 8000326:	f001 ff09 	bl	800213c <HAL_GPIO_ReadPin>
 800032a:	4603      	mov	r3, r0
 800032c:	461a      	mov	r2, r3
 800032e:	4b1a      	ldr	r3, [pc, #104]	; (8000398 <getKey3Input+0x8c>)
 8000330:	601a      	str	r2, [r3, #0]
	if ((Key3Reg0 == Key3Reg1) && (Key3Reg1 == Key3Reg2)){
 8000332:	4b18      	ldr	r3, [pc, #96]	; (8000394 <getKey3Input+0x88>)
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	4b16      	ldr	r3, [pc, #88]	; (8000390 <getKey3Input+0x84>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	429a      	cmp	r2, r3
 800033c:	d126      	bne.n	800038c <getKey3Input+0x80>
 800033e:	4b14      	ldr	r3, [pc, #80]	; (8000390 <getKey3Input+0x84>)
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	4b15      	ldr	r3, [pc, #84]	; (8000398 <getKey3Input+0x8c>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	429a      	cmp	r2, r3
 8000348:	d120      	bne.n	800038c <getKey3Input+0x80>
		if (Key3Reg3 != Key3Reg2){
 800034a:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <getKey3Input+0x94>)
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	4b12      	ldr	r3, [pc, #72]	; (8000398 <getKey3Input+0x8c>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	429a      	cmp	r2, r3
 8000354:	d00e      	beq.n	8000374 <getKey3Input+0x68>
			Key3Reg3 = Key3Reg2;
 8000356:	4b10      	ldr	r3, [pc, #64]	; (8000398 <getKey3Input+0x8c>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a11      	ldr	r2, [pc, #68]	; (80003a0 <getKey3Input+0x94>)
 800035c:	6013      	str	r3, [r2, #0]
			if (Key3Reg2 == PRESSED_STATE){
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <getKey3Input+0x8c>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d112      	bne.n	800038c <getKey3Input+0x80>
				//TODO
				button3_flag = 1;
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <getKey3Input+0x98>)
 8000368:	2201      	movs	r2, #1
 800036a:	601a      	str	r2, [r3, #0]
				TimerForKey3Press = 200;
 800036c:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <getKey3Input+0x9c>)
 800036e:	22c8      	movs	r2, #200	; 0xc8
 8000370:	601a      	str	r2, [r3, #0]
			if (TimerForKey3Press == 0){
				Key3Reg3 = NORMAL_STATE;
			}
		}
	}
}
 8000372:	e00b      	b.n	800038c <getKey3Input+0x80>
			TimerForKey3Press--;
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <getKey3Input+0x9c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	3b01      	subs	r3, #1
 800037a:	4a0b      	ldr	r2, [pc, #44]	; (80003a8 <getKey3Input+0x9c>)
 800037c:	6013      	str	r3, [r2, #0]
			if (TimerForKey3Press == 0){
 800037e:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <getKey3Input+0x9c>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d102      	bne.n	800038c <getKey3Input+0x80>
				Key3Reg3 = NORMAL_STATE;
 8000386:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <getKey3Input+0x94>)
 8000388:	2201      	movs	r2, #1
 800038a:	601a      	str	r2, [r3, #0]
}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}
 8000390:	2000002c 	.word	0x2000002c
 8000394:	20000028 	.word	0x20000028
 8000398:	20000030 	.word	0x20000030
 800039c:	40010c00 	.word	0x40010c00
 80003a0:	20000034 	.word	0x20000034
 80003a4:	20000080 	.word	0x20000080
 80003a8:	20000038 	.word	0x20000038

080003ac <fsm_automatic_run>:

// Counters to replace timers
int counter1 = 0;
int counter3 = 0;

void fsm_automatic_run() {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
    switch (status) {
 80003b0:	4b81      	ldr	r3, [pc, #516]	; (80005b8 <fsm_automatic_run+0x20c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	3b01      	subs	r3, #1
 80003b6:	2b04      	cmp	r3, #4
 80003b8:	f200 815c 	bhi.w	8000674 <fsm_automatic_run+0x2c8>
 80003bc:	a201      	add	r2, pc, #4	; (adr r2, 80003c4 <fsm_automatic_run+0x18>)
 80003be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c2:	bf00      	nop
 80003c4:	080003d9 	.word	0x080003d9
 80003c8:	080003fd 	.word	0x080003fd
 80003cc:	0800048f 	.word	0x0800048f
 80003d0:	08000529 	.word	0x08000529
 80003d4:	080005dd 	.word	0x080005dd
    case INIT:
        // TODO
        setTimeInit();
 80003d8:	f000 fafa 	bl	80009d0 <setTimeInit>
        setLightInit();
 80003dc:	f000 fad4 	bl	8000988 <setLightInit>
        status = RED_GREEN;
 80003e0:	4b75      	ldr	r3, [pc, #468]	; (80005b8 <fsm_automatic_run+0x20c>)
 80003e2:	2202      	movs	r2, #2
 80003e4:	601a      	str	r2, [r3, #0]
        counter3 = 100;  // 100 * 10ms = 1 second
 80003e6:	4b75      	ldr	r3, [pc, #468]	; (80005bc <fsm_automatic_run+0x210>)
 80003e8:	2264      	movs	r2, #100	; 0x64
 80003ea:	601a      	str	r2, [r3, #0]
        counter1 = green_time * 100;  // green_time in seconds
 80003ec:	4b74      	ldr	r3, [pc, #464]	; (80005c0 <fsm_automatic_run+0x214>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2264      	movs	r2, #100	; 0x64
 80003f2:	fb02 f303 	mul.w	r3, r2, r3
 80003f6:	4a73      	ldr	r2, [pc, #460]	; (80005c4 <fsm_automatic_run+0x218>)
 80003f8:	6013      	str	r3, [r2, #0]
        break;
 80003fa:	e144      	b.n	8000686 <fsm_automatic_run+0x2da>

    case RED_GREEN:
        setRed_1();
 80003fc:	f000 fb06 	bl	8000a0c <setRed_1>
        setGreen_2();
 8000400:	f000 fb5c 	bl	8000abc <setGreen_2>

        if (counter3 > 0) counter3--;
 8000404:	4b6d      	ldr	r3, [pc, #436]	; (80005bc <fsm_automatic_run+0x210>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	2b00      	cmp	r3, #0
 800040a:	dd04      	ble.n	8000416 <fsm_automatic_run+0x6a>
 800040c:	4b6b      	ldr	r3, [pc, #428]	; (80005bc <fsm_automatic_run+0x210>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	3b01      	subs	r3, #1
 8000412:	4a6a      	ldr	r2, [pc, #424]	; (80005bc <fsm_automatic_run+0x210>)
 8000414:	6013      	str	r3, [r2, #0]
        if (counter3 == 0) {
 8000416:	4b69      	ldr	r3, [pc, #420]	; (80005bc <fsm_automatic_run+0x210>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d10c      	bne.n	8000438 <fsm_automatic_run+0x8c>
            red_time_temp--;
 800041e:	4b6a      	ldr	r3, [pc, #424]	; (80005c8 <fsm_automatic_run+0x21c>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	3b01      	subs	r3, #1
 8000424:	4a68      	ldr	r2, [pc, #416]	; (80005c8 <fsm_automatic_run+0x21c>)
 8000426:	6013      	str	r3, [r2, #0]
            green_time_temp--;
 8000428:	4b68      	ldr	r3, [pc, #416]	; (80005cc <fsm_automatic_run+0x220>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	3b01      	subs	r3, #1
 800042e:	4a67      	ldr	r2, [pc, #412]	; (80005cc <fsm_automatic_run+0x220>)
 8000430:	6013      	str	r3, [r2, #0]
            counter3 = 100;  // Reset counter3 for the next 1 second
 8000432:	4b62      	ldr	r3, [pc, #392]	; (80005bc <fsm_automatic_run+0x210>)
 8000434:	2264      	movs	r2, #100	; 0x64
 8000436:	601a      	str	r2, [r3, #0]
        }

        if (counter1 > 0) counter1--;
 8000438:	4b62      	ldr	r3, [pc, #392]	; (80005c4 <fsm_automatic_run+0x218>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	dd04      	ble.n	800044a <fsm_automatic_run+0x9e>
 8000440:	4b60      	ldr	r3, [pc, #384]	; (80005c4 <fsm_automatic_run+0x218>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	3b01      	subs	r3, #1
 8000446:	4a5f      	ldr	r2, [pc, #380]	; (80005c4 <fsm_automatic_run+0x218>)
 8000448:	6013      	str	r3, [r2, #0]
        if (counter1 <= 0) {
 800044a:	4b5e      	ldr	r3, [pc, #376]	; (80005c4 <fsm_automatic_run+0x218>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	2b00      	cmp	r3, #0
 8000450:	dc0d      	bgt.n	800046e <fsm_automatic_run+0xc2>
            status = RED_AMBER;
 8000452:	4b59      	ldr	r3, [pc, #356]	; (80005b8 <fsm_automatic_run+0x20c>)
 8000454:	2203      	movs	r2, #3
 8000456:	601a      	str	r2, [r3, #0]
            green_time_temp = green_time;
 8000458:	4b59      	ldr	r3, [pc, #356]	; (80005c0 <fsm_automatic_run+0x214>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a5b      	ldr	r2, [pc, #364]	; (80005cc <fsm_automatic_run+0x220>)
 800045e:	6013      	str	r3, [r2, #0]
            counter1 = amber_time * 100;
 8000460:	4b5b      	ldr	r3, [pc, #364]	; (80005d0 <fsm_automatic_run+0x224>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2264      	movs	r2, #100	; 0x64
 8000466:	fb02 f303 	mul.w	r3, r2, r3
 800046a:	4a56      	ldr	r2, [pc, #344]	; (80005c4 <fsm_automatic_run+0x218>)
 800046c:	6013      	str	r3, [r2, #0]
        }

        if (isButton1Pressed() == 1) {
 800046e:	f7ff fe6d 	bl	800014c <isButton1Pressed>
 8000472:	4603      	mov	r3, r0
 8000474:	2b01      	cmp	r3, #1
 8000476:	f040 80ff 	bne.w	8000678 <fsm_automatic_run+0x2cc>
            setTimeInit();
 800047a:	f000 faa9 	bl	80009d0 <setTimeInit>
            status = MAN_RED;
 800047e:	4b4e      	ldr	r3, [pc, #312]	; (80005b8 <fsm_automatic_run+0x20c>)
 8000480:	220c      	movs	r2, #12
 8000482:	601a      	str	r2, [r3, #0]
            counter1 = 300;  // 3 seconds
 8000484:	4b4f      	ldr	r3, [pc, #316]	; (80005c4 <fsm_automatic_run+0x218>)
 8000486:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800048a:	601a      	str	r2, [r3, #0]
        }
        break;
 800048c:	e0f4      	b.n	8000678 <fsm_automatic_run+0x2cc>

    case RED_AMBER:
        setRed_1();
 800048e:	f000 fabd 	bl	8000a0c <setRed_1>
        setYellow_2();
 8000492:	f000 fb29 	bl	8000ae8 <setYellow_2>

        if (counter3 > 0) counter3--;
 8000496:	4b49      	ldr	r3, [pc, #292]	; (80005bc <fsm_automatic_run+0x210>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	dd04      	ble.n	80004a8 <fsm_automatic_run+0xfc>
 800049e:	4b47      	ldr	r3, [pc, #284]	; (80005bc <fsm_automatic_run+0x210>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	3b01      	subs	r3, #1
 80004a4:	4a45      	ldr	r2, [pc, #276]	; (80005bc <fsm_automatic_run+0x210>)
 80004a6:	6013      	str	r3, [r2, #0]
        if (counter3 == 0) {
 80004a8:	4b44      	ldr	r3, [pc, #272]	; (80005bc <fsm_automatic_run+0x210>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d10c      	bne.n	80004ca <fsm_automatic_run+0x11e>
            red_time_temp--;
 80004b0:	4b45      	ldr	r3, [pc, #276]	; (80005c8 <fsm_automatic_run+0x21c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	3b01      	subs	r3, #1
 80004b6:	4a44      	ldr	r2, [pc, #272]	; (80005c8 <fsm_automatic_run+0x21c>)
 80004b8:	6013      	str	r3, [r2, #0]
            amber_time_temp--;
 80004ba:	4b46      	ldr	r3, [pc, #280]	; (80005d4 <fsm_automatic_run+0x228>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	3b01      	subs	r3, #1
 80004c0:	4a44      	ldr	r2, [pc, #272]	; (80005d4 <fsm_automatic_run+0x228>)
 80004c2:	6013      	str	r3, [r2, #0]
            counter3 = 100;
 80004c4:	4b3d      	ldr	r3, [pc, #244]	; (80005bc <fsm_automatic_run+0x210>)
 80004c6:	2264      	movs	r2, #100	; 0x64
 80004c8:	601a      	str	r2, [r3, #0]
        }

        if (counter1 > 0) counter1--;
 80004ca:	4b3e      	ldr	r3, [pc, #248]	; (80005c4 <fsm_automatic_run+0x218>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	dd04      	ble.n	80004dc <fsm_automatic_run+0x130>
 80004d2:	4b3c      	ldr	r3, [pc, #240]	; (80005c4 <fsm_automatic_run+0x218>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	3b01      	subs	r3, #1
 80004d8:	4a3a      	ldr	r2, [pc, #232]	; (80005c4 <fsm_automatic_run+0x218>)
 80004da:	6013      	str	r3, [r2, #0]
        if (counter1 == 0) {
 80004dc:	4b39      	ldr	r3, [pc, #228]	; (80005c4 <fsm_automatic_run+0x218>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d111      	bne.n	8000508 <fsm_automatic_run+0x15c>
            status = GREEN_RED;
 80004e4:	4b34      	ldr	r3, [pc, #208]	; (80005b8 <fsm_automatic_run+0x20c>)
 80004e6:	2204      	movs	r2, #4
 80004e8:	601a      	str	r2, [r3, #0]
            amber_time_temp = amber_time;
 80004ea:	4b39      	ldr	r3, [pc, #228]	; (80005d0 <fsm_automatic_run+0x224>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a39      	ldr	r2, [pc, #228]	; (80005d4 <fsm_automatic_run+0x228>)
 80004f0:	6013      	str	r3, [r2, #0]
            red_time_temp = red_time;
 80004f2:	4b39      	ldr	r3, [pc, #228]	; (80005d8 <fsm_automatic_run+0x22c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a34      	ldr	r2, [pc, #208]	; (80005c8 <fsm_automatic_run+0x21c>)
 80004f8:	6013      	str	r3, [r2, #0]
            counter1 = green_time * 100;
 80004fa:	4b31      	ldr	r3, [pc, #196]	; (80005c0 <fsm_automatic_run+0x214>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2264      	movs	r2, #100	; 0x64
 8000500:	fb02 f303 	mul.w	r3, r2, r3
 8000504:	4a2f      	ldr	r2, [pc, #188]	; (80005c4 <fsm_automatic_run+0x218>)
 8000506:	6013      	str	r3, [r2, #0]
        }

        if (isButton1Pressed() == 1) {
 8000508:	f7ff fe20 	bl	800014c <isButton1Pressed>
 800050c:	4603      	mov	r3, r0
 800050e:	2b01      	cmp	r3, #1
 8000510:	f040 80b4 	bne.w	800067c <fsm_automatic_run+0x2d0>
            setTimeInit();
 8000514:	f000 fa5c 	bl	80009d0 <setTimeInit>
            status = MAN_RED;
 8000518:	4b27      	ldr	r3, [pc, #156]	; (80005b8 <fsm_automatic_run+0x20c>)
 800051a:	220c      	movs	r2, #12
 800051c:	601a      	str	r2, [r3, #0]
            counter1 = 1000;  // 10 seconds
 800051e:	4b29      	ldr	r3, [pc, #164]	; (80005c4 <fsm_automatic_run+0x218>)
 8000520:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000524:	601a      	str	r2, [r3, #0]
        }
        break;
 8000526:	e0a9      	b.n	800067c <fsm_automatic_run+0x2d0>

    case GREEN_RED:
        setGreen_1();
 8000528:	f000 fa86 	bl	8000a38 <setGreen_1>
        setRed_2();
 800052c:	f000 fab0 	bl	8000a90 <setRed_2>

        if (counter3 > 0) counter3--;
 8000530:	4b22      	ldr	r3, [pc, #136]	; (80005bc <fsm_automatic_run+0x210>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	dd04      	ble.n	8000542 <fsm_automatic_run+0x196>
 8000538:	4b20      	ldr	r3, [pc, #128]	; (80005bc <fsm_automatic_run+0x210>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	3b01      	subs	r3, #1
 800053e:	4a1f      	ldr	r2, [pc, #124]	; (80005bc <fsm_automatic_run+0x210>)
 8000540:	6013      	str	r3, [r2, #0]
        if (counter3 == 0) {
 8000542:	4b1e      	ldr	r3, [pc, #120]	; (80005bc <fsm_automatic_run+0x210>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d10c      	bne.n	8000564 <fsm_automatic_run+0x1b8>
            red_time_temp--;
 800054a:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <fsm_automatic_run+0x21c>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	3b01      	subs	r3, #1
 8000550:	4a1d      	ldr	r2, [pc, #116]	; (80005c8 <fsm_automatic_run+0x21c>)
 8000552:	6013      	str	r3, [r2, #0]
            green_time_temp--;
 8000554:	4b1d      	ldr	r3, [pc, #116]	; (80005cc <fsm_automatic_run+0x220>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	3b01      	subs	r3, #1
 800055a:	4a1c      	ldr	r2, [pc, #112]	; (80005cc <fsm_automatic_run+0x220>)
 800055c:	6013      	str	r3, [r2, #0]
            counter3 = 100;
 800055e:	4b17      	ldr	r3, [pc, #92]	; (80005bc <fsm_automatic_run+0x210>)
 8000560:	2264      	movs	r2, #100	; 0x64
 8000562:	601a      	str	r2, [r3, #0]
        }

        if (counter1 > 0) counter1--;
 8000564:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <fsm_automatic_run+0x218>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	dd04      	ble.n	8000576 <fsm_automatic_run+0x1ca>
 800056c:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <fsm_automatic_run+0x218>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	3b01      	subs	r3, #1
 8000572:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <fsm_automatic_run+0x218>)
 8000574:	6013      	str	r3, [r2, #0]
        if (counter1 == 0) {
 8000576:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <fsm_automatic_run+0x218>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d10d      	bne.n	800059a <fsm_automatic_run+0x1ee>
            status = AMBER_RED;
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <fsm_automatic_run+0x20c>)
 8000580:	2205      	movs	r2, #5
 8000582:	601a      	str	r2, [r3, #0]
            green_time_temp = green_time;
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <fsm_automatic_run+0x214>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a10      	ldr	r2, [pc, #64]	; (80005cc <fsm_automatic_run+0x220>)
 800058a:	6013      	str	r3, [r2, #0]
            counter1 = amber_time * 100;
 800058c:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <fsm_automatic_run+0x224>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2264      	movs	r2, #100	; 0x64
 8000592:	fb02 f303 	mul.w	r3, r2, r3
 8000596:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <fsm_automatic_run+0x218>)
 8000598:	6013      	str	r3, [r2, #0]
        }

        if (isButton1Pressed() == 1) {
 800059a:	f7ff fdd7 	bl	800014c <isButton1Pressed>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d16d      	bne.n	8000680 <fsm_automatic_run+0x2d4>
            setTimeInit();
 80005a4:	f000 fa14 	bl	80009d0 <setTimeInit>
            status = MAN_RED;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <fsm_automatic_run+0x20c>)
 80005aa:	220c      	movs	r2, #12
 80005ac:	601a      	str	r2, [r3, #0]
            counter1 = 1000;  // 10 seconds
 80005ae:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <fsm_automatic_run+0x218>)
 80005b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005b4:	601a      	str	r2, [r3, #0]
        }
        break;
 80005b6:	e063      	b.n	8000680 <fsm_automatic_run+0x2d4>
 80005b8:	2000003c 	.word	0x2000003c
 80005bc:	20000088 	.word	0x20000088
 80005c0:	20000044 	.word	0x20000044
 80005c4:	20000084 	.word	0x20000084
 80005c8:	20000098 	.word	0x20000098
 80005cc:	2000009c 	.word	0x2000009c
 80005d0:	20000048 	.word	0x20000048
 80005d4:	200000a0 	.word	0x200000a0
 80005d8:	20000040 	.word	0x20000040

    case AMBER_RED:
        setYellow_1();
 80005dc:	f000 fa42 	bl	8000a64 <setYellow_1>
        setRed_2();
 80005e0:	f000 fa56 	bl	8000a90 <setRed_2>

        if (counter3 > 0) counter3--;
 80005e4:	4b29      	ldr	r3, [pc, #164]	; (800068c <fsm_automatic_run+0x2e0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	dd04      	ble.n	80005f6 <fsm_automatic_run+0x24a>
 80005ec:	4b27      	ldr	r3, [pc, #156]	; (800068c <fsm_automatic_run+0x2e0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	3b01      	subs	r3, #1
 80005f2:	4a26      	ldr	r2, [pc, #152]	; (800068c <fsm_automatic_run+0x2e0>)
 80005f4:	6013      	str	r3, [r2, #0]
        if (counter3 == 0) {
 80005f6:	4b25      	ldr	r3, [pc, #148]	; (800068c <fsm_automatic_run+0x2e0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d10c      	bne.n	8000618 <fsm_automatic_run+0x26c>
            red_time_temp--;
 80005fe:	4b24      	ldr	r3, [pc, #144]	; (8000690 <fsm_automatic_run+0x2e4>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	3b01      	subs	r3, #1
 8000604:	4a22      	ldr	r2, [pc, #136]	; (8000690 <fsm_automatic_run+0x2e4>)
 8000606:	6013      	str	r3, [r2, #0]
            amber_time_temp--;
 8000608:	4b22      	ldr	r3, [pc, #136]	; (8000694 <fsm_automatic_run+0x2e8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	3b01      	subs	r3, #1
 800060e:	4a21      	ldr	r2, [pc, #132]	; (8000694 <fsm_automatic_run+0x2e8>)
 8000610:	6013      	str	r3, [r2, #0]
            counter3 = 100;
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <fsm_automatic_run+0x2e0>)
 8000614:	2264      	movs	r2, #100	; 0x64
 8000616:	601a      	str	r2, [r3, #0]
        }

        if (counter1 > 0) counter1--;
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <fsm_automatic_run+0x2ec>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	dd04      	ble.n	800062a <fsm_automatic_run+0x27e>
 8000620:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <fsm_automatic_run+0x2ec>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	3b01      	subs	r3, #1
 8000626:	4a1c      	ldr	r2, [pc, #112]	; (8000698 <fsm_automatic_run+0x2ec>)
 8000628:	6013      	str	r3, [r2, #0]
        if (counter1 == 0) {
 800062a:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <fsm_automatic_run+0x2ec>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d111      	bne.n	8000656 <fsm_automatic_run+0x2aa>
            status = RED_GREEN;
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <fsm_automatic_run+0x2f0>)
 8000634:	2202      	movs	r2, #2
 8000636:	601a      	str	r2, [r3, #0]
            red_time_temp = red_time;
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <fsm_automatic_run+0x2f4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a14      	ldr	r2, [pc, #80]	; (8000690 <fsm_automatic_run+0x2e4>)
 800063e:	6013      	str	r3, [r2, #0]
            amber_time_temp = amber_time;
 8000640:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <fsm_automatic_run+0x2f8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a13      	ldr	r2, [pc, #76]	; (8000694 <fsm_automatic_run+0x2e8>)
 8000646:	6013      	str	r3, [r2, #0]
            counter1 = green_time * 100;
 8000648:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <fsm_automatic_run+0x2fc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2264      	movs	r2, #100	; 0x64
 800064e:	fb02 f303 	mul.w	r3, r2, r3
 8000652:	4a11      	ldr	r2, [pc, #68]	; (8000698 <fsm_automatic_run+0x2ec>)
 8000654:	6013      	str	r3, [r2, #0]
        }

        if (isButton1Pressed() == 1) {
 8000656:	f7ff fd79 	bl	800014c <isButton1Pressed>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d111      	bne.n	8000684 <fsm_automatic_run+0x2d8>
            setTimeInit();
 8000660:	f000 f9b6 	bl	80009d0 <setTimeInit>
            status = RED_GREEN;
 8000664:	4b0d      	ldr	r3, [pc, #52]	; (800069c <fsm_automatic_run+0x2f0>)
 8000666:	2202      	movs	r2, #2
 8000668:	601a      	str	r2, [r3, #0]
            counter1 = 1000;  // 10 seconds
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <fsm_automatic_run+0x2ec>)
 800066c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000670:	601a      	str	r2, [r3, #0]
        }
        break;
 8000672:	e007      	b.n	8000684 <fsm_automatic_run+0x2d8>

    default:
        break;
 8000674:	bf00      	nop
 8000676:	e006      	b.n	8000686 <fsm_automatic_run+0x2da>
        break;
 8000678:	bf00      	nop
 800067a:	e004      	b.n	8000686 <fsm_automatic_run+0x2da>
        break;
 800067c:	bf00      	nop
 800067e:	e002      	b.n	8000686 <fsm_automatic_run+0x2da>
        break;
 8000680:	bf00      	nop
 8000682:	e000      	b.n	8000686 <fsm_automatic_run+0x2da>
        break;
 8000684:	bf00      	nop
    }
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000088 	.word	0x20000088
 8000690:	20000098 	.word	0x20000098
 8000694:	200000a0 	.word	0x200000a0
 8000698:	20000084 	.word	0x20000084
 800069c:	2000003c 	.word	0x2000003c
 80006a0:	20000040 	.word	0x20000040
 80006a4:	20000048 	.word	0x20000048
 80006a8:	20000044 	.word	0x20000044

080006ac <fsm_manual_run>:

#include "fsm_manual.h"

int counter_led = 0;

void fsm_manual_run() {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
    switch (status) {
 80006b0:	4b8a      	ldr	r3, [pc, #552]	; (80008dc <fsm_manual_run+0x230>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b0e      	cmp	r3, #14
 80006b6:	f000 80b1 	beq.w	800081c <fsm_manual_run+0x170>
 80006ba:	2b0e      	cmp	r3, #14
 80006bc:	f300 8105 	bgt.w	80008ca <fsm_manual_run+0x21e>
 80006c0:	2b0c      	cmp	r3, #12
 80006c2:	d002      	beq.n	80006ca <fsm_manual_run+0x1e>
 80006c4:	2b0d      	cmp	r3, #13
 80006c6:	d055      	beq.n	8000774 <fsm_manual_run+0xc8>
            status = SET_GREEN;
        }
        break;

    default:
        break;
 80006c8:	e0ff      	b.n	80008ca <fsm_manual_run+0x21e>
        if (counter_led > 0) counter_led--;
 80006ca:	4b85      	ldr	r3, [pc, #532]	; (80008e0 <fsm_manual_run+0x234>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	dd04      	ble.n	80006dc <fsm_manual_run+0x30>
 80006d2:	4b83      	ldr	r3, [pc, #524]	; (80008e0 <fsm_manual_run+0x234>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	4a81      	ldr	r2, [pc, #516]	; (80008e0 <fsm_manual_run+0x234>)
 80006da:	6013      	str	r3, [r2, #0]
        if (counter_led == 0) {
 80006dc:	4b80      	ldr	r3, [pc, #512]	; (80008e0 <fsm_manual_run+0x234>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d104      	bne.n	80006ee <fsm_manual_run+0x42>
            setToggleRed();
 80006e4:	f000 fa16 	bl	8000b14 <setToggleRed>
            counter_led = 50;
 80006e8:	4b7d      	ldr	r3, [pc, #500]	; (80008e0 <fsm_manual_run+0x234>)
 80006ea:	2232      	movs	r2, #50	; 0x32
 80006ec:	601a      	str	r2, [r3, #0]
        if (counter1 > 0) counter1--;
 80006ee:	4b7d      	ldr	r3, [pc, #500]	; (80008e4 <fsm_manual_run+0x238>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	dd04      	ble.n	8000700 <fsm_manual_run+0x54>
 80006f6:	4b7b      	ldr	r3, [pc, #492]	; (80008e4 <fsm_manual_run+0x238>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	4a79      	ldr	r2, [pc, #484]	; (80008e4 <fsm_manual_run+0x238>)
 80006fe:	6013      	str	r3, [r2, #0]
        if (counter1 == 0) {
 8000700:	4b78      	ldr	r3, [pc, #480]	; (80008e4 <fsm_manual_run+0x238>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d106      	bne.n	8000716 <fsm_manual_run+0x6a>
            status = RED_GREEN;
 8000708:	4b74      	ldr	r3, [pc, #464]	; (80008dc <fsm_manual_run+0x230>)
 800070a:	2202      	movs	r2, #2
 800070c:	601a      	str	r2, [r3, #0]
            counter1 = 1000;
 800070e:	4b75      	ldr	r3, [pc, #468]	; (80008e4 <fsm_manual_run+0x238>)
 8000710:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000714:	601a      	str	r2, [r3, #0]
        if (isButton1Pressed() == 1) {
 8000716:	f7ff fd19 	bl	800014c <isButton1Pressed>
 800071a:	4603      	mov	r3, r0
 800071c:	2b01      	cmp	r3, #1
 800071e:	d10a      	bne.n	8000736 <fsm_manual_run+0x8a>
            red_time_temp = red_time;
 8000720:	4b71      	ldr	r3, [pc, #452]	; (80008e8 <fsm_manual_run+0x23c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a71      	ldr	r2, [pc, #452]	; (80008ec <fsm_manual_run+0x240>)
 8000726:	6013      	str	r3, [r2, #0]
            status = MAN_AMBER;
 8000728:	4b6c      	ldr	r3, [pc, #432]	; (80008dc <fsm_manual_run+0x230>)
 800072a:	220d      	movs	r2, #13
 800072c:	601a      	str	r2, [r3, #0]
            counter1 = 1000;
 800072e:	4b6d      	ldr	r3, [pc, #436]	; (80008e4 <fsm_manual_run+0x238>)
 8000730:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000734:	601a      	str	r2, [r3, #0]
        if (isButton2Pressed() == 1) {
 8000736:	f7ff fd1b 	bl	8000170 <isButton2Pressed>
 800073a:	4603      	mov	r3, r0
 800073c:	2b01      	cmp	r3, #1
 800073e:	d10f      	bne.n	8000760 <fsm_manual_run+0xb4>
            red_time_temp++;
 8000740:	4b6a      	ldr	r3, [pc, #424]	; (80008ec <fsm_manual_run+0x240>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	3301      	adds	r3, #1
 8000746:	4a69      	ldr	r2, [pc, #420]	; (80008ec <fsm_manual_run+0x240>)
 8000748:	6013      	str	r3, [r2, #0]
            if (red_time_temp > 99) red_time_temp = 0;
 800074a:	4b68      	ldr	r3, [pc, #416]	; (80008ec <fsm_manual_run+0x240>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b63      	cmp	r3, #99	; 0x63
 8000750:	dd02      	ble.n	8000758 <fsm_manual_run+0xac>
 8000752:	4b66      	ldr	r3, [pc, #408]	; (80008ec <fsm_manual_run+0x240>)
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
            counter1 = 1000;
 8000758:	4b62      	ldr	r3, [pc, #392]	; (80008e4 <fsm_manual_run+0x238>)
 800075a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800075e:	601a      	str	r2, [r3, #0]
        if (isButton3Pressed() == 1) {
 8000760:	f7ff fd18 	bl	8000194 <isButton3Pressed>
 8000764:	4603      	mov	r3, r0
 8000766:	2b01      	cmp	r3, #1
 8000768:	f040 80b1 	bne.w	80008ce <fsm_manual_run+0x222>
            status = SET_RED;
 800076c:	4b5b      	ldr	r3, [pc, #364]	; (80008dc <fsm_manual_run+0x230>)
 800076e:	2215      	movs	r2, #21
 8000770:	601a      	str	r2, [r3, #0]
        break;
 8000772:	e0ac      	b.n	80008ce <fsm_manual_run+0x222>
        if (counter_led > 0) counter_led--;
 8000774:	4b5a      	ldr	r3, [pc, #360]	; (80008e0 <fsm_manual_run+0x234>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	dd04      	ble.n	8000786 <fsm_manual_run+0xda>
 800077c:	4b58      	ldr	r3, [pc, #352]	; (80008e0 <fsm_manual_run+0x234>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	3b01      	subs	r3, #1
 8000782:	4a57      	ldr	r2, [pc, #348]	; (80008e0 <fsm_manual_run+0x234>)
 8000784:	6013      	str	r3, [r2, #0]
        if (counter_led == 0) {
 8000786:	4b56      	ldr	r3, [pc, #344]	; (80008e0 <fsm_manual_run+0x234>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d104      	bne.n	8000798 <fsm_manual_run+0xec>
            setToggleYellow();
 800078e:	f000 fa05 	bl	8000b9c <setToggleYellow>
            counter_led = 50;
 8000792:	4b53      	ldr	r3, [pc, #332]	; (80008e0 <fsm_manual_run+0x234>)
 8000794:	2232      	movs	r2, #50	; 0x32
 8000796:	601a      	str	r2, [r3, #0]
        if (counter1 > 0) counter1--;
 8000798:	4b52      	ldr	r3, [pc, #328]	; (80008e4 <fsm_manual_run+0x238>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	dd04      	ble.n	80007aa <fsm_manual_run+0xfe>
 80007a0:	4b50      	ldr	r3, [pc, #320]	; (80008e4 <fsm_manual_run+0x238>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	3b01      	subs	r3, #1
 80007a6:	4a4f      	ldr	r2, [pc, #316]	; (80008e4 <fsm_manual_run+0x238>)
 80007a8:	6013      	str	r3, [r2, #0]
        if (counter1 == 0) {
 80007aa:	4b4e      	ldr	r3, [pc, #312]	; (80008e4 <fsm_manual_run+0x238>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d106      	bne.n	80007c0 <fsm_manual_run+0x114>
            status = RED_GREEN;
 80007b2:	4b4a      	ldr	r3, [pc, #296]	; (80008dc <fsm_manual_run+0x230>)
 80007b4:	2202      	movs	r2, #2
 80007b6:	601a      	str	r2, [r3, #0]
            counter1 = 1000;
 80007b8:	4b4a      	ldr	r3, [pc, #296]	; (80008e4 <fsm_manual_run+0x238>)
 80007ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007be:	601a      	str	r2, [r3, #0]
        if (isButton1Pressed() == 1) {
 80007c0:	f7ff fcc4 	bl	800014c <isButton1Pressed>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d10a      	bne.n	80007e0 <fsm_manual_run+0x134>
            amber_time_temp = amber_time;
 80007ca:	4b49      	ldr	r3, [pc, #292]	; (80008f0 <fsm_manual_run+0x244>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a49      	ldr	r2, [pc, #292]	; (80008f4 <fsm_manual_run+0x248>)
 80007d0:	6013      	str	r3, [r2, #0]
            status = MAN_GREEN;
 80007d2:	4b42      	ldr	r3, [pc, #264]	; (80008dc <fsm_manual_run+0x230>)
 80007d4:	220e      	movs	r2, #14
 80007d6:	601a      	str	r2, [r3, #0]
            counter1 = 1000;
 80007d8:	4b42      	ldr	r3, [pc, #264]	; (80008e4 <fsm_manual_run+0x238>)
 80007da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007de:	601a      	str	r2, [r3, #0]
        if (isButton2Pressed() == 1) {
 80007e0:	f7ff fcc6 	bl	8000170 <isButton2Pressed>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d10f      	bne.n	800080a <fsm_manual_run+0x15e>
            amber_time_temp++;
 80007ea:	4b42      	ldr	r3, [pc, #264]	; (80008f4 <fsm_manual_run+0x248>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	3301      	adds	r3, #1
 80007f0:	4a40      	ldr	r2, [pc, #256]	; (80008f4 <fsm_manual_run+0x248>)
 80007f2:	6013      	str	r3, [r2, #0]
            if (amber_time_temp > 99) amber_time_temp = 0;
 80007f4:	4b3f      	ldr	r3, [pc, #252]	; (80008f4 <fsm_manual_run+0x248>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b63      	cmp	r3, #99	; 0x63
 80007fa:	dd02      	ble.n	8000802 <fsm_manual_run+0x156>
 80007fc:	4b3d      	ldr	r3, [pc, #244]	; (80008f4 <fsm_manual_run+0x248>)
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
            counter1 = 1000;
 8000802:	4b38      	ldr	r3, [pc, #224]	; (80008e4 <fsm_manual_run+0x238>)
 8000804:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000808:	601a      	str	r2, [r3, #0]
        if (isButton3Pressed() == 1) {
 800080a:	f7ff fcc3 	bl	8000194 <isButton3Pressed>
 800080e:	4603      	mov	r3, r0
 8000810:	2b01      	cmp	r3, #1
 8000812:	d15e      	bne.n	80008d2 <fsm_manual_run+0x226>
            status = SET_AMBER;
 8000814:	4b31      	ldr	r3, [pc, #196]	; (80008dc <fsm_manual_run+0x230>)
 8000816:	2216      	movs	r2, #22
 8000818:	601a      	str	r2, [r3, #0]
        break;
 800081a:	e05a      	b.n	80008d2 <fsm_manual_run+0x226>
        if (counter_led > 0) counter_led--;
 800081c:	4b30      	ldr	r3, [pc, #192]	; (80008e0 <fsm_manual_run+0x234>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	dd04      	ble.n	800082e <fsm_manual_run+0x182>
 8000824:	4b2e      	ldr	r3, [pc, #184]	; (80008e0 <fsm_manual_run+0x234>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	3b01      	subs	r3, #1
 800082a:	4a2d      	ldr	r2, [pc, #180]	; (80008e0 <fsm_manual_run+0x234>)
 800082c:	6013      	str	r3, [r2, #0]
        if (counter_led == 0) {
 800082e:	4b2c      	ldr	r3, [pc, #176]	; (80008e0 <fsm_manual_run+0x234>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d104      	bne.n	8000840 <fsm_manual_run+0x194>
            setToggleGreen();
 8000836:	f000 f98f 	bl	8000b58 <setToggleGreen>
            counter_led = 50;
 800083a:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <fsm_manual_run+0x234>)
 800083c:	2232      	movs	r2, #50	; 0x32
 800083e:	601a      	str	r2, [r3, #0]
        if (counter1 > 0) counter1--;
 8000840:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <fsm_manual_run+0x238>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	dd04      	ble.n	8000852 <fsm_manual_run+0x1a6>
 8000848:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <fsm_manual_run+0x238>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	3b01      	subs	r3, #1
 800084e:	4a25      	ldr	r2, [pc, #148]	; (80008e4 <fsm_manual_run+0x238>)
 8000850:	6013      	str	r3, [r2, #0]
        if (counter1 == 0) {
 8000852:	4b24      	ldr	r3, [pc, #144]	; (80008e4 <fsm_manual_run+0x238>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d10a      	bne.n	8000870 <fsm_manual_run+0x1c4>
            green_time_temp = green_time;
 800085a:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <fsm_manual_run+0x24c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a27      	ldr	r2, [pc, #156]	; (80008fc <fsm_manual_run+0x250>)
 8000860:	6013      	str	r3, [r2, #0]
            status = RED_GREEN;
 8000862:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <fsm_manual_run+0x230>)
 8000864:	2202      	movs	r2, #2
 8000866:	601a      	str	r2, [r3, #0]
            counter1 = 1000;
 8000868:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <fsm_manual_run+0x238>)
 800086a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800086e:	601a      	str	r2, [r3, #0]
        if (isButton1Pressed() == 1) {
 8000870:	f7ff fc6c 	bl	800014c <isButton1Pressed>
 8000874:	4603      	mov	r3, r0
 8000876:	2b01      	cmp	r3, #1
 8000878:	d109      	bne.n	800088e <fsm_manual_run+0x1e2>
            green_time_temp = green_time;
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <fsm_manual_run+0x24c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a1f      	ldr	r2, [pc, #124]	; (80008fc <fsm_manual_run+0x250>)
 8000880:	6013      	str	r3, [r2, #0]
            status = INIT;
 8000882:	4b16      	ldr	r3, [pc, #88]	; (80008dc <fsm_manual_run+0x230>)
 8000884:	2201      	movs	r2, #1
 8000886:	601a      	str	r2, [r3, #0]
            counter1 = 100;
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <fsm_manual_run+0x238>)
 800088a:	2264      	movs	r2, #100	; 0x64
 800088c:	601a      	str	r2, [r3, #0]
        if (isButton2Pressed() == 1) {
 800088e:	f7ff fc6f 	bl	8000170 <isButton2Pressed>
 8000892:	4603      	mov	r3, r0
 8000894:	2b01      	cmp	r3, #1
 8000896:	d10f      	bne.n	80008b8 <fsm_manual_run+0x20c>
            green_time_temp++;
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <fsm_manual_run+0x250>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	4a17      	ldr	r2, [pc, #92]	; (80008fc <fsm_manual_run+0x250>)
 80008a0:	6013      	str	r3, [r2, #0]
            if (green_time_temp > 99) green_time_temp = 0;
 80008a2:	4b16      	ldr	r3, [pc, #88]	; (80008fc <fsm_manual_run+0x250>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b63      	cmp	r3, #99	; 0x63
 80008a8:	dd02      	ble.n	80008b0 <fsm_manual_run+0x204>
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <fsm_manual_run+0x250>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
            counter1 = 1000;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <fsm_manual_run+0x238>)
 80008b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008b6:	601a      	str	r2, [r3, #0]
        if (isButton3Pressed() == 1) {
 80008b8:	f7ff fc6c 	bl	8000194 <isButton3Pressed>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d109      	bne.n	80008d6 <fsm_manual_run+0x22a>
            status = SET_GREEN;
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <fsm_manual_run+0x230>)
 80008c4:	2217      	movs	r2, #23
 80008c6:	601a      	str	r2, [r3, #0]
        break;
 80008c8:	e005      	b.n	80008d6 <fsm_manual_run+0x22a>
        break;
 80008ca:	bf00      	nop
 80008cc:	e004      	b.n	80008d8 <fsm_manual_run+0x22c>
        break;
 80008ce:	bf00      	nop
 80008d0:	e002      	b.n	80008d8 <fsm_manual_run+0x22c>
        break;
 80008d2:	bf00      	nop
 80008d4:	e000      	b.n	80008d8 <fsm_manual_run+0x22c>
        break;
 80008d6:	bf00      	nop
    }
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	2000003c 	.word	0x2000003c
 80008e0:	2000008c 	.word	0x2000008c
 80008e4:	20000084 	.word	0x20000084
 80008e8:	20000040 	.word	0x20000040
 80008ec:	20000098 	.word	0x20000098
 80008f0:	20000048 	.word	0x20000048
 80008f4:	200000a0 	.word	0x200000a0
 80008f8:	20000044 	.word	0x20000044
 80008fc:	2000009c 	.word	0x2000009c

08000900 <fsm_setting_run>:
 */


#include "fsm_setting.h"

void fsm_setting_run(){
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
//	int diff = 0;
	switch (status) {
 8000904:	4b19      	ldr	r3, [pc, #100]	; (800096c <fsm_setting_run+0x6c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b17      	cmp	r3, #23
 800090a:	d01e      	beq.n	800094a <fsm_setting_run+0x4a>
 800090c:	2b17      	cmp	r3, #23
 800090e:	dc28      	bgt.n	8000962 <fsm_setting_run+0x62>
 8000910:	2b15      	cmp	r3, #21
 8000912:	d002      	beq.n	800091a <fsm_setting_run+0x1a>
 8000914:	2b16      	cmp	r3, #22
 8000916:	d00c      	beq.n	8000932 <fsm_setting_run+0x32>
//			red_time += diff;
//			red_time_temp += diff;
			status = MAN_GREEN;
			break;
		default:
			break;
 8000918:	e023      	b.n	8000962 <fsm_setting_run+0x62>
			red_time = red_time_temp;
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <fsm_setting_run+0x70>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a15      	ldr	r2, [pc, #84]	; (8000974 <fsm_setting_run+0x74>)
 8000920:	6013      	str	r3, [r2, #0]
			red_time_temp = red_time;
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <fsm_setting_run+0x74>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <fsm_setting_run+0x70>)
 8000928:	6013      	str	r3, [r2, #0]
			status = MAN_RED;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <fsm_setting_run+0x6c>)
 800092c:	220c      	movs	r2, #12
 800092e:	601a      	str	r2, [r3, #0]
			break;
 8000930:	e018      	b.n	8000964 <fsm_setting_run+0x64>
			amber_time = amber_time_temp;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <fsm_setting_run+0x78>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a11      	ldr	r2, [pc, #68]	; (800097c <fsm_setting_run+0x7c>)
 8000938:	6013      	str	r3, [r2, #0]
			amber_time_temp = amber_time;
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <fsm_setting_run+0x7c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <fsm_setting_run+0x78>)
 8000940:	6013      	str	r3, [r2, #0]
			status = MAN_AMBER;
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <fsm_setting_run+0x6c>)
 8000944:	220d      	movs	r2, #13
 8000946:	601a      	str	r2, [r3, #0]
			break;
 8000948:	e00c      	b.n	8000964 <fsm_setting_run+0x64>
			green_time = green_time_temp;
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <fsm_setting_run+0x80>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a0d      	ldr	r2, [pc, #52]	; (8000984 <fsm_setting_run+0x84>)
 8000950:	6013      	str	r3, [r2, #0]
			green_time_temp = green_time;
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <fsm_setting_run+0x84>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <fsm_setting_run+0x80>)
 8000958:	6013      	str	r3, [r2, #0]
			status = MAN_GREEN;
 800095a:	4b04      	ldr	r3, [pc, #16]	; (800096c <fsm_setting_run+0x6c>)
 800095c:	220e      	movs	r2, #14
 800095e:	601a      	str	r2, [r3, #0]
			break;
 8000960:	e000      	b.n	8000964 <fsm_setting_run+0x64>
			break;
 8000962:	bf00      	nop
	}
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	2000003c 	.word	0x2000003c
 8000970:	20000098 	.word	0x20000098
 8000974:	20000040 	.word	0x20000040
 8000978:	200000a0 	.word	0x200000a0
 800097c:	20000048 	.word	0x20000048
 8000980:	2000009c 	.word	0x2000009c
 8000984:	20000044 	.word	0x20000044

08000988 <setLightInit>:
 *      Author: Admin
 */

#include "light_traffic.h"

void setLightInit(){
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2101      	movs	r1, #1
 8000990:	480e      	ldr	r0, [pc, #56]	; (80009cc <setLightInit+0x44>)
 8000992:	f001 fbea 	bl	800216a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GREEN_GPIO_Port, LED_1_GREEN_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2102      	movs	r1, #2
 800099a:	480c      	ldr	r0, [pc, #48]	; (80009cc <setLightInit+0x44>)
 800099c:	f001 fbe5 	bl	800216a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_YELLOW_GPIO_Port, LED_1_YELLOW_Pin, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2104      	movs	r1, #4
 80009a4:	4809      	ldr	r0, [pc, #36]	; (80009cc <setLightInit+0x44>)
 80009a6:	f001 fbe0 	bl	800216a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_2_RED_GPIO_Port, LED_2_RED_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2108      	movs	r1, #8
 80009ae:	4807      	ldr	r0, [pc, #28]	; (80009cc <setLightInit+0x44>)
 80009b0:	f001 fbdb 	bl	800216a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2110      	movs	r1, #16
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <setLightInit+0x44>)
 80009ba:	f001 fbd6 	bl	800216a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_YELLOW_GPIO_Port, LED_2_YELLOW_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2120      	movs	r1, #32
 80009c2:	4802      	ldr	r0, [pc, #8]	; (80009cc <setLightInit+0x44>)
 80009c4:	f001 fbd1 	bl	800216a <HAL_GPIO_WritePin>
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40010c00 	.word	0x40010c00

080009d0 <setTimeInit>:

void setTimeInit(){
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
	red_time_temp = red_time;
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <setTimeInit+0x24>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <setTimeInit+0x28>)
 80009da:	6013      	str	r3, [r2, #0]
	green_time_temp = green_time;
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <setTimeInit+0x2c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <setTimeInit+0x30>)
 80009e2:	6013      	str	r3, [r2, #0]
	amber_time_temp = amber_time;
 80009e4:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <setTimeInit+0x34>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <setTimeInit+0x38>)
 80009ea:	6013      	str	r3, [r2, #0]
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	20000040 	.word	0x20000040
 80009f8:	20000098 	.word	0x20000098
 80009fc:	20000044 	.word	0x20000044
 8000a00:	2000009c 	.word	0x2000009c
 8000a04:	20000048 	.word	0x20000048
 8000a08:	200000a0 	.word	0x200000a0

08000a0c <setRed_1>:
//	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
//}

void setRed_1(){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, GPIO_PIN_SET);
 8000a10:	2201      	movs	r2, #1
 8000a12:	2101      	movs	r1, #1
 8000a14:	4807      	ldr	r0, [pc, #28]	; (8000a34 <setRed_1+0x28>)
 8000a16:	f001 fba8 	bl	800216a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GREEN_GPIO_Port, LED_1_GREEN_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <setRed_1+0x28>)
 8000a20:	f001 fba3 	bl	800216a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_YELLOW_GPIO_Port, LED_1_YELLOW_Pin, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2104      	movs	r1, #4
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <setRed_1+0x28>)
 8000a2a:	f001 fb9e 	bl	800216a <HAL_GPIO_WritePin>
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40010c00 	.word	0x40010c00

08000a38 <setGreen_1>:

void setGreen_1(){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, GPIO_PIN_RESET);;
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2101      	movs	r1, #1
 8000a40:	4807      	ldr	r0, [pc, #28]	; (8000a60 <setGreen_1+0x28>)
 8000a42:	f001 fb92 	bl	800216a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GREEN_GPIO_Port, LED_1_GREEN_Pin, GPIO_PIN_SET);
 8000a46:	2201      	movs	r2, #1
 8000a48:	2102      	movs	r1, #2
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <setGreen_1+0x28>)
 8000a4c:	f001 fb8d 	bl	800216a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_YELLOW_GPIO_Port, LED_1_YELLOW_Pin, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2104      	movs	r1, #4
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <setGreen_1+0x28>)
 8000a56:	f001 fb88 	bl	800216a <HAL_GPIO_WritePin>
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40010c00 	.word	0x40010c00

08000a64 <setYellow_1>:

void setYellow_1(){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	4807      	ldr	r0, [pc, #28]	; (8000a8c <setYellow_1+0x28>)
 8000a6e:	f001 fb7c 	bl	800216a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GREEN_GPIO_Port, LED_1_GREEN_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2102      	movs	r1, #2
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <setYellow_1+0x28>)
 8000a78:	f001 fb77 	bl	800216a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_YELLOW_GPIO_Port, LED_1_YELLOW_Pin, GPIO_PIN_SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2104      	movs	r1, #4
 8000a80:	4802      	ldr	r0, [pc, #8]	; (8000a8c <setYellow_1+0x28>)
 8000a82:	f001 fb72 	bl	800216a <HAL_GPIO_WritePin>
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40010c00 	.word	0x40010c00

08000a90 <setRed_2>:


void setRed_2(){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_2_RED_GPIO_Port, LED_2_RED_Pin, GPIO_PIN_SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	2108      	movs	r1, #8
 8000a98:	4807      	ldr	r0, [pc, #28]	; (8000ab8 <setRed_2+0x28>)
 8000a9a:	f001 fb66 	bl	800216a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2110      	movs	r1, #16
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <setRed_2+0x28>)
 8000aa4:	f001 fb61 	bl	800216a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_YELLOW_GPIO_Port, LED_2_YELLOW_Pin, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2120      	movs	r1, #32
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <setRed_2+0x28>)
 8000aae:	f001 fb5c 	bl	800216a <HAL_GPIO_WritePin>
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40010c00 	.word	0x40010c00

08000abc <setGreen_2>:

void setGreen_2(){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_2_RED_GPIO_Port, LED_2_RED_Pin, GPIO_PIN_RESET);;
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2108      	movs	r1, #8
 8000ac4:	4807      	ldr	r0, [pc, #28]	; (8000ae4 <setGreen_2+0x28>)
 8000ac6:	f001 fb50 	bl	800216a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, GPIO_PIN_SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	2110      	movs	r1, #16
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <setGreen_2+0x28>)
 8000ad0:	f001 fb4b 	bl	800216a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_YELLOW_GPIO_Port, LED_2_YELLOW_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2120      	movs	r1, #32
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <setGreen_2+0x28>)
 8000ada:	f001 fb46 	bl	800216a <HAL_GPIO_WritePin>
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40010c00 	.word	0x40010c00

08000ae8 <setYellow_2>:

void setYellow_2(){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_2_RED_GPIO_Port, LED_2_RED_Pin, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2108      	movs	r1, #8
 8000af0:	4807      	ldr	r0, [pc, #28]	; (8000b10 <setYellow_2+0x28>)
 8000af2:	f001 fb3a 	bl	800216a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2110      	movs	r1, #16
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <setYellow_2+0x28>)
 8000afc:	f001 fb35 	bl	800216a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_YELLOW_GPIO_Port, LED_2_YELLOW_Pin, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2120      	movs	r1, #32
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <setYellow_2+0x28>)
 8000b06:	f001 fb30 	bl	800216a <HAL_GPIO_WritePin>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40010c00 	.word	0x40010c00

08000b14 <setToggleRed>:

void setToggleRed(){//2HZ
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_1_GREEN_GPIO_Port, LED_1_GREEN_Pin, GPIO_PIN_RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	480d      	ldr	r0, [pc, #52]	; (8000b54 <setToggleRed+0x40>)
 8000b1e:	f001 fb24 	bl	800216a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_1_YELLOW_GPIO_Port, LED_1_YELLOW_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2104      	movs	r1, #4
 8000b26:	480b      	ldr	r0, [pc, #44]	; (8000b54 <setToggleRed+0x40>)
 8000b28:	f001 fb1f 	bl	800216a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2110      	movs	r1, #16
 8000b30:	4808      	ldr	r0, [pc, #32]	; (8000b54 <setToggleRed+0x40>)
 8000b32:	f001 fb1a 	bl	800216a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_2_YELLOW_GPIO_Port, LED_2_YELLOW_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2120      	movs	r1, #32
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <setToggleRed+0x40>)
 8000b3c:	f001 fb15 	bl	800216a <HAL_GPIO_WritePin>

    // Toggle only the red LEDs on both sets
    HAL_GPIO_TogglePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin);
 8000b40:	2101      	movs	r1, #1
 8000b42:	4804      	ldr	r0, [pc, #16]	; (8000b54 <setToggleRed+0x40>)
 8000b44:	f001 fb29 	bl	800219a <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(LED_2_RED_GPIO_Port, LED_2_RED_Pin);
 8000b48:	2108      	movs	r1, #8
 8000b4a:	4802      	ldr	r0, [pc, #8]	; (8000b54 <setToggleRed+0x40>)
 8000b4c:	f001 fb25 	bl	800219a <HAL_GPIO_TogglePin>

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40010c00 	.word	0x40010c00

08000b58 <setToggleGreen>:

void setToggleGreen(){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2101      	movs	r1, #1
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <setToggleGreen+0x40>)
 8000b62:	f001 fb02 	bl	800216a <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED_1_GREEN_GPIO_Port, LED_1_GREEN_Pin);
 8000b66:	2102      	movs	r1, #2
 8000b68:	480b      	ldr	r0, [pc, #44]	; (8000b98 <setToggleGreen+0x40>)
 8000b6a:	f001 fb16 	bl	800219a <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_1_YELLOW_GPIO_Port, LED_1_YELLOW_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2104      	movs	r1, #4
 8000b72:	4809      	ldr	r0, [pc, #36]	; (8000b98 <setToggleGreen+0x40>)
 8000b74:	f001 faf9 	bl	800216a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_2_RED_GPIO_Port, LED_2_RED_Pin, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2108      	movs	r1, #8
 8000b7c:	4806      	ldr	r0, [pc, #24]	; (8000b98 <setToggleGreen+0x40>)
 8000b7e:	f001 faf4 	bl	800216a <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin);
 8000b82:	2110      	movs	r1, #16
 8000b84:	4804      	ldr	r0, [pc, #16]	; (8000b98 <setToggleGreen+0x40>)
 8000b86:	f001 fb08 	bl	800219a <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_2_YELLOW_GPIO_Port, LED_2_YELLOW_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2120      	movs	r1, #32
 8000b8e:	4802      	ldr	r0, [pc, #8]	; (8000b98 <setToggleGreen+0x40>)
 8000b90:	f001 faeb 	bl	800216a <HAL_GPIO_WritePin>
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40010c00 	.word	0x40010c00

08000b9c <setToggleYellow>:

void setToggleYellow(){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	480d      	ldr	r0, [pc, #52]	; (8000bdc <setToggleYellow+0x40>)
 8000ba6:	f001 fae0 	bl	800216a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GREEN_GPIO_Port, LED_1_GREEN_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2102      	movs	r1, #2
 8000bae:	480b      	ldr	r0, [pc, #44]	; (8000bdc <setToggleYellow+0x40>)
 8000bb0:	f001 fadb 	bl	800216a <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED_1_YELLOW_GPIO_Port, LED_1_YELLOW_Pin);
 8000bb4:	2104      	movs	r1, #4
 8000bb6:	4809      	ldr	r0, [pc, #36]	; (8000bdc <setToggleYellow+0x40>)
 8000bb8:	f001 faef 	bl	800219a <HAL_GPIO_TogglePin>

	HAL_GPIO_WritePin(LED_2_RED_GPIO_Port, LED_2_RED_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2108      	movs	r1, #8
 8000bc0:	4806      	ldr	r0, [pc, #24]	; (8000bdc <setToggleYellow+0x40>)
 8000bc2:	f001 fad2 	bl	800216a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2110      	movs	r1, #16
 8000bca:	4804      	ldr	r0, [pc, #16]	; (8000bdc <setToggleYellow+0x40>)
 8000bcc:	f001 facd 	bl	800216a <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED_2_YELLOW_GPIO_Port, LED_2_YELLOW_Pin);
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	4802      	ldr	r0, [pc, #8]	; (8000bdc <setToggleYellow+0x40>)
 8000bd4:	f001 fae1 	bl	800219a <HAL_GPIO_TogglePin>
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40010c00 	.word	0x40010c00

08000be0 <get7SEG1Value>:

static int get7SEG1Value() {
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
	switch (status) {
 8000be4:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <get7SEG1Value+0x80>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	3b02      	subs	r3, #2
 8000bea:	2b0c      	cmp	r3, #12
 8000bec:	d831      	bhi.n	8000c52 <get7SEG1Value+0x72>
 8000bee:	a201      	add	r2, pc, #4	; (adr r2, 8000bf4 <get7SEG1Value+0x14>)
 8000bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf4:	08000c29 	.word	0x08000c29
 8000bf8:	08000c2f 	.word	0x08000c2f
 8000bfc:	08000c35 	.word	0x08000c35
 8000c00:	08000c3b 	.word	0x08000c3b
 8000c04:	08000c53 	.word	0x08000c53
 8000c08:	08000c53 	.word	0x08000c53
 8000c0c:	08000c53 	.word	0x08000c53
 8000c10:	08000c53 	.word	0x08000c53
 8000c14:	08000c53 	.word	0x08000c53
 8000c18:	08000c53 	.word	0x08000c53
 8000c1c:	08000c41 	.word	0x08000c41
 8000c20:	08000c4d 	.word	0x08000c4d
 8000c24:	08000c47 	.word	0x08000c47
		case RED_GREEN:
			return red_time_temp;
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <get7SEG1Value+0x84>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	e013      	b.n	8000c56 <get7SEG1Value+0x76>
		case RED_AMBER:
			return red_time_temp;
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <get7SEG1Value+0x84>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	e010      	b.n	8000c56 <get7SEG1Value+0x76>
		case GREEN_RED:
			return green_time_temp;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <get7SEG1Value+0x88>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	e00d      	b.n	8000c56 <get7SEG1Value+0x76>
		case AMBER_RED:
			return amber_time_temp;
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <get7SEG1Value+0x8c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	e00a      	b.n	8000c56 <get7SEG1Value+0x76>
		case MAN_RED:
			return red_time_temp;
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <get7SEG1Value+0x84>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	e007      	b.n	8000c56 <get7SEG1Value+0x76>
		case MAN_GREEN:
			return green_time_temp;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <get7SEG1Value+0x88>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	e004      	b.n	8000c56 <get7SEG1Value+0x76>
		case MAN_AMBER:
			return amber_time_temp;
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <get7SEG1Value+0x8c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	e001      	b.n	8000c56 <get7SEG1Value+0x76>
		default:
			break;
 8000c52:	bf00      	nop
	}
	return 0;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	2000003c 	.word	0x2000003c
 8000c64:	20000098 	.word	0x20000098
 8000c68:	2000009c 	.word	0x2000009c
 8000c6c:	200000a0 	.word	0x200000a0

08000c70 <get7SEG2Value>:
static int get7SEG2Value() {
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
	switch (status) {
 8000c74:	4b1e      	ldr	r3, [pc, #120]	; (8000cf0 <get7SEG2Value+0x80>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	3b02      	subs	r3, #2
 8000c7a:	2b0c      	cmp	r3, #12
 8000c7c:	d831      	bhi.n	8000ce2 <get7SEG2Value+0x72>
 8000c7e:	a201      	add	r2, pc, #4	; (adr r2, 8000c84 <get7SEG2Value+0x14>)
 8000c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c84:	08000cb9 	.word	0x08000cb9
 8000c88:	08000cbf 	.word	0x08000cbf
 8000c8c:	08000cc5 	.word	0x08000cc5
 8000c90:	08000ccb 	.word	0x08000ccb
 8000c94:	08000ce3 	.word	0x08000ce3
 8000c98:	08000ce3 	.word	0x08000ce3
 8000c9c:	08000ce3 	.word	0x08000ce3
 8000ca0:	08000ce3 	.word	0x08000ce3
 8000ca4:	08000ce3 	.word	0x08000ce3
 8000ca8:	08000ce3 	.word	0x08000ce3
 8000cac:	08000cd1 	.word	0x08000cd1
 8000cb0:	08000cdd 	.word	0x08000cdd
 8000cb4:	08000cd7 	.word	0x08000cd7
		case RED_GREEN:
			return green_time_temp;
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <get7SEG2Value+0x84>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	e013      	b.n	8000ce6 <get7SEG2Value+0x76>
		case RED_AMBER:
			return amber_time_temp;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <get7SEG2Value+0x88>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	e010      	b.n	8000ce6 <get7SEG2Value+0x76>
		case GREEN_RED:
			return red_time_temp;
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <get7SEG2Value+0x8c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	e00d      	b.n	8000ce6 <get7SEG2Value+0x76>
		case AMBER_RED:
			return red_time_temp;
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <get7SEG2Value+0x8c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	e00a      	b.n	8000ce6 <get7SEG2Value+0x76>
		case MAN_RED:
			return red_time_temp;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <get7SEG2Value+0x8c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	e007      	b.n	8000ce6 <get7SEG2Value+0x76>
		case MAN_GREEN:
			return green_time_temp;
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <get7SEG2Value+0x84>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	e004      	b.n	8000ce6 <get7SEG2Value+0x76>
		case MAN_AMBER:
			return amber_time_temp;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <get7SEG2Value+0x88>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	e001      	b.n	8000ce6 <get7SEG2Value+0x76>
		default:
			break;
 8000ce2:	bf00      	nop
	}
	return 0;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	2000003c 	.word	0x2000003c
 8000cf4:	2000009c 	.word	0x2000009c
 8000cf8:	200000a0 	.word	0x200000a0
 8000cfc:	20000098 	.word	0x20000098

08000d00 <display7SEG>:

void display7SEG(int num){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b09      	cmp	r3, #9
 8000d0c:	f200 81c8 	bhi.w	80010a0 <display7SEG+0x3a0>
 8000d10:	a201      	add	r2, pc, #4	; (adr r2, 8000d18 <display7SEG+0x18>)
 8000d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d16:	bf00      	nop
 8000d18:	08000d41 	.word	0x08000d41
 8000d1c:	08000d97 	.word	0x08000d97
 8000d20:	08000ded 	.word	0x08000ded
 8000d24:	08000e43 	.word	0x08000e43
 8000d28:	08000e99 	.word	0x08000e99
 8000d2c:	08000eef 	.word	0x08000eef
 8000d30:	08000f45 	.word	0x08000f45
 8000d34:	08000f9b 	.word	0x08000f9b
 8000d38:	08000ff1 	.word	0x08000ff1
 8000d3c:	08001047 	.word	0x08001047
	switch(num){
	case 0:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d46:	48d5      	ldr	r0, [pc, #852]	; (800109c <display7SEG+0x39c>)
 8000d48:	f001 fa0f 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d52:	48d2      	ldr	r0, [pc, #840]	; (800109c <display7SEG+0x39c>)
 8000d54:	f001 fa09 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d5e:	48cf      	ldr	r0, [pc, #828]	; (800109c <display7SEG+0x39c>)
 8000d60:	f001 fa03 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d6a:	48cc      	ldr	r0, [pc, #816]	; (800109c <display7SEG+0x39c>)
 8000d6c:	f001 f9fd 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d76:	48c9      	ldr	r0, [pc, #804]	; (800109c <display7SEG+0x39c>)
 8000d78:	f001 f9f7 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d82:	48c6      	ldr	r0, [pc, #792]	; (800109c <display7SEG+0x39c>)
 8000d84:	f001 f9f1 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d8e:	48c3      	ldr	r0, [pc, #780]	; (800109c <display7SEG+0x39c>)
 8000d90:	f001 f9eb 	bl	800216a <HAL_GPIO_WritePin>
		break;
 8000d94:	e185      	b.n	80010a2 <display7SEG+0x3a2>
	case 1:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, SET);
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d9c:	48bf      	ldr	r0, [pc, #764]	; (800109c <display7SEG+0x39c>)
 8000d9e:	f001 f9e4 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da8:	48bc      	ldr	r0, [pc, #752]	; (800109c <display7SEG+0x39c>)
 8000daa:	f001 f9de 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000db4:	48b9      	ldr	r0, [pc, #740]	; (800109c <display7SEG+0x39c>)
 8000db6:	f001 f9d8 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dc0:	48b6      	ldr	r0, [pc, #728]	; (800109c <display7SEG+0x39c>)
 8000dc2:	f001 f9d2 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dcc:	48b3      	ldr	r0, [pc, #716]	; (800109c <display7SEG+0x39c>)
 8000dce:	f001 f9cc 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd8:	48b0      	ldr	r0, [pc, #704]	; (800109c <display7SEG+0x39c>)
 8000dda:	f001 f9c6 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 8000dde:	2201      	movs	r2, #1
 8000de0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000de4:	48ad      	ldr	r0, [pc, #692]	; (800109c <display7SEG+0x39c>)
 8000de6:	f001 f9c0 	bl	800216a <HAL_GPIO_WritePin>
		break;
 8000dea:	e15a      	b.n	80010a2 <display7SEG+0x3a2>
	case 2:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df2:	48aa      	ldr	r0, [pc, #680]	; (800109c <display7SEG+0x39c>)
 8000df4:	f001 f9b9 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dfe:	48a7      	ldr	r0, [pc, #668]	; (800109c <display7SEG+0x39c>)
 8000e00:	f001 f9b3 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e0a:	48a4      	ldr	r0, [pc, #656]	; (800109c <display7SEG+0x39c>)
 8000e0c:	f001 f9ad 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e16:	48a1      	ldr	r0, [pc, #644]	; (800109c <display7SEG+0x39c>)
 8000e18:	f001 f9a7 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e22:	489e      	ldr	r0, [pc, #632]	; (800109c <display7SEG+0x39c>)
 8000e24:	f001 f9a1 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e2e:	489b      	ldr	r0, [pc, #620]	; (800109c <display7SEG+0x39c>)
 8000e30:	f001 f99b 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e3a:	4898      	ldr	r0, [pc, #608]	; (800109c <display7SEG+0x39c>)
 8000e3c:	f001 f995 	bl	800216a <HAL_GPIO_WritePin>
			break;
 8000e40:	e12f      	b.n	80010a2 <display7SEG+0x3a2>
	case 3:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e48:	4894      	ldr	r0, [pc, #592]	; (800109c <display7SEG+0x39c>)
 8000e4a:	f001 f98e 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e54:	4891      	ldr	r0, [pc, #580]	; (800109c <display7SEG+0x39c>)
 8000e56:	f001 f988 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e60:	488e      	ldr	r0, [pc, #568]	; (800109c <display7SEG+0x39c>)
 8000e62:	f001 f982 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e6c:	488b      	ldr	r0, [pc, #556]	; (800109c <display7SEG+0x39c>)
 8000e6e:	f001 f97c 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000e72:	2201      	movs	r2, #1
 8000e74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e78:	4888      	ldr	r0, [pc, #544]	; (800109c <display7SEG+0x39c>)
 8000e7a:	f001 f976 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e84:	4885      	ldr	r0, [pc, #532]	; (800109c <display7SEG+0x39c>)
 8000e86:	f001 f970 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e90:	4882      	ldr	r0, [pc, #520]	; (800109c <display7SEG+0x39c>)
 8000e92:	f001 f96a 	bl	800216a <HAL_GPIO_WritePin>
			break;
 8000e96:	e104      	b.n	80010a2 <display7SEG+0x3a2>
	case 4:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e9e:	487f      	ldr	r0, [pc, #508]	; (800109c <display7SEG+0x39c>)
 8000ea0:	f001 f963 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eaa:	487c      	ldr	r0, [pc, #496]	; (800109c <display7SEG+0x39c>)
 8000eac:	f001 f95d 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eb6:	4879      	ldr	r0, [pc, #484]	; (800109c <display7SEG+0x39c>)
 8000eb8:	f001 f957 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec2:	4876      	ldr	r0, [pc, #472]	; (800109c <display7SEG+0x39c>)
 8000ec4:	f001 f951 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ece:	4873      	ldr	r0, [pc, #460]	; (800109c <display7SEG+0x39c>)
 8000ed0:	f001 f94b 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eda:	4870      	ldr	r0, [pc, #448]	; (800109c <display7SEG+0x39c>)
 8000edc:	f001 f945 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ee6:	486d      	ldr	r0, [pc, #436]	; (800109c <display7SEG+0x39c>)
 8000ee8:	f001 f93f 	bl	800216a <HAL_GPIO_WritePin>
			break;
 8000eec:	e0d9      	b.n	80010a2 <display7SEG+0x3a2>
	case 5:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ef4:	4869      	ldr	r0, [pc, #420]	; (800109c <display7SEG+0x39c>)
 8000ef6:	f001 f938 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, SET);
 8000efa:	2201      	movs	r2, #1
 8000efc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f00:	4866      	ldr	r0, [pc, #408]	; (800109c <display7SEG+0x39c>)
 8000f02:	f001 f932 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f0c:	4863      	ldr	r0, [pc, #396]	; (800109c <display7SEG+0x39c>)
 8000f0e:	f001 f92c 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f18:	4860      	ldr	r0, [pc, #384]	; (800109c <display7SEG+0x39c>)
 8000f1a:	f001 f926 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f24:	485d      	ldr	r0, [pc, #372]	; (800109c <display7SEG+0x39c>)
 8000f26:	f001 f920 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f30:	485a      	ldr	r0, [pc, #360]	; (800109c <display7SEG+0x39c>)
 8000f32:	f001 f91a 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f3c:	4857      	ldr	r0, [pc, #348]	; (800109c <display7SEG+0x39c>)
 8000f3e:	f001 f914 	bl	800216a <HAL_GPIO_WritePin>
			break;
 8000f42:	e0ae      	b.n	80010a2 <display7SEG+0x3a2>
	case 6:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f4a:	4854      	ldr	r0, [pc, #336]	; (800109c <display7SEG+0x39c>)
 8000f4c:	f001 f90d 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f56:	4851      	ldr	r0, [pc, #324]	; (800109c <display7SEG+0x39c>)
 8000f58:	f001 f907 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f62:	484e      	ldr	r0, [pc, #312]	; (800109c <display7SEG+0x39c>)
 8000f64:	f001 f901 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f6e:	484b      	ldr	r0, [pc, #300]	; (800109c <display7SEG+0x39c>)
 8000f70:	f001 f8fb 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f7a:	4848      	ldr	r0, [pc, #288]	; (800109c <display7SEG+0x39c>)
 8000f7c:	f001 f8f5 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f86:	4845      	ldr	r0, [pc, #276]	; (800109c <display7SEG+0x39c>)
 8000f88:	f001 f8ef 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f92:	4842      	ldr	r0, [pc, #264]	; (800109c <display7SEG+0x39c>)
 8000f94:	f001 f8e9 	bl	800216a <HAL_GPIO_WritePin>
			break;
 8000f98:	e083      	b.n	80010a2 <display7SEG+0x3a2>
	case 7:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa0:	483e      	ldr	r0, [pc, #248]	; (800109c <display7SEG+0x39c>)
 8000fa2:	f001 f8e2 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fac:	483b      	ldr	r0, [pc, #236]	; (800109c <display7SEG+0x39c>)
 8000fae:	f001 f8dc 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb8:	4838      	ldr	r0, [pc, #224]	; (800109c <display7SEG+0x39c>)
 8000fba:	f001 f8d6 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc4:	4835      	ldr	r0, [pc, #212]	; (800109c <display7SEG+0x39c>)
 8000fc6:	f001 f8d0 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fd0:	4832      	ldr	r0, [pc, #200]	; (800109c <display7SEG+0x39c>)
 8000fd2:	f001 f8ca 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fdc:	482f      	ldr	r0, [pc, #188]	; (800109c <display7SEG+0x39c>)
 8000fde:	f001 f8c4 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fe8:	482c      	ldr	r0, [pc, #176]	; (800109c <display7SEG+0x39c>)
 8000fea:	f001 f8be 	bl	800216a <HAL_GPIO_WritePin>
			break;
 8000fee:	e058      	b.n	80010a2 <display7SEG+0x3a2>
	case 8:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ff6:	4829      	ldr	r0, [pc, #164]	; (800109c <display7SEG+0x39c>)
 8000ff8:	f001 f8b7 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001002:	4826      	ldr	r0, [pc, #152]	; (800109c <display7SEG+0x39c>)
 8001004:	f001 f8b1 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800100e:	4823      	ldr	r0, [pc, #140]	; (800109c <display7SEG+0x39c>)
 8001010:	f001 f8ab 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800101a:	4820      	ldr	r0, [pc, #128]	; (800109c <display7SEG+0x39c>)
 800101c:	f001 f8a5 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001026:	481d      	ldr	r0, [pc, #116]	; (800109c <display7SEG+0x39c>)
 8001028:	f001 f89f 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001032:	481a      	ldr	r0, [pc, #104]	; (800109c <display7SEG+0x39c>)
 8001034:	f001 f899 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800103e:	4817      	ldr	r0, [pc, #92]	; (800109c <display7SEG+0x39c>)
 8001040:	f001 f893 	bl	800216a <HAL_GPIO_WritePin>
			break;
 8001044:	e02d      	b.n	80010a2 <display7SEG+0x3a2>
	case 9:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 7100 	mov.w	r1, #512	; 0x200
 800104c:	4813      	ldr	r0, [pc, #76]	; (800109c <display7SEG+0x39c>)
 800104e:	f001 f88c 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001058:	4810      	ldr	r0, [pc, #64]	; (800109c <display7SEG+0x39c>)
 800105a:	f001 f886 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <display7SEG+0x39c>)
 8001066:	f001 f880 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001070:	480a      	ldr	r0, [pc, #40]	; (800109c <display7SEG+0x39c>)
 8001072:	f001 f87a 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8001076:	2201      	movs	r2, #1
 8001078:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800107c:	4807      	ldr	r0, [pc, #28]	; (800109c <display7SEG+0x39c>)
 800107e:	f001 f874 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <display7SEG+0x39c>)
 800108a:	f001 f86e 	bl	800216a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001094:	4801      	ldr	r0, [pc, #4]	; (800109c <display7SEG+0x39c>)
 8001096:	f001 f868 	bl	800216a <HAL_GPIO_WritePin>
			break;
 800109a:	e002      	b.n	80010a2 <display7SEG+0x3a2>
 800109c:	40010800 	.word	0x40010800
	default:
			break;
 80010a0:	bf00      	nop
	}
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop

080010ac <currentMode>:


int currentMode(){
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
	if(status == RED_AMBER || status == RED_GREEN || status == GREEN_RED || status == AMBER_RED){
 80010b0:	4b16      	ldr	r3, [pc, #88]	; (800110c <currentMode+0x60>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d00b      	beq.n	80010d0 <currentMode+0x24>
 80010b8:	4b14      	ldr	r3, [pc, #80]	; (800110c <currentMode+0x60>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d007      	beq.n	80010d0 <currentMode+0x24>
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <currentMode+0x60>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d003      	beq.n	80010d0 <currentMode+0x24>
 80010c8:	4b10      	ldr	r3, [pc, #64]	; (800110c <currentMode+0x60>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b05      	cmp	r3, #5
 80010ce:	d103      	bne.n	80010d8 <currentMode+0x2c>
		mode = 1;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <currentMode+0x64>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	e012      	b.n	80010fe <currentMode+0x52>
	} else if (status == MAN_RED){
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <currentMode+0x60>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b0c      	cmp	r3, #12
 80010de:	d103      	bne.n	80010e8 <currentMode+0x3c>
		mode = 2;
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <currentMode+0x64>)
 80010e2:	2202      	movs	r2, #2
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	e00a      	b.n	80010fe <currentMode+0x52>
	} else if (status == MAN_AMBER){
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <currentMode+0x60>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b0d      	cmp	r3, #13
 80010ee:	d103      	bne.n	80010f8 <currentMode+0x4c>
		mode = 3;
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <currentMode+0x64>)
 80010f2:	2203      	movs	r2, #3
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e002      	b.n	80010fe <currentMode+0x52>
	} else {
		mode = 4;
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <currentMode+0x64>)
 80010fa:	2204      	movs	r2, #4
 80010fc:	601a      	str	r2, [r3, #0]
	}

	return mode;
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <currentMode+0x64>)
 8001100:	681b      	ldr	r3, [r3, #0]
}
 8001102:	4618      	mov	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	2000003c 	.word	0x2000003c
 8001110:	2000004c 	.word	0x2000004c

08001114 <dispMode>:

void dispMode(int mode){
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	currentMode();
 800111c:	f7ff ffc6 	bl	80010ac <currentMode>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	2b03      	cmp	r3, #3
 8001126:	f200 80af 	bhi.w	8001288 <dispMode+0x174>
 800112a:	a201      	add	r2, pc, #4	; (adr r2, 8001130 <dispMode+0x1c>)
 800112c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001130:	08001141 	.word	0x08001141
 8001134:	08001193 	.word	0x08001193
 8001138:	080011e5 	.word	0x080011e5
 800113c:	08001237 	.word	0x08001237
	switch (mode){
	case 1:
			HAL_GPIO_WritePin(SEG_00_GPIO_Port, SEG_00_Pin, SET);
 8001140:	2201      	movs	r2, #1
 8001142:	2140      	movs	r1, #64	; 0x40
 8001144:	4853      	ldr	r0, [pc, #332]	; (8001294 <dispMode+0x180>)
 8001146:	f001 f810 	bl	800216a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_01_GPIO_Port, SEG_01_Pin, RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	2180      	movs	r1, #128	; 0x80
 800114e:	4851      	ldr	r0, [pc, #324]	; (8001294 <dispMode+0x180>)
 8001150:	f001 f80b 	bl	800216a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_02_GPIO_Port, SEG_02_Pin, RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	f44f 7180 	mov.w	r1, #256	; 0x100
 800115a:	484e      	ldr	r0, [pc, #312]	; (8001294 <dispMode+0x180>)
 800115c:	f001 f805 	bl	800216a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_03_GPIO_Port, SEG_03_Pin, SET);
 8001160:	2201      	movs	r2, #1
 8001162:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001166:	484b      	ldr	r0, [pc, #300]	; (8001294 <dispMode+0x180>)
 8001168:	f000 ffff 	bl	800216a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_04_GPIO_Port, SEG_04_Pin, SET);
 800116c:	2201      	movs	r2, #1
 800116e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001172:	4848      	ldr	r0, [pc, #288]	; (8001294 <dispMode+0x180>)
 8001174:	f000 fff9 	bl	800216a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_05_GPIO_Port, SEG_05_Pin, SET);
 8001178:	2201      	movs	r2, #1
 800117a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800117e:	4845      	ldr	r0, [pc, #276]	; (8001294 <dispMode+0x180>)
 8001180:	f000 fff3 	bl	800216a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_06_GPIO_Port, SEG_06_Pin, SET);
 8001184:	2201      	movs	r2, #1
 8001186:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800118a:	4842      	ldr	r0, [pc, #264]	; (8001294 <dispMode+0x180>)
 800118c:	f000 ffed 	bl	800216a <HAL_GPIO_WritePin>
			break;
 8001190:	e07b      	b.n	800128a <dispMode+0x176>
		case 2:
			HAL_GPIO_WritePin(SEG_00_GPIO_Port, SEG_00_Pin, RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	2140      	movs	r1, #64	; 0x40
 8001196:	483f      	ldr	r0, [pc, #252]	; (8001294 <dispMode+0x180>)
 8001198:	f000 ffe7 	bl	800216a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_01_GPIO_Port, SEG_01_Pin, RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2180      	movs	r1, #128	; 0x80
 80011a0:	483c      	ldr	r0, [pc, #240]	; (8001294 <dispMode+0x180>)
 80011a2:	f000 ffe2 	bl	800216a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_02_GPIO_Port, SEG_02_Pin, SET);
 80011a6:	2201      	movs	r2, #1
 80011a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ac:	4839      	ldr	r0, [pc, #228]	; (8001294 <dispMode+0x180>)
 80011ae:	f000 ffdc 	bl	800216a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_03_GPIO_Port, SEG_03_Pin, RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b8:	4836      	ldr	r0, [pc, #216]	; (8001294 <dispMode+0x180>)
 80011ba:	f000 ffd6 	bl	800216a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_04_GPIO_Port, SEG_04_Pin, RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011c4:	4833      	ldr	r0, [pc, #204]	; (8001294 <dispMode+0x180>)
 80011c6:	f000 ffd0 	bl	800216a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_05_GPIO_Port, SEG_05_Pin, SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011d0:	4830      	ldr	r0, [pc, #192]	; (8001294 <dispMode+0x180>)
 80011d2:	f000 ffca 	bl	800216a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_06_GPIO_Port, SEG_06_Pin, RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011dc:	482d      	ldr	r0, [pc, #180]	; (8001294 <dispMode+0x180>)
 80011de:	f000 ffc4 	bl	800216a <HAL_GPIO_WritePin>
				break;
 80011e2:	e052      	b.n	800128a <dispMode+0x176>
		case 3:
			HAL_GPIO_WritePin(SEG_00_GPIO_Port, SEG_00_Pin, RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2140      	movs	r1, #64	; 0x40
 80011e8:	482a      	ldr	r0, [pc, #168]	; (8001294 <dispMode+0x180>)
 80011ea:	f000 ffbe 	bl	800216a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_01_GPIO_Port, SEG_01_Pin, RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2180      	movs	r1, #128	; 0x80
 80011f2:	4828      	ldr	r0, [pc, #160]	; (8001294 <dispMode+0x180>)
 80011f4:	f000 ffb9 	bl	800216a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_02_GPIO_Port, SEG_02_Pin, RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011fe:	4825      	ldr	r0, [pc, #148]	; (8001294 <dispMode+0x180>)
 8001200:	f000 ffb3 	bl	800216a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_03_GPIO_Port, SEG_03_Pin, RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	f44f 7100 	mov.w	r1, #512	; 0x200
 800120a:	4822      	ldr	r0, [pc, #136]	; (8001294 <dispMode+0x180>)
 800120c:	f000 ffad 	bl	800216a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_04_GPIO_Port, SEG_04_Pin, SET);
 8001210:	2201      	movs	r2, #1
 8001212:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001216:	481f      	ldr	r0, [pc, #124]	; (8001294 <dispMode+0x180>)
 8001218:	f000 ffa7 	bl	800216a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_05_GPIO_Port, SEG_05_Pin, SET);
 800121c:	2201      	movs	r2, #1
 800121e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001222:	481c      	ldr	r0, [pc, #112]	; (8001294 <dispMode+0x180>)
 8001224:	f000 ffa1 	bl	800216a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_06_GPIO_Port, SEG_06_Pin, RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800122e:	4819      	ldr	r0, [pc, #100]	; (8001294 <dispMode+0x180>)
 8001230:	f000 ff9b 	bl	800216a <HAL_GPIO_WritePin>
				break;
 8001234:	e029      	b.n	800128a <dispMode+0x176>
		case 4:
			HAL_GPIO_WritePin(SEG_00_GPIO_Port, SEG_00_Pin, SET);
 8001236:	2201      	movs	r2, #1
 8001238:	2140      	movs	r1, #64	; 0x40
 800123a:	4816      	ldr	r0, [pc, #88]	; (8001294 <dispMode+0x180>)
 800123c:	f000 ff95 	bl	800216a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_01_GPIO_Port, SEG_01_Pin, RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	2180      	movs	r1, #128	; 0x80
 8001244:	4813      	ldr	r0, [pc, #76]	; (8001294 <dispMode+0x180>)
 8001246:	f000 ff90 	bl	800216a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_02_GPIO_Port, SEG_02_Pin, RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001250:	4810      	ldr	r0, [pc, #64]	; (8001294 <dispMode+0x180>)
 8001252:	f000 ff8a 	bl	800216a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_03_GPIO_Port, SEG_03_Pin, SET);
 8001256:	2201      	movs	r2, #1
 8001258:	f44f 7100 	mov.w	r1, #512	; 0x200
 800125c:	480d      	ldr	r0, [pc, #52]	; (8001294 <dispMode+0x180>)
 800125e:	f000 ff84 	bl	800216a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_04_GPIO_Port, SEG_04_Pin, SET);
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001268:	480a      	ldr	r0, [pc, #40]	; (8001294 <dispMode+0x180>)
 800126a:	f000 ff7e 	bl	800216a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_05_GPIO_Port, SEG_05_Pin, RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001274:	4807      	ldr	r0, [pc, #28]	; (8001294 <dispMode+0x180>)
 8001276:	f000 ff78 	bl	800216a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_06_GPIO_Port, SEG_06_Pin, RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001280:	4804      	ldr	r0, [pc, #16]	; (8001294 <dispMode+0x180>)
 8001282:	f000 ff72 	bl	800216a <HAL_GPIO_WritePin>
				break;
 8001286:	e000      	b.n	800128a <dispMode+0x176>
		default:
			break;
 8001288:	bf00      	nop

	}
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40010c00 	.word	0x40010c00

08001298 <update7SEG>:
void update7SEG (int index){
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	index = index%4;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	425a      	negs	r2, r3
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	f002 0203 	and.w	r2, r2, #3
 80012ac:	bf58      	it	pl
 80012ae:	4253      	negpl	r3, r2
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	f200 8099 	bhi.w	80013ec <update7SEG+0x154>
 80012ba:	a201      	add	r2, pc, #4	; (adr r2, 80012c0 <update7SEG+0x28>)
 80012bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c0:	080012d1 	.word	0x080012d1
 80012c4:	08001313 	.word	0x08001313
 80012c8:	0800135f 	.word	0x0800135f
 80012cc:	080013a1 	.word	0x080013a1
	switch (index){
	case 0:
		  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2102      	movs	r1, #2
 80012d4:	4847      	ldr	r0, [pc, #284]	; (80013f4 <update7SEG+0x15c>)
 80012d6:	f000 ff48 	bl	800216a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80012da:	2201      	movs	r2, #1
 80012dc:	2104      	movs	r1, #4
 80012de:	4845      	ldr	r0, [pc, #276]	; (80013f4 <update7SEG+0x15c>)
 80012e0:	f000 ff43 	bl	800216a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80012e4:	2201      	movs	r2, #1
 80012e6:	2108      	movs	r1, #8
 80012e8:	4842      	ldr	r0, [pc, #264]	; (80013f4 <update7SEG+0x15c>)
 80012ea:	f000 ff3e 	bl	800216a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80012ee:	2201      	movs	r2, #1
 80012f0:	2110      	movs	r1, #16
 80012f2:	4840      	ldr	r0, [pc, #256]	; (80013f4 <update7SEG+0x15c>)
 80012f4:	f000 ff39 	bl	800216a <HAL_GPIO_WritePin>
		  display7SEG(get7SEG1Value()/10);
 80012f8:	f7ff fc72 	bl	8000be0 <get7SEG1Value>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a3e      	ldr	r2, [pc, #248]	; (80013f8 <update7SEG+0x160>)
 8001300:	fb82 1203 	smull	r1, r2, r2, r3
 8001304:	1092      	asrs	r2, r2, #2
 8001306:	17db      	asrs	r3, r3, #31
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fcf8 	bl	8000d00 <display7SEG>
		break;
 8001310:	e06c      	b.n	80013ec <update7SEG+0x154>
	case 1:
		  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001312:	2201      	movs	r2, #1
 8001314:	2102      	movs	r1, #2
 8001316:	4837      	ldr	r0, [pc, #220]	; (80013f4 <update7SEG+0x15c>)
 8001318:	f000 ff27 	bl	800216a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	2104      	movs	r1, #4
 8001320:	4834      	ldr	r0, [pc, #208]	; (80013f4 <update7SEG+0x15c>)
 8001322:	f000 ff22 	bl	800216a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001326:	2201      	movs	r2, #1
 8001328:	2108      	movs	r1, #8
 800132a:	4832      	ldr	r0, [pc, #200]	; (80013f4 <update7SEG+0x15c>)
 800132c:	f000 ff1d 	bl	800216a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8001330:	2201      	movs	r2, #1
 8001332:	2110      	movs	r1, #16
 8001334:	482f      	ldr	r0, [pc, #188]	; (80013f4 <update7SEG+0x15c>)
 8001336:	f000 ff18 	bl	800216a <HAL_GPIO_WritePin>
		  display7SEG(get7SEG1Value()%10);
 800133a:	f7ff fc51 	bl	8000be0 <get7SEG1Value>
 800133e:	4601      	mov	r1, r0
 8001340:	4b2d      	ldr	r3, [pc, #180]	; (80013f8 <update7SEG+0x160>)
 8001342:	fb83 2301 	smull	r2, r3, r3, r1
 8001346:	109a      	asrs	r2, r3, #2
 8001348:	17cb      	asrs	r3, r1, #31
 800134a:	1ad2      	subs	r2, r2, r3
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	1aca      	subs	r2, r1, r3
 8001356:	4610      	mov	r0, r2
 8001358:	f7ff fcd2 	bl	8000d00 <display7SEG>
		break;
 800135c:	e046      	b.n	80013ec <update7SEG+0x154>
	case 2:
		  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800135e:	2201      	movs	r2, #1
 8001360:	2102      	movs	r1, #2
 8001362:	4824      	ldr	r0, [pc, #144]	; (80013f4 <update7SEG+0x15c>)
 8001364:	f000 ff01 	bl	800216a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001368:	2201      	movs	r2, #1
 800136a:	2104      	movs	r1, #4
 800136c:	4821      	ldr	r0, [pc, #132]	; (80013f4 <update7SEG+0x15c>)
 800136e:	f000 fefc 	bl	800216a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	2108      	movs	r1, #8
 8001376:	481f      	ldr	r0, [pc, #124]	; (80013f4 <update7SEG+0x15c>)
 8001378:	f000 fef7 	bl	800216a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800137c:	2201      	movs	r2, #1
 800137e:	2110      	movs	r1, #16
 8001380:	481c      	ldr	r0, [pc, #112]	; (80013f4 <update7SEG+0x15c>)
 8001382:	f000 fef2 	bl	800216a <HAL_GPIO_WritePin>
		  display7SEG(get7SEG2Value()/10);
 8001386:	f7ff fc73 	bl	8000c70 <get7SEG2Value>
 800138a:	4603      	mov	r3, r0
 800138c:	4a1a      	ldr	r2, [pc, #104]	; (80013f8 <update7SEG+0x160>)
 800138e:	fb82 1203 	smull	r1, r2, r2, r3
 8001392:	1092      	asrs	r2, r2, #2
 8001394:	17db      	asrs	r3, r3, #31
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fcb1 	bl	8000d00 <display7SEG>
		break;
 800139e:	e025      	b.n	80013ec <update7SEG+0x154>
	case 3:
		  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	2102      	movs	r1, #2
 80013a4:	4813      	ldr	r0, [pc, #76]	; (80013f4 <update7SEG+0x15c>)
 80013a6:	f000 fee0 	bl	800216a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80013aa:	2201      	movs	r2, #1
 80013ac:	2104      	movs	r1, #4
 80013ae:	4811      	ldr	r0, [pc, #68]	; (80013f4 <update7SEG+0x15c>)
 80013b0:	f000 fedb 	bl	800216a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80013b4:	2201      	movs	r2, #1
 80013b6:	2108      	movs	r1, #8
 80013b8:	480e      	ldr	r0, [pc, #56]	; (80013f4 <update7SEG+0x15c>)
 80013ba:	f000 fed6 	bl	800216a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	2110      	movs	r1, #16
 80013c2:	480c      	ldr	r0, [pc, #48]	; (80013f4 <update7SEG+0x15c>)
 80013c4:	f000 fed1 	bl	800216a <HAL_GPIO_WritePin>
		  display7SEG(get7SEG2Value()%10);
 80013c8:	f7ff fc52 	bl	8000c70 <get7SEG2Value>
 80013cc:	4601      	mov	r1, r0
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <update7SEG+0x160>)
 80013d0:	fb83 2301 	smull	r2, r3, r3, r1
 80013d4:	109a      	asrs	r2, r3, #2
 80013d6:	17cb      	asrs	r3, r1, #31
 80013d8:	1ad2      	subs	r2, r2, r3
 80013da:	4613      	mov	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	1aca      	subs	r2, r1, r3
 80013e4:	4610      	mov	r0, r2
 80013e6:	f7ff fc8b 	bl	8000d00 <display7SEG>
		break;
 80013ea:	bf00      	nop
	}
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40010800 	.word	0x40010800
 80013f8:	66666667 	.word	0x66666667

080013fc <updateClock>:

int counter2 = 0;

void updateClock() {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	if (counter2 > 0) counter2--;
 8001400:	4b10      	ldr	r3, [pc, #64]	; (8001444 <updateClock+0x48>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	dd04      	ble.n	8001412 <updateClock+0x16>
 8001408:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <updateClock+0x48>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	3b01      	subs	r3, #1
 800140e:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <updateClock+0x48>)
 8001410:	6013      	str	r3, [r2, #0]
	if(counter2 <= 0){
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <updateClock+0x48>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	dc11      	bgt.n	800143e <updateClock+0x42>
		counter2 = 25;
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <updateClock+0x48>)
 800141c:	2219      	movs	r2, #25
 800141e:	601a      	str	r2, [r3, #0]
		if (index_led > 3){
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <updateClock+0x4c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b03      	cmp	r3, #3
 8001426:	dd02      	ble.n	800142e <updateClock+0x32>
			index_led = 0;
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <updateClock+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
		}
		update7SEG(index_led++);
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <updateClock+0x4c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	4904      	ldr	r1, [pc, #16]	; (8001448 <updateClock+0x4c>)
 8001436:	600a      	str	r2, [r1, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff2d 	bl	8001298 <update7SEG>
	}
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000094 	.word	0x20000094
 8001448:	20000090 	.word	0x20000090

0800144c <dispModeWrapper>:
/* USER CODE BEGIN 0 */
void Led_Toggle(){
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
}

void dispModeWrapper(){
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	dispMode(mode);
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <dispModeWrapper+0x14>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fe5d 	bl	8001114 <dispMode>
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2000004c 	.word	0x2000004c

08001464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001468:	f000 fb7e 	bl	8001b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800146c:	f000 f844 	bl	80014f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001470:	f000 f8ca 	bl	8001608 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001474:	f000 f87c 	bl	8001570 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001478:	4816      	ldr	r0, [pc, #88]	; (80014d4 <main+0x70>)
 800147a:	f001 fad3 	bl	8002a24 <HAL_TIM_Base_Start_IT>
//  setTimer1(100);
//  setTimer2(100);
//  setTimer3(100);
//  setTimerLed(100);
  // Start Button
  	SCH_Add_Task(getKey1Input, 0, 10);
 800147e:	220a      	movs	r2, #10
 8001480:	2100      	movs	r1, #0
 8001482:	4815      	ldr	r0, [pc, #84]	; (80014d8 <main+0x74>)
 8001484:	f000 fa06 	bl	8001894 <SCH_Add_Task>
  	SCH_Add_Task(getKey2Input, 0, 10);
 8001488:	220a      	movs	r2, #10
 800148a:	2100      	movs	r1, #0
 800148c:	4813      	ldr	r0, [pc, #76]	; (80014dc <main+0x78>)
 800148e:	f000 fa01 	bl	8001894 <SCH_Add_Task>
  	SCH_Add_Task(getKey3Input, 0, 10);
 8001492:	220a      	movs	r2, #10
 8001494:	2100      	movs	r1, #0
 8001496:	4812      	ldr	r0, [pc, #72]	; (80014e0 <main+0x7c>)
 8001498:	f000 f9fc 	bl	8001894 <SCH_Add_Task>
  // End Button

  	// Start Display Led
  	SCH_Add_Task(dispModeWrapper, 0, 10);
 800149c:	220a      	movs	r2, #10
 800149e:	2100      	movs	r1, #0
 80014a0:	4810      	ldr	r0, [pc, #64]	; (80014e4 <main+0x80>)
 80014a2:	f000 f9f7 	bl	8001894 <SCH_Add_Task>
  	SCH_Add_Task(updateClock, 0, 10);
 80014a6:	220a      	movs	r2, #10
 80014a8:	2100      	movs	r1, #0
 80014aa:	480f      	ldr	r0, [pc, #60]	; (80014e8 <main+0x84>)
 80014ac:	f000 f9f2 	bl	8001894 <SCH_Add_Task>
  	// End Display Led

  	SCH_Add_Task(fsm_automatic_run, 0, 10);
 80014b0:	220a      	movs	r2, #10
 80014b2:	2100      	movs	r1, #0
 80014b4:	480d      	ldr	r0, [pc, #52]	; (80014ec <main+0x88>)
 80014b6:	f000 f9ed 	bl	8001894 <SCH_Add_Task>
  	SCH_Add_Task(fsm_manual_run, 0, 10);
 80014ba:	220a      	movs	r2, #10
 80014bc:	2100      	movs	r1, #0
 80014be:	480c      	ldr	r0, [pc, #48]	; (80014f0 <main+0x8c>)
 80014c0:	f000 f9e8 	bl	8001894 <SCH_Add_Task>
  	SCH_Add_Task(fsm_setting_run, 0, 10);
 80014c4:	220a      	movs	r2, #10
 80014c6:	2100      	movs	r1, #0
 80014c8:	480a      	ldr	r0, [pc, #40]	; (80014f4 <main+0x90>)
 80014ca:	f000 f9e3 	bl	8001894 <SCH_Add_Task>
//  	  	  SCH_Add_Task(Led_Toggle, 0, 100);
  while (1)
  {
	  SCH_Dispatch_Tasks();
 80014ce:	f000 fa3b 	bl	8001948 <SCH_Dispatch_Tasks>
 80014d2:	e7fc      	b.n	80014ce <main+0x6a>
 80014d4:	200000a4 	.word	0x200000a4
 80014d8:	080001d1 	.word	0x080001d1
 80014dc:	0800026d 	.word	0x0800026d
 80014e0:	0800030d 	.word	0x0800030d
 80014e4:	0800144d 	.word	0x0800144d
 80014e8:	080013fd 	.word	0x080013fd
 80014ec:	080003ad 	.word	0x080003ad
 80014f0:	080006ad 	.word	0x080006ad
 80014f4:	08000901 	.word	0x08000901

080014f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b090      	sub	sp, #64	; 0x40
 80014fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fe:	f107 0318 	add.w	r3, r7, #24
 8001502:	2228      	movs	r2, #40	; 0x28
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f001 fe3c 	bl	8003184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800151a:	2302      	movs	r3, #2
 800151c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800151e:	2301      	movs	r3, #1
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001522:	2310      	movs	r3, #16
 8001524:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001526:	2300      	movs	r3, #0
 8001528:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152a:	f107 0318 	add.w	r3, r7, #24
 800152e:	4618      	mov	r0, r3
 8001530:	f000 fe4c 	bl	80021cc <HAL_RCC_OscConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800153a:	f000 f8ed 	bl	8001718 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153e:	230f      	movs	r3, #15
 8001540:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f001 f8b8 	bl	80026cc <HAL_RCC_ClockConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001562:	f000 f8d9 	bl	8001718 <Error_Handler>
  }
}
 8001566:	bf00      	nop
 8001568:	3740      	adds	r7, #64	; 0x40
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001584:	463b      	mov	r3, r7
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800158c:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <MX_TIM2_Init+0x94>)
 800158e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001592:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <MX_TIM2_Init+0x94>)
 8001596:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800159a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <MX_TIM2_Init+0x94>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <MX_TIM2_Init+0x94>)
 80015a4:	2209      	movs	r2, #9
 80015a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <MX_TIM2_Init+0x94>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <MX_TIM2_Init+0x94>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015b4:	4813      	ldr	r0, [pc, #76]	; (8001604 <MX_TIM2_Init+0x94>)
 80015b6:	f001 f9e5 	bl	8002984 <HAL_TIM_Base_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015c0:	f000 f8aa 	bl	8001718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015ca:	f107 0308 	add.w	r3, r7, #8
 80015ce:	4619      	mov	r1, r3
 80015d0:	480c      	ldr	r0, [pc, #48]	; (8001604 <MX_TIM2_Init+0x94>)
 80015d2:	f001 fb63 	bl	8002c9c <HAL_TIM_ConfigClockSource>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015dc:	f000 f89c 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e0:	2300      	movs	r3, #0
 80015e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015e8:	463b      	mov	r3, r7
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_TIM2_Init+0x94>)
 80015ee:	f001 fd3b 	bl	8003068 <HAL_TIMEx_MasterConfigSynchronization>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015f8:	f000 f88e 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015fc:	bf00      	nop
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200000a4 	.word	0x200000a4

08001608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160e:	f107 0310 	add.w	r3, r7, #16
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800161c:	4b35      	ldr	r3, [pc, #212]	; (80016f4 <MX_GPIO_Init+0xec>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	4a34      	ldr	r2, [pc, #208]	; (80016f4 <MX_GPIO_Init+0xec>)
 8001622:	f043 0310 	orr.w	r3, r3, #16
 8001626:	6193      	str	r3, [r2, #24]
 8001628:	4b32      	ldr	r3, [pc, #200]	; (80016f4 <MX_GPIO_Init+0xec>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	f003 0310 	and.w	r3, r3, #16
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001634:	4b2f      	ldr	r3, [pc, #188]	; (80016f4 <MX_GPIO_Init+0xec>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	4a2e      	ldr	r2, [pc, #184]	; (80016f4 <MX_GPIO_Init+0xec>)
 800163a:	f043 0304 	orr.w	r3, r3, #4
 800163e:	6193      	str	r3, [r2, #24]
 8001640:	4b2c      	ldr	r3, [pc, #176]	; (80016f4 <MX_GPIO_Init+0xec>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164c:	4b29      	ldr	r3, [pc, #164]	; (80016f4 <MX_GPIO_Init+0xec>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	4a28      	ldr	r2, [pc, #160]	; (80016f4 <MX_GPIO_Init+0xec>)
 8001652:	f043 0308 	orr.w	r3, r3, #8
 8001656:	6193      	str	r3, [r2, #24]
 8001658:	4b26      	ldr	r3, [pc, #152]	; (80016f4 <MX_GPIO_Init+0xec>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001664:	2200      	movs	r2, #0
 8001666:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 800166a:	4823      	ldr	r0, [pc, #140]	; (80016f8 <MX_GPIO_Init+0xf0>)
 800166c:	f000 fd7d 	bl	800216a <HAL_GPIO_WritePin>
                          |LED_RED_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LED_BLUE_Pin
                          |SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_RED_Pin|LED_1_GREEN_Pin|LED_1_YELLOW_Pin|SEG_04_Pin
 8001670:	2200      	movs	r2, #0
 8001672:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001676:	4821      	ldr	r0, [pc, #132]	; (80016fc <MX_GPIO_Init+0xf4>)
 8001678:	f000 fd77 	bl	800216a <HAL_GPIO_WritePin>
                          |SEG_05_Pin|SEG_06_Pin|LED_2_RED_Pin|LED_2_GREEN_Pin
                          |LED_2_YELLOW_Pin|SEG_00_Pin|SEG_01_Pin|SEG_02_Pin
                          |SEG_03_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Button0_Pin */
  GPIO_InitStruct.Pin = Button0_Pin;
 800167c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001686:	2301      	movs	r3, #1
 8001688:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button0_GPIO_Port, &GPIO_InitStruct);
 800168a:	f107 0310 	add.w	r3, r7, #16
 800168e:	4619      	mov	r1, r3
 8001690:	481b      	ldr	r0, [pc, #108]	; (8001700 <MX_GPIO_Init+0xf8>)
 8001692:	f000 fbd9 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           LED_RED_Pin LED_GREEN_Pin LED_YELLOW_Pin LED_BLUE_Pin
                           SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001696:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800169a:	613b      	str	r3, [r7, #16]
                          |LED_RED_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LED_BLUE_Pin
                          |SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169c:	2301      	movs	r3, #1
 800169e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2302      	movs	r3, #2
 80016a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a8:	f107 0310 	add.w	r3, r7, #16
 80016ac:	4619      	mov	r1, r3
 80016ae:	4812      	ldr	r0, [pc, #72]	; (80016f8 <MX_GPIO_Init+0xf0>)
 80016b0:	f000 fbca 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_RED_Pin LED_1_GREEN_Pin LED_1_YELLOW_Pin SEG_04_Pin
                           SEG_05_Pin SEG_06_Pin LED_2_RED_Pin LED_2_GREEN_Pin
                           LED_2_YELLOW_Pin SEG_00_Pin SEG_01_Pin SEG_02_Pin
                           SEG_03_Pin */
  GPIO_InitStruct.Pin = LED_1_RED_Pin|LED_1_GREEN_Pin|LED_1_YELLOW_Pin|SEG_04_Pin
 80016b4:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80016b8:	613b      	str	r3, [r7, #16]
                          |SEG_05_Pin|SEG_06_Pin|LED_2_RED_Pin|LED_2_GREEN_Pin
                          |LED_2_YELLOW_Pin|SEG_00_Pin|SEG_01_Pin|SEG_02_Pin
                          |SEG_03_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2302      	movs	r3, #2
 80016c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c6:	f107 0310 	add.w	r3, r7, #16
 80016ca:	4619      	mov	r1, r3
 80016cc:	480b      	ldr	r0, [pc, #44]	; (80016fc <MX_GPIO_Init+0xf4>)
 80016ce:	f000 fbbb 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 80016d2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80016d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016dc:	2301      	movs	r3, #1
 80016de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	4619      	mov	r1, r3
 80016e6:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_GPIO_Init+0xf4>)
 80016e8:	f000 fbae 	bl	8001e48 <HAL_GPIO_Init>

}
 80016ec:	bf00      	nop
 80016ee:	3720      	adds	r7, #32
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010800 	.word	0x40010800
 80016fc:	40010c00 	.word	0x40010c00
 8001700:	40011000 	.word	0x40011000

08001704 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	SCH_Update();
 800170c:	f000 f850 	bl	80017b0 <SCH_Update>
//	timerRun();
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800171c:	b672      	cpsid	i
}
 800171e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001720:	e7fe      	b.n	8001720 <Error_Handler+0x8>
	...

08001724 <SCH_Delete_Task>:
#include "scheduler.h"

sTask SCH_tasks_G[SCH_MAX_TASKS];
//unsigned char Error_code_G = 0;

unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX) {
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
	unsigned char Return_code = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	73fb      	strb	r3, [r7, #15]
	if (SCH_tasks_G[TASK_INDEX].pTask == 0) {
 8001732:	79fa      	ldrb	r2, [r7, #7]
 8001734:	491d      	ldr	r1, [pc, #116]	; (80017ac <SCH_Delete_Task+0x88>)
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d102      	bne.n	800174c <SCH_Delete_Task+0x28>
			Return_code = 1;
 8001746:	2301      	movs	r3, #1
 8001748:	73fb      	strb	r3, [r7, #15]
 800174a:	e001      	b.n	8001750 <SCH_Delete_Task+0x2c>
	} else {
		Return_code = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	73fb      	strb	r3, [r7, #15]
	}
	SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 8001750:	79fa      	ldrb	r2, [r7, #7]
 8001752:	4916      	ldr	r1, [pc, #88]	; (80017ac <SCH_Delete_Task+0x88>)
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Delay = 0;
 8001762:	79fa      	ldrb	r2, [r7, #7]
 8001764:	4911      	ldr	r1, [pc, #68]	; (80017ac <SCH_Delete_Task+0x88>)
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	440b      	add	r3, r1
 8001770:	3304      	adds	r3, #4
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Period = 0;
 8001776:	79fa      	ldrb	r2, [r7, #7]
 8001778:	490c      	ldr	r1, [pc, #48]	; (80017ac <SCH_Delete_Task+0x88>)
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	440b      	add	r3, r1
 8001784:	3308      	adds	r3, #8
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].RunMe = 0;
 800178a:	79fa      	ldrb	r2, [r7, #7]
 800178c:	4907      	ldr	r1, [pc, #28]	; (80017ac <SCH_Delete_Task+0x88>)
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	440b      	add	r3, r1
 8001798:	330c      	adds	r3, #12
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
	return Return_code;	// return status
 800179e:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	200000ec 	.word	0x200000ec

080017b0 <SCH_Update>:
	//Error_code_G = 0;
	//Timer_init();
	//Watchdog_init();
}

void SCH_Update(void) {
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
//				SCH_tasks_G[0].Delay = 1;
//			}
//		}
//	}
	unsigned char Index;
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80017b6:	2300      	movs	r3, #0
 80017b8:	71fb      	strb	r3, [r7, #7]
 80017ba:	e05f      	b.n	800187c <SCH_Update+0xcc>
		if (SCH_tasks_G[Index].pTask) {
 80017bc:	79fa      	ldrb	r2, [r7, #7]
 80017be:	4934      	ldr	r1, [pc, #208]	; (8001890 <SCH_Update+0xe0>)
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d052      	beq.n	8001876 <SCH_Update+0xc6>
			SCH_tasks_G[Index].Delay -= 1;
 80017d0:	79fa      	ldrb	r2, [r7, #7]
 80017d2:	492f      	ldr	r1, [pc, #188]	; (8001890 <SCH_Update+0xe0>)
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	3304      	adds	r3, #4
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	79fa      	ldrb	r2, [r7, #7]
 80017e4:	1e59      	subs	r1, r3, #1
 80017e6:	482a      	ldr	r0, [pc, #168]	; (8001890 <SCH_Update+0xe0>)
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4403      	add	r3, r0
 80017f2:	3304      	adds	r3, #4
 80017f4:	6019      	str	r1, [r3, #0]
			if (SCH_tasks_G[Index].Delay <= 0) {
 80017f6:	79fa      	ldrb	r2, [r7, #7]
 80017f8:	4925      	ldr	r1, [pc, #148]	; (8001890 <SCH_Update+0xe0>)
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	440b      	add	r3, r1
 8001804:	3304      	adds	r3, #4
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	dc34      	bgt.n	8001876 <SCH_Update+0xc6>
				SCH_tasks_G[Index].RunMe += 1;
 800180c:	79fa      	ldrb	r2, [r7, #7]
 800180e:	4920      	ldr	r1, [pc, #128]	; (8001890 <SCH_Update+0xe0>)
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	330c      	adds	r3, #12
 800181c:	f993 3000 	ldrsb.w	r3, [r3]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	3301      	adds	r3, #1
 8001824:	b2db      	uxtb	r3, r3
 8001826:	79fa      	ldrb	r2, [r7, #7]
 8001828:	b258      	sxtb	r0, r3
 800182a:	4919      	ldr	r1, [pc, #100]	; (8001890 <SCH_Update+0xe0>)
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	330c      	adds	r3, #12
 8001838:	4602      	mov	r2, r0
 800183a:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks_G[Index].Period) {
 800183c:	79fa      	ldrb	r2, [r7, #7]
 800183e:	4914      	ldr	r1, [pc, #80]	; (8001890 <SCH_Update+0xe0>)
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	3308      	adds	r3, #8
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d011      	beq.n	8001876 <SCH_Update+0xc6>
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 8001852:	79f9      	ldrb	r1, [r7, #7]
 8001854:	79fa      	ldrb	r2, [r7, #7]
 8001856:	480e      	ldr	r0, [pc, #56]	; (8001890 <SCH_Update+0xe0>)
 8001858:	460b      	mov	r3, r1
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4403      	add	r3, r0
 8001862:	3308      	adds	r3, #8
 8001864:	6819      	ldr	r1, [r3, #0]
 8001866:	480a      	ldr	r0, [pc, #40]	; (8001890 <SCH_Update+0xe0>)
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4403      	add	r3, r0
 8001872:	3304      	adds	r3, #4
 8001874:	6019      	str	r1, [r3, #0]
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	3301      	adds	r3, #1
 800187a:	71fb      	strb	r3, [r7, #7]
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	2b09      	cmp	r3, #9
 8001880:	d99c      	bls.n	80017bc <SCH_Update+0xc>
				}
			}
		}
	}
}
 8001882:	bf00      	nop
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	200000ec 	.word	0x200000ec

08001894 <SCH_Add_Task>:

unsigned char SCH_Add_Task(void (* pFunction) (), unsigned int DELAY, unsigned int PERIOD) {
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
	unsigned char Index = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)) {
 80018a4:	e002      	b.n	80018ac <SCH_Add_Task+0x18>
		Index++;
 80018a6:	7dfb      	ldrb	r3, [r7, #23]
 80018a8:	3301      	adds	r3, #1
 80018aa:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)) {
 80018ac:	7dfa      	ldrb	r2, [r7, #23]
 80018ae:	4924      	ldr	r1, [pc, #144]	; (8001940 <SCH_Add_Task+0xac>)
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d002      	beq.n	80018c6 <SCH_Add_Task+0x32>
 80018c0:	7dfb      	ldrb	r3, [r7, #23]
 80018c2:	2b09      	cmp	r3, #9
 80018c4:	d9ef      	bls.n	80018a6 <SCH_Add_Task+0x12>
	}
	if (Index == SCH_MAX_TASKS) {
 80018c6:	7dfb      	ldrb	r3, [r7, #23]
 80018c8:	2b0a      	cmp	r3, #10
 80018ca:	d101      	bne.n	80018d0 <SCH_Add_Task+0x3c>
		return SCH_MAX_TASKS;
 80018cc:	230a      	movs	r3, #10
 80018ce:	e031      	b.n	8001934 <SCH_Add_Task+0xa0>
	}
	SCH_tasks_G[Index].pTask = pFunction;
 80018d0:	7dfa      	ldrb	r2, [r7, #23]
 80018d2:	491b      	ldr	r1, [pc, #108]	; (8001940 <SCH_Add_Task+0xac>)
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Delay = DELAY / TICKS;
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	4a17      	ldr	r2, [pc, #92]	; (8001944 <SCH_Add_Task+0xb0>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	08db      	lsrs	r3, r3, #3
 80018ec:	7dfa      	ldrb	r2, [r7, #23]
 80018ee:	4618      	mov	r0, r3
 80018f0:	4913      	ldr	r1, [pc, #76]	; (8001940 <SCH_Add_Task+0xac>)
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	440b      	add	r3, r1
 80018fc:	3304      	adds	r3, #4
 80018fe:	6018      	str	r0, [r3, #0]
	SCH_tasks_G[Index].Period = PERIOD / TICKS;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a10      	ldr	r2, [pc, #64]	; (8001944 <SCH_Add_Task+0xb0>)
 8001904:	fba2 2303 	umull	r2, r3, r2, r3
 8001908:	08db      	lsrs	r3, r3, #3
 800190a:	7dfa      	ldrb	r2, [r7, #23]
 800190c:	4618      	mov	r0, r3
 800190e:	490c      	ldr	r1, [pc, #48]	; (8001940 <SCH_Add_Task+0xac>)
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	3308      	adds	r3, #8
 800191c:	6018      	str	r0, [r3, #0]
	SCH_tasks_G[Index].RunMe = 0;
 800191e:	7dfa      	ldrb	r2, [r7, #23]
 8001920:	4907      	ldr	r1, [pc, #28]	; (8001940 <SCH_Add_Task+0xac>)
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	440b      	add	r3, r1
 800192c:	330c      	adds	r3, #12
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
	return Index;
 8001932:	7dfb      	ldrb	r3, [r7, #23]
}
 8001934:	4618      	mov	r0, r3
 8001936:	371c      	adds	r7, #28
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	200000ec 	.word	0x200000ec
 8001944:	cccccccd 	.word	0xcccccccd

08001948 <SCH_Dispatch_Tasks>:
//
void SCH_Dispatch_Tasks(void) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
	unsigned char Index;
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 800194e:	2300      	movs	r3, #0
 8001950:	71fb      	strb	r3, [r7, #7]
 8001952:	e04a      	b.n	80019ea <SCH_Dispatch_Tasks+0xa2>
		if (!(SCH_tasks_G[Index].pTask)) continue;
 8001954:	79fa      	ldrb	r2, [r7, #7]
 8001956:	4929      	ldr	r1, [pc, #164]	; (80019fc <SCH_Dispatch_Tasks+0xb4>)
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d03c      	beq.n	80019e2 <SCH_Dispatch_Tasks+0x9a>
		if (SCH_tasks_G[Index].RunMe > 0) {
 8001968:	79fa      	ldrb	r2, [r7, #7]
 800196a:	4924      	ldr	r1, [pc, #144]	; (80019fc <SCH_Dispatch_Tasks+0xb4>)
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	330c      	adds	r3, #12
 8001978:	f993 3000 	ldrsb.w	r3, [r3]
 800197c:	2b00      	cmp	r3, #0
 800197e:	dd31      	ble.n	80019e4 <SCH_Dispatch_Tasks+0x9c>
			(* SCH_tasks_G[Index].pTask)();
 8001980:	79fa      	ldrb	r2, [r7, #7]
 8001982:	491e      	ldr	r1, [pc, #120]	; (80019fc <SCH_Dispatch_Tasks+0xb4>)
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4798      	blx	r3
			SCH_tasks_G[Index].RunMe -= 1;
 8001992:	79fa      	ldrb	r2, [r7, #7]
 8001994:	4919      	ldr	r1, [pc, #100]	; (80019fc <SCH_Dispatch_Tasks+0xb4>)
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	330c      	adds	r3, #12
 80019a2:	f993 3000 	ldrsb.w	r3, [r3]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	3b01      	subs	r3, #1
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	79fa      	ldrb	r2, [r7, #7]
 80019ae:	b258      	sxtb	r0, r3
 80019b0:	4912      	ldr	r1, [pc, #72]	; (80019fc <SCH_Dispatch_Tasks+0xb4>)
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	440b      	add	r3, r1
 80019bc:	330c      	adds	r3, #12
 80019be:	4602      	mov	r2, r0
 80019c0:	701a      	strb	r2, [r3, #0]
			if (SCH_tasks_G[Index].Period == 0) {
 80019c2:	79fa      	ldrb	r2, [r7, #7]
 80019c4:	490d      	ldr	r1, [pc, #52]	; (80019fc <SCH_Dispatch_Tasks+0xb4>)
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	3308      	adds	r3, #8
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d105      	bne.n	80019e4 <SCH_Dispatch_Tasks+0x9c>
				SCH_Delete_Task(Index);
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fea2 	bl	8001724 <SCH_Delete_Task>
 80019e0:	e000      	b.n	80019e4 <SCH_Dispatch_Tasks+0x9c>
		if (!(SCH_tasks_G[Index].pTask)) continue;
 80019e2:	bf00      	nop
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	3301      	adds	r3, #1
 80019e8:	71fb      	strb	r3, [r7, #7]
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	2b09      	cmp	r3, #9
 80019ee:	d9b1      	bls.n	8001954 <SCH_Dispatch_Tasks+0xc>
	}
	// Report system status
	//SCH_Report_Status();
	// The scheduler enters idle mode at this point
	//SCH_Go_To_Sleep();
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200000ec 	.word	0x200000ec

08001a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_MspInit+0x5c>)
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <HAL_MspInit+0x5c>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6193      	str	r3, [r2, #24]
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_MspInit+0x5c>)
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <HAL_MspInit+0x5c>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	4a0e      	ldr	r2, [pc, #56]	; (8001a5c <HAL_MspInit+0x5c>)
 8001a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a28:	61d3      	str	r3, [r2, #28]
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <HAL_MspInit+0x5c>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <HAL_MspInit+0x60>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <HAL_MspInit+0x60>)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a52:	bf00      	nop
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40010000 	.word	0x40010000

08001a64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a74:	d113      	bne.n	8001a9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <HAL_TIM_Base_MspInit+0x44>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <HAL_TIM_Base_MspInit+0x44>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	61d3      	str	r3, [r2, #28]
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_TIM_Base_MspInit+0x44>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2100      	movs	r1, #0
 8001a92:	201c      	movs	r0, #28
 8001a94:	f000 f9a1 	bl	8001dda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a98:	201c      	movs	r0, #28
 8001a9a:	f000 f9ba 	bl	8001e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40021000 	.word	0x40021000

08001aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <NMI_Handler+0x4>

08001ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <HardFault_Handler+0x4>

08001ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <MemManage_Handler+0x4>

08001abe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac2:	e7fe      	b.n	8001ac2 <BusFault_Handler+0x4>

08001ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <UsageFault_Handler+0x4>

08001aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af2:	f000 f87f 	bl	8001bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <TIM2_IRQHandler+0x10>)
 8001b02:	f000 ffdb 	bl	8002abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200000a4 	.word	0x200000a4

08001b10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b1c:	f7ff fff8 	bl	8001b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b20:	480b      	ldr	r0, [pc, #44]	; (8001b50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b22:	490c      	ldr	r1, [pc, #48]	; (8001b54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b24:	4a0c      	ldr	r2, [pc, #48]	; (8001b58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b28:	e002      	b.n	8001b30 <LoopCopyDataInit>

08001b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2e:	3304      	adds	r3, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b34:	d3f9      	bcc.n	8001b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b36:	4a09      	ldr	r2, [pc, #36]	; (8001b5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b38:	4c09      	ldr	r4, [pc, #36]	; (8001b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b3c:	e001      	b.n	8001b42 <LoopFillZerobss>

08001b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b40:	3204      	adds	r2, #4

08001b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b44:	d3fb      	bcc.n	8001b3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b46:	f001 faf9 	bl	800313c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b4a:	f7ff fc8b 	bl	8001464 <main>
  bx lr
 8001b4e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b54:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001b58:	080031d8 	.word	0x080031d8
  ldr r2, =_sbss
 8001b5c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001b60:	200001b8 	.word	0x200001b8

08001b64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b64:	e7fe      	b.n	8001b64 <ADC1_2_IRQHandler>
	...

08001b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <HAL_Init+0x28>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <HAL_Init+0x28>)
 8001b72:	f043 0310 	orr.w	r3, r3, #16
 8001b76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b78:	2003      	movs	r0, #3
 8001b7a:	f000 f923 	bl	8001dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b7e:	200f      	movs	r0, #15
 8001b80:	f000 f808 	bl	8001b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b84:	f7ff ff3c 	bl	8001a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40022000 	.word	0x40022000

08001b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_InitTick+0x54>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_InitTick+0x58>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 f93b 	bl	8001e2e <HAL_SYSTICK_Config>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00e      	b.n	8001be0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b0f      	cmp	r3, #15
 8001bc6:	d80a      	bhi.n	8001bde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f000 f903 	bl	8001dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd4:	4a06      	ldr	r2, [pc, #24]	; (8001bf0 <HAL_InitTick+0x5c>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e000      	b.n	8001be0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000050 	.word	0x20000050
 8001bec:	20000058 	.word	0x20000058
 8001bf0:	20000054 	.word	0x20000054

08001bf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_IncTick+0x1c>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_IncTick+0x20>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	4a03      	ldr	r2, [pc, #12]	; (8001c14 <HAL_IncTick+0x20>)
 8001c06:	6013      	str	r3, [r2, #0]
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	20000058 	.word	0x20000058
 8001c14:	200001b4 	.word	0x200001b4

08001c18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c1c:	4b02      	ldr	r3, [pc, #8]	; (8001c28 <HAL_GetTick+0x10>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	200001b4 	.word	0x200001b4

08001c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5e:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	60d3      	str	r3, [r2, #12]
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <__NVIC_GetPriorityGrouping+0x18>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	0a1b      	lsrs	r3, r3, #8
 8001c7e:	f003 0307 	and.w	r3, r3, #7
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	db0b      	blt.n	8001cba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	f003 021f 	and.w	r2, r3, #31
 8001ca8:	4906      	ldr	r1, [pc, #24]	; (8001cc4 <__NVIC_EnableIRQ+0x34>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	095b      	lsrs	r3, r3, #5
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	e000e100 	.word	0xe000e100

08001cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	6039      	str	r1, [r7, #0]
 8001cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	db0a      	blt.n	8001cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	490c      	ldr	r1, [pc, #48]	; (8001d14 <__NVIC_SetPriority+0x4c>)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	0112      	lsls	r2, r2, #4
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	440b      	add	r3, r1
 8001cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf0:	e00a      	b.n	8001d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	4908      	ldr	r1, [pc, #32]	; (8001d18 <__NVIC_SetPriority+0x50>)
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	3b04      	subs	r3, #4
 8001d00:	0112      	lsls	r2, r2, #4
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	440b      	add	r3, r1
 8001d06:	761a      	strb	r2, [r3, #24]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000e100 	.word	0xe000e100
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	; 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f1c3 0307 	rsb	r3, r3, #7
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	bf28      	it	cs
 8001d3a:	2304      	movcs	r3, #4
 8001d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3304      	adds	r3, #4
 8001d42:	2b06      	cmp	r3, #6
 8001d44:	d902      	bls.n	8001d4c <NVIC_EncodePriority+0x30>
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3b03      	subs	r3, #3
 8001d4a:	e000      	b.n	8001d4e <NVIC_EncodePriority+0x32>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	f04f 32ff 	mov.w	r2, #4294967295
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	401a      	ands	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d64:	f04f 31ff 	mov.w	r1, #4294967295
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6e:	43d9      	mvns	r1, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d74:	4313      	orrs	r3, r2
         );
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3724      	adds	r7, #36	; 0x24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d90:	d301      	bcc.n	8001d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00f      	b.n	8001db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <SysTick_Config+0x40>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9e:	210f      	movs	r1, #15
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	f7ff ff90 	bl	8001cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <SysTick_Config+0x40>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dae:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <SysTick_Config+0x40>)
 8001db0:	2207      	movs	r2, #7
 8001db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	e000e010 	.word	0xe000e010

08001dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ff2d 	bl	8001c2c <__NVIC_SetPriorityGrouping>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dec:	f7ff ff42 	bl	8001c74 <__NVIC_GetPriorityGrouping>
 8001df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68b9      	ldr	r1, [r7, #8]
 8001df6:	6978      	ldr	r0, [r7, #20]
 8001df8:	f7ff ff90 	bl	8001d1c <NVIC_EncodePriority>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff5f 	bl	8001cc8 <__NVIC_SetPriority>
}
 8001e0a:	bf00      	nop
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff35 	bl	8001c90 <__NVIC_EnableIRQ>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff ffa2 	bl	8001d80 <SysTick_Config>
 8001e3c:	4603      	mov	r3, r0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b08b      	sub	sp, #44	; 0x2c
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5a:	e148      	b.n	80020ee <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	69fa      	ldr	r2, [r7, #28]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	f040 8137 	bne.w	80020e8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	4aa3      	ldr	r2, [pc, #652]	; (800210c <HAL_GPIO_Init+0x2c4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d05e      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001e84:	4aa1      	ldr	r2, [pc, #644]	; (800210c <HAL_GPIO_Init+0x2c4>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d875      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001e8a:	4aa1      	ldr	r2, [pc, #644]	; (8002110 <HAL_GPIO_Init+0x2c8>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d058      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001e90:	4a9f      	ldr	r2, [pc, #636]	; (8002110 <HAL_GPIO_Init+0x2c8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d86f      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001e96:	4a9f      	ldr	r2, [pc, #636]	; (8002114 <HAL_GPIO_Init+0x2cc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d052      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001e9c:	4a9d      	ldr	r2, [pc, #628]	; (8002114 <HAL_GPIO_Init+0x2cc>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d869      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001ea2:	4a9d      	ldr	r2, [pc, #628]	; (8002118 <HAL_GPIO_Init+0x2d0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d04c      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001ea8:	4a9b      	ldr	r2, [pc, #620]	; (8002118 <HAL_GPIO_Init+0x2d0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d863      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001eae:	4a9b      	ldr	r2, [pc, #620]	; (800211c <HAL_GPIO_Init+0x2d4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d046      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001eb4:	4a99      	ldr	r2, [pc, #612]	; (800211c <HAL_GPIO_Init+0x2d4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d85d      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001eba:	2b12      	cmp	r3, #18
 8001ebc:	d82a      	bhi.n	8001f14 <HAL_GPIO_Init+0xcc>
 8001ebe:	2b12      	cmp	r3, #18
 8001ec0:	d859      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001ec2:	a201      	add	r2, pc, #4	; (adr r2, 8001ec8 <HAL_GPIO_Init+0x80>)
 8001ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec8:	08001f43 	.word	0x08001f43
 8001ecc:	08001f1d 	.word	0x08001f1d
 8001ed0:	08001f2f 	.word	0x08001f2f
 8001ed4:	08001f71 	.word	0x08001f71
 8001ed8:	08001f77 	.word	0x08001f77
 8001edc:	08001f77 	.word	0x08001f77
 8001ee0:	08001f77 	.word	0x08001f77
 8001ee4:	08001f77 	.word	0x08001f77
 8001ee8:	08001f77 	.word	0x08001f77
 8001eec:	08001f77 	.word	0x08001f77
 8001ef0:	08001f77 	.word	0x08001f77
 8001ef4:	08001f77 	.word	0x08001f77
 8001ef8:	08001f77 	.word	0x08001f77
 8001efc:	08001f77 	.word	0x08001f77
 8001f00:	08001f77 	.word	0x08001f77
 8001f04:	08001f77 	.word	0x08001f77
 8001f08:	08001f77 	.word	0x08001f77
 8001f0c:	08001f25 	.word	0x08001f25
 8001f10:	08001f39 	.word	0x08001f39
 8001f14:	4a82      	ldr	r2, [pc, #520]	; (8002120 <HAL_GPIO_Init+0x2d8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d013      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f1a:	e02c      	b.n	8001f76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	623b      	str	r3, [r7, #32]
          break;
 8001f22:	e029      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	623b      	str	r3, [r7, #32]
          break;
 8001f2c:	e024      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	3308      	adds	r3, #8
 8001f34:	623b      	str	r3, [r7, #32]
          break;
 8001f36:	e01f      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	330c      	adds	r3, #12
 8001f3e:	623b      	str	r3, [r7, #32]
          break;
 8001f40:	e01a      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d102      	bne.n	8001f50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	623b      	str	r3, [r7, #32]
          break;
 8001f4e:	e013      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d105      	bne.n	8001f64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f58:	2308      	movs	r3, #8
 8001f5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	611a      	str	r2, [r3, #16]
          break;
 8001f62:	e009      	b.n	8001f78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f64:	2308      	movs	r3, #8
 8001f66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	615a      	str	r2, [r3, #20]
          break;
 8001f6e:	e003      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f70:	2300      	movs	r3, #0
 8001f72:	623b      	str	r3, [r7, #32]
          break;
 8001f74:	e000      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          break;
 8001f76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	2bff      	cmp	r3, #255	; 0xff
 8001f7c:	d801      	bhi.n	8001f82 <HAL_GPIO_Init+0x13a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	e001      	b.n	8001f86 <HAL_GPIO_Init+0x13e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3304      	adds	r3, #4
 8001f86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	2bff      	cmp	r3, #255	; 0xff
 8001f8c:	d802      	bhi.n	8001f94 <HAL_GPIO_Init+0x14c>
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	e002      	b.n	8001f9a <HAL_GPIO_Init+0x152>
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	3b08      	subs	r3, #8
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	210f      	movs	r1, #15
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	401a      	ands	r2, r3
 8001fac:	6a39      	ldr	r1, [r7, #32]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 8090 	beq.w	80020e8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fc8:	4b56      	ldr	r3, [pc, #344]	; (8002124 <HAL_GPIO_Init+0x2dc>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	4a55      	ldr	r2, [pc, #340]	; (8002124 <HAL_GPIO_Init+0x2dc>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6193      	str	r3, [r2, #24]
 8001fd4:	4b53      	ldr	r3, [pc, #332]	; (8002124 <HAL_GPIO_Init+0x2dc>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fe0:	4a51      	ldr	r2, [pc, #324]	; (8002128 <HAL_GPIO_Init+0x2e0>)
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	089b      	lsrs	r3, r3, #2
 8001fe6:	3302      	adds	r3, #2
 8001fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	220f      	movs	r2, #15
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4013      	ands	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a49      	ldr	r2, [pc, #292]	; (800212c <HAL_GPIO_Init+0x2e4>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d00d      	beq.n	8002028 <HAL_GPIO_Init+0x1e0>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a48      	ldr	r2, [pc, #288]	; (8002130 <HAL_GPIO_Init+0x2e8>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d007      	beq.n	8002024 <HAL_GPIO_Init+0x1dc>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a47      	ldr	r2, [pc, #284]	; (8002134 <HAL_GPIO_Init+0x2ec>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d101      	bne.n	8002020 <HAL_GPIO_Init+0x1d8>
 800201c:	2302      	movs	r3, #2
 800201e:	e004      	b.n	800202a <HAL_GPIO_Init+0x1e2>
 8002020:	2303      	movs	r3, #3
 8002022:	e002      	b.n	800202a <HAL_GPIO_Init+0x1e2>
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <HAL_GPIO_Init+0x1e2>
 8002028:	2300      	movs	r3, #0
 800202a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800202c:	f002 0203 	and.w	r2, r2, #3
 8002030:	0092      	lsls	r2, r2, #2
 8002032:	4093      	lsls	r3, r2
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800203a:	493b      	ldr	r1, [pc, #236]	; (8002128 <HAL_GPIO_Init+0x2e0>)
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	3302      	adds	r3, #2
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d006      	beq.n	8002062 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002054:	4b38      	ldr	r3, [pc, #224]	; (8002138 <HAL_GPIO_Init+0x2f0>)
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	4937      	ldr	r1, [pc, #220]	; (8002138 <HAL_GPIO_Init+0x2f0>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	608b      	str	r3, [r1, #8]
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002062:	4b35      	ldr	r3, [pc, #212]	; (8002138 <HAL_GPIO_Init+0x2f0>)
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	43db      	mvns	r3, r3
 800206a:	4933      	ldr	r1, [pc, #204]	; (8002138 <HAL_GPIO_Init+0x2f0>)
 800206c:	4013      	ands	r3, r2
 800206e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800207c:	4b2e      	ldr	r3, [pc, #184]	; (8002138 <HAL_GPIO_Init+0x2f0>)
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	492d      	ldr	r1, [pc, #180]	; (8002138 <HAL_GPIO_Init+0x2f0>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	60cb      	str	r3, [r1, #12]
 8002088:	e006      	b.n	8002098 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800208a:	4b2b      	ldr	r3, [pc, #172]	; (8002138 <HAL_GPIO_Init+0x2f0>)
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	43db      	mvns	r3, r3
 8002092:	4929      	ldr	r1, [pc, #164]	; (8002138 <HAL_GPIO_Init+0x2f0>)
 8002094:	4013      	ands	r3, r2
 8002096:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d006      	beq.n	80020b2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020a4:	4b24      	ldr	r3, [pc, #144]	; (8002138 <HAL_GPIO_Init+0x2f0>)
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	4923      	ldr	r1, [pc, #140]	; (8002138 <HAL_GPIO_Init+0x2f0>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
 80020b0:	e006      	b.n	80020c0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020b2:	4b21      	ldr	r3, [pc, #132]	; (8002138 <HAL_GPIO_Init+0x2f0>)
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	491f      	ldr	r1, [pc, #124]	; (8002138 <HAL_GPIO_Init+0x2f0>)
 80020bc:	4013      	ands	r3, r2
 80020be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d006      	beq.n	80020da <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020cc:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <HAL_GPIO_Init+0x2f0>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4919      	ldr	r1, [pc, #100]	; (8002138 <HAL_GPIO_Init+0x2f0>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	600b      	str	r3, [r1, #0]
 80020d8:	e006      	b.n	80020e8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020da:	4b17      	ldr	r3, [pc, #92]	; (8002138 <HAL_GPIO_Init+0x2f0>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	4915      	ldr	r1, [pc, #84]	; (8002138 <HAL_GPIO_Init+0x2f0>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	3301      	adds	r3, #1
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f47f aeaf 	bne.w	8001e5c <HAL_GPIO_Init+0x14>
  }
}
 80020fe:	bf00      	nop
 8002100:	bf00      	nop
 8002102:	372c      	adds	r7, #44	; 0x2c
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	10320000 	.word	0x10320000
 8002110:	10310000 	.word	0x10310000
 8002114:	10220000 	.word	0x10220000
 8002118:	10210000 	.word	0x10210000
 800211c:	10120000 	.word	0x10120000
 8002120:	10110000 	.word	0x10110000
 8002124:	40021000 	.word	0x40021000
 8002128:	40010000 	.word	0x40010000
 800212c:	40010800 	.word	0x40010800
 8002130:	40010c00 	.word	0x40010c00
 8002134:	40011000 	.word	0x40011000
 8002138:	40010400 	.word	0x40010400

0800213c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	887b      	ldrh	r3, [r7, #2]
 800214e:	4013      	ands	r3, r2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002154:	2301      	movs	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
 8002158:	e001      	b.n	800215e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800215a:	2300      	movs	r3, #0
 800215c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800215e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr

0800216a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	460b      	mov	r3, r1
 8002174:	807b      	strh	r3, [r7, #2]
 8002176:	4613      	mov	r3, r2
 8002178:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800217a:	787b      	ldrb	r3, [r7, #1]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002180:	887a      	ldrh	r2, [r7, #2]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002186:	e003      	b.n	8002190 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002188:	887b      	ldrh	r3, [r7, #2]
 800218a:	041a      	lsls	r2, r3, #16
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	611a      	str	r2, [r3, #16]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800219a:	b480      	push	{r7}
 800219c:	b085      	sub	sp, #20
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	460b      	mov	r3, r1
 80021a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021ac:	887a      	ldrh	r2, [r7, #2]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4013      	ands	r3, r2
 80021b2:	041a      	lsls	r2, r3, #16
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	43d9      	mvns	r1, r3
 80021b8:	887b      	ldrh	r3, [r7, #2]
 80021ba:	400b      	ands	r3, r1
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	611a      	str	r2, [r3, #16]
}
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr

080021cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e26c      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 8087 	beq.w	80022fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021ec:	4b92      	ldr	r3, [pc, #584]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 030c 	and.w	r3, r3, #12
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d00c      	beq.n	8002212 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021f8:	4b8f      	ldr	r3, [pc, #572]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 030c 	and.w	r3, r3, #12
 8002200:	2b08      	cmp	r3, #8
 8002202:	d112      	bne.n	800222a <HAL_RCC_OscConfig+0x5e>
 8002204:	4b8c      	ldr	r3, [pc, #560]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002210:	d10b      	bne.n	800222a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002212:	4b89      	ldr	r3, [pc, #548]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d06c      	beq.n	80022f8 <HAL_RCC_OscConfig+0x12c>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d168      	bne.n	80022f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e246      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002232:	d106      	bne.n	8002242 <HAL_RCC_OscConfig+0x76>
 8002234:	4b80      	ldr	r3, [pc, #512]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a7f      	ldr	r2, [pc, #508]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 800223a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	e02e      	b.n	80022a0 <HAL_RCC_OscConfig+0xd4>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10c      	bne.n	8002264 <HAL_RCC_OscConfig+0x98>
 800224a:	4b7b      	ldr	r3, [pc, #492]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a7a      	ldr	r2, [pc, #488]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	4b78      	ldr	r3, [pc, #480]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a77      	ldr	r2, [pc, #476]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 800225c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e01d      	b.n	80022a0 <HAL_RCC_OscConfig+0xd4>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0xbc>
 800226e:	4b72      	ldr	r3, [pc, #456]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a71      	ldr	r2, [pc, #452]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b6f      	ldr	r3, [pc, #444]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a6e      	ldr	r2, [pc, #440]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	e00b      	b.n	80022a0 <HAL_RCC_OscConfig+0xd4>
 8002288:	4b6b      	ldr	r3, [pc, #428]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a6a      	ldr	r2, [pc, #424]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 800228e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	4b68      	ldr	r3, [pc, #416]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a67      	ldr	r2, [pc, #412]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 800229a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800229e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d013      	beq.n	80022d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7ff fcb6 	bl	8001c18 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b0:	f7ff fcb2 	bl	8001c18 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	; 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e1fa      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	4b5d      	ldr	r3, [pc, #372]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0xe4>
 80022ce:	e014      	b.n	80022fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7ff fca2 	bl	8001c18 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d8:	f7ff fc9e 	bl	8001c18 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b64      	cmp	r3, #100	; 0x64
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e1e6      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ea:	4b53      	ldr	r3, [pc, #332]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x10c>
 80022f6:	e000      	b.n	80022fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d063      	beq.n	80023ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002306:	4b4c      	ldr	r3, [pc, #304]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00b      	beq.n	800232a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002312:	4b49      	ldr	r3, [pc, #292]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b08      	cmp	r3, #8
 800231c:	d11c      	bne.n	8002358 <HAL_RCC_OscConfig+0x18c>
 800231e:	4b46      	ldr	r3, [pc, #280]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d116      	bne.n	8002358 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232a:	4b43      	ldr	r3, [pc, #268]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d005      	beq.n	8002342 <HAL_RCC_OscConfig+0x176>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d001      	beq.n	8002342 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e1ba      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002342:	4b3d      	ldr	r3, [pc, #244]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4939      	ldr	r1, [pc, #228]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002356:	e03a      	b.n	80023ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d020      	beq.n	80023a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002360:	4b36      	ldr	r3, [pc, #216]	; (800243c <HAL_RCC_OscConfig+0x270>)
 8002362:	2201      	movs	r2, #1
 8002364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002366:	f7ff fc57 	bl	8001c18 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800236e:	f7ff fc53 	bl	8001c18 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e19b      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002380:	4b2d      	ldr	r3, [pc, #180]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238c:	4b2a      	ldr	r3, [pc, #168]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4927      	ldr	r1, [pc, #156]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 800239c:	4313      	orrs	r3, r2
 800239e:	600b      	str	r3, [r1, #0]
 80023a0:	e015      	b.n	80023ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a2:	4b26      	ldr	r3, [pc, #152]	; (800243c <HAL_RCC_OscConfig+0x270>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a8:	f7ff fc36 	bl	8001c18 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b0:	f7ff fc32 	bl	8001c18 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e17a      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c2:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d03a      	beq.n	8002450 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d019      	beq.n	8002416 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023e2:	4b17      	ldr	r3, [pc, #92]	; (8002440 <HAL_RCC_OscConfig+0x274>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e8:	f7ff fc16 	bl	8001c18 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f0:	f7ff fc12 	bl	8001c18 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e15a      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002402:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <HAL_RCC_OscConfig+0x26c>)
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800240e:	2001      	movs	r0, #1
 8002410:	f000 fa9a 	bl	8002948 <RCC_Delay>
 8002414:	e01c      	b.n	8002450 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002416:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <HAL_RCC_OscConfig+0x274>)
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241c:	f7ff fbfc 	bl	8001c18 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002422:	e00f      	b.n	8002444 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002424:	f7ff fbf8 	bl	8001c18 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d908      	bls.n	8002444 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e140      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000
 800243c:	42420000 	.word	0x42420000
 8002440:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002444:	4b9e      	ldr	r3, [pc, #632]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1e9      	bne.n	8002424 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 80a6 	beq.w	80025aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800245e:	2300      	movs	r3, #0
 8002460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002462:	4b97      	ldr	r3, [pc, #604]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10d      	bne.n	800248a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800246e:	4b94      	ldr	r3, [pc, #592]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	4a93      	ldr	r2, [pc, #588]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002478:	61d3      	str	r3, [r2, #28]
 800247a:	4b91      	ldr	r3, [pc, #580]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002486:	2301      	movs	r3, #1
 8002488:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248a:	4b8e      	ldr	r3, [pc, #568]	; (80026c4 <HAL_RCC_OscConfig+0x4f8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002492:	2b00      	cmp	r3, #0
 8002494:	d118      	bne.n	80024c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002496:	4b8b      	ldr	r3, [pc, #556]	; (80026c4 <HAL_RCC_OscConfig+0x4f8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a8a      	ldr	r2, [pc, #552]	; (80026c4 <HAL_RCC_OscConfig+0x4f8>)
 800249c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a2:	f7ff fbb9 	bl	8001c18 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024aa:	f7ff fbb5 	bl	8001c18 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b64      	cmp	r3, #100	; 0x64
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e0fd      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024bc:	4b81      	ldr	r3, [pc, #516]	; (80026c4 <HAL_RCC_OscConfig+0x4f8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d106      	bne.n	80024de <HAL_RCC_OscConfig+0x312>
 80024d0:	4b7b      	ldr	r3, [pc, #492]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	4a7a      	ldr	r2, [pc, #488]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	6213      	str	r3, [r2, #32]
 80024dc:	e02d      	b.n	800253a <HAL_RCC_OscConfig+0x36e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10c      	bne.n	8002500 <HAL_RCC_OscConfig+0x334>
 80024e6:	4b76      	ldr	r3, [pc, #472]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	4a75      	ldr	r2, [pc, #468]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	6213      	str	r3, [r2, #32]
 80024f2:	4b73      	ldr	r3, [pc, #460]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4a72      	ldr	r2, [pc, #456]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 80024f8:	f023 0304 	bic.w	r3, r3, #4
 80024fc:	6213      	str	r3, [r2, #32]
 80024fe:	e01c      	b.n	800253a <HAL_RCC_OscConfig+0x36e>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	2b05      	cmp	r3, #5
 8002506:	d10c      	bne.n	8002522 <HAL_RCC_OscConfig+0x356>
 8002508:	4b6d      	ldr	r3, [pc, #436]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4a6c      	ldr	r2, [pc, #432]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 800250e:	f043 0304 	orr.w	r3, r3, #4
 8002512:	6213      	str	r3, [r2, #32]
 8002514:	4b6a      	ldr	r3, [pc, #424]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	4a69      	ldr	r2, [pc, #420]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6213      	str	r3, [r2, #32]
 8002520:	e00b      	b.n	800253a <HAL_RCC_OscConfig+0x36e>
 8002522:	4b67      	ldr	r3, [pc, #412]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	4a66      	ldr	r2, [pc, #408]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002528:	f023 0301 	bic.w	r3, r3, #1
 800252c:	6213      	str	r3, [r2, #32]
 800252e:	4b64      	ldr	r3, [pc, #400]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	4a63      	ldr	r2, [pc, #396]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002534:	f023 0304 	bic.w	r3, r3, #4
 8002538:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d015      	beq.n	800256e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002542:	f7ff fb69 	bl	8001c18 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002548:	e00a      	b.n	8002560 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254a:	f7ff fb65 	bl	8001c18 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	f241 3288 	movw	r2, #5000	; 0x1388
 8002558:	4293      	cmp	r3, r2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e0ab      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002560:	4b57      	ldr	r3, [pc, #348]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0ee      	beq.n	800254a <HAL_RCC_OscConfig+0x37e>
 800256c:	e014      	b.n	8002598 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256e:	f7ff fb53 	bl	8001c18 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002574:	e00a      	b.n	800258c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7ff fb4f 	bl	8001c18 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f241 3288 	movw	r2, #5000	; 0x1388
 8002584:	4293      	cmp	r3, r2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e095      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800258c:	4b4c      	ldr	r3, [pc, #304]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1ee      	bne.n	8002576 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002598:	7dfb      	ldrb	r3, [r7, #23]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d105      	bne.n	80025aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800259e:	4b48      	ldr	r3, [pc, #288]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	4a47      	ldr	r2, [pc, #284]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 80025a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8081 	beq.w	80026b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b4:	4b42      	ldr	r3, [pc, #264]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 030c 	and.w	r3, r3, #12
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d061      	beq.n	8002684 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d146      	bne.n	8002656 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c8:	4b3f      	ldr	r3, [pc, #252]	; (80026c8 <HAL_RCC_OscConfig+0x4fc>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ce:	f7ff fb23 	bl	8001c18 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d6:	f7ff fb1f 	bl	8001c18 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e067      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e8:	4b35      	ldr	r3, [pc, #212]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f0      	bne.n	80025d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025fc:	d108      	bne.n	8002610 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025fe:	4b30      	ldr	r3, [pc, #192]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	492d      	ldr	r1, [pc, #180]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 800260c:	4313      	orrs	r3, r2
 800260e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002610:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a19      	ldr	r1, [r3, #32]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	430b      	orrs	r3, r1
 8002622:	4927      	ldr	r1, [pc, #156]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002628:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <HAL_RCC_OscConfig+0x4fc>)
 800262a:	2201      	movs	r2, #1
 800262c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262e:	f7ff faf3 	bl	8001c18 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002636:	f7ff faef 	bl	8001c18 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e037      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002648:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCC_OscConfig+0x46a>
 8002654:	e02f      	b.n	80026b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002656:	4b1c      	ldr	r3, [pc, #112]	; (80026c8 <HAL_RCC_OscConfig+0x4fc>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7ff fadc 	bl	8001c18 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002664:	f7ff fad8 	bl	8001c18 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e020      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002676:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x498>
 8002682:	e018      	b.n	80026b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e013      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_RCC_OscConfig+0x4f4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d106      	bne.n	80026b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d001      	beq.n	80026b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40007000 	.word	0x40007000
 80026c8:	42420060 	.word	0x42420060

080026cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e0d0      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026e0:	4b6a      	ldr	r3, [pc, #424]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d910      	bls.n	8002710 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	4b67      	ldr	r3, [pc, #412]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 0207 	bic.w	r2, r3, #7
 80026f6:	4965      	ldr	r1, [pc, #404]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fe:	4b63      	ldr	r3, [pc, #396]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0b8      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d020      	beq.n	800275e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002728:	4b59      	ldr	r3, [pc, #356]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	4a58      	ldr	r2, [pc, #352]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002732:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002740:	4b53      	ldr	r3, [pc, #332]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	4a52      	ldr	r2, [pc, #328]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800274a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800274c:	4b50      	ldr	r3, [pc, #320]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	494d      	ldr	r1, [pc, #308]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	4313      	orrs	r3, r2
 800275c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d040      	beq.n	80027ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d107      	bne.n	8002782 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	4b47      	ldr	r3, [pc, #284]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d115      	bne.n	80027aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e07f      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b02      	cmp	r3, #2
 8002788:	d107      	bne.n	800279a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278a:	4b41      	ldr	r3, [pc, #260]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d109      	bne.n	80027aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e073      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279a:	4b3d      	ldr	r3, [pc, #244]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e06b      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027aa:	4b39      	ldr	r3, [pc, #228]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f023 0203 	bic.w	r2, r3, #3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	4936      	ldr	r1, [pc, #216]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027bc:	f7ff fa2c 	bl	8001c18 <HAL_GetTick>
 80027c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c2:	e00a      	b.n	80027da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c4:	f7ff fa28 	bl	8001c18 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e053      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027da:	4b2d      	ldr	r3, [pc, #180]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 020c 	and.w	r2, r3, #12
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d1eb      	bne.n	80027c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027ec:	4b27      	ldr	r3, [pc, #156]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d210      	bcs.n	800281c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fa:	4b24      	ldr	r3, [pc, #144]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 0207 	bic.w	r2, r3, #7
 8002802:	4922      	ldr	r1, [pc, #136]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	4313      	orrs	r3, r2
 8002808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280a:	4b20      	ldr	r3, [pc, #128]	; (800288c <HAL_RCC_ClockConfig+0x1c0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d001      	beq.n	800281c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e032      	b.n	8002882 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	d008      	beq.n	800283a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002828:	4b19      	ldr	r3, [pc, #100]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4916      	ldr	r1, [pc, #88]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002836:	4313      	orrs	r3, r2
 8002838:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b00      	cmp	r3, #0
 8002844:	d009      	beq.n	800285a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002846:	4b12      	ldr	r3, [pc, #72]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	490e      	ldr	r1, [pc, #56]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002856:	4313      	orrs	r3, r2
 8002858:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800285a:	f000 f821 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 800285e:	4602      	mov	r2, r0
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	091b      	lsrs	r3, r3, #4
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	490a      	ldr	r1, [pc, #40]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 800286c:	5ccb      	ldrb	r3, [r1, r3]
 800286e:	fa22 f303 	lsr.w	r3, r2, r3
 8002872:	4a09      	ldr	r2, [pc, #36]	; (8002898 <HAL_RCC_ClockConfig+0x1cc>)
 8002874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <HAL_RCC_ClockConfig+0x1d0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff f98a 	bl	8001b94 <HAL_InitTick>

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40022000 	.word	0x40022000
 8002890:	40021000 	.word	0x40021000
 8002894:	080031ac 	.word	0x080031ac
 8002898:	20000050 	.word	0x20000050
 800289c:	20000054 	.word	0x20000054

080028a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	2300      	movs	r3, #0
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	2300      	movs	r3, #0
 80028b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028ba:	4b1e      	ldr	r3, [pc, #120]	; (8002934 <HAL_RCC_GetSysClockFreq+0x94>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d002      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0x30>
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d003      	beq.n	80028d6 <HAL_RCC_GetSysClockFreq+0x36>
 80028ce:	e027      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028d0:	4b19      	ldr	r3, [pc, #100]	; (8002938 <HAL_RCC_GetSysClockFreq+0x98>)
 80028d2:	613b      	str	r3, [r7, #16]
      break;
 80028d4:	e027      	b.n	8002926 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	0c9b      	lsrs	r3, r3, #18
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	4a17      	ldr	r2, [pc, #92]	; (800293c <HAL_RCC_GetSysClockFreq+0x9c>)
 80028e0:	5cd3      	ldrb	r3, [r2, r3]
 80028e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d010      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028ee:	4b11      	ldr	r3, [pc, #68]	; (8002934 <HAL_RCC_GetSysClockFreq+0x94>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	0c5b      	lsrs	r3, r3, #17
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	4a11      	ldr	r2, [pc, #68]	; (8002940 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028fa:	5cd3      	ldrb	r3, [r2, r3]
 80028fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a0d      	ldr	r2, [pc, #52]	; (8002938 <HAL_RCC_GetSysClockFreq+0x98>)
 8002902:	fb02 f203 	mul.w	r2, r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	fbb2 f3f3 	udiv	r3, r2, r3
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	e004      	b.n	800291a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a0c      	ldr	r2, [pc, #48]	; (8002944 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002914:	fb02 f303 	mul.w	r3, r2, r3
 8002918:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	613b      	str	r3, [r7, #16]
      break;
 800291e:	e002      	b.n	8002926 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002920:	4b05      	ldr	r3, [pc, #20]	; (8002938 <HAL_RCC_GetSysClockFreq+0x98>)
 8002922:	613b      	str	r3, [r7, #16]
      break;
 8002924:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002926:	693b      	ldr	r3, [r7, #16]
}
 8002928:	4618      	mov	r0, r3
 800292a:	371c      	adds	r7, #28
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000
 8002938:	007a1200 	.word	0x007a1200
 800293c:	080031bc 	.word	0x080031bc
 8002940:	080031cc 	.word	0x080031cc
 8002944:	003d0900 	.word	0x003d0900

08002948 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002950:	4b0a      	ldr	r3, [pc, #40]	; (800297c <RCC_Delay+0x34>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <RCC_Delay+0x38>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	0a5b      	lsrs	r3, r3, #9
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	fb02 f303 	mul.w	r3, r2, r3
 8002962:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002964:	bf00      	nop
  }
  while (Delay --);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1e5a      	subs	r2, r3, #1
 800296a:	60fa      	str	r2, [r7, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1f9      	bne.n	8002964 <RCC_Delay+0x1c>
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr
 800297c:	20000050 	.word	0x20000050
 8002980:	10624dd3 	.word	0x10624dd3

08002984 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e041      	b.n	8002a1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff f85a 	bl	8001a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3304      	adds	r3, #4
 80029c0:	4619      	mov	r1, r3
 80029c2:	4610      	mov	r0, r2
 80029c4:	f000 fa56 	bl	8002e74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d001      	beq.n	8002a3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e035      	b.n	8002aa8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a16      	ldr	r2, [pc, #88]	; (8002ab4 <HAL_TIM_Base_Start_IT+0x90>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d009      	beq.n	8002a72 <HAL_TIM_Base_Start_IT+0x4e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a66:	d004      	beq.n	8002a72 <HAL_TIM_Base_Start_IT+0x4e>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a12      	ldr	r2, [pc, #72]	; (8002ab8 <HAL_TIM_Base_Start_IT+0x94>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d111      	bne.n	8002a96 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2b06      	cmp	r3, #6
 8002a82:	d010      	beq.n	8002aa6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a94:	e007      	b.n	8002aa6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0201 	orr.w	r2, r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40012c00 	.word	0x40012c00
 8002ab8:	40000400 	.word	0x40000400

08002abc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d020      	beq.n	8002b20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d01b      	beq.n	8002b20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f06f 0202 	mvn.w	r2, #2
 8002af0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f998 	bl	8002e3c <HAL_TIM_IC_CaptureCallback>
 8002b0c:	e005      	b.n	8002b1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f98b 	bl	8002e2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f99a 	bl	8002e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d020      	beq.n	8002b6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d01b      	beq.n	8002b6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0204 	mvn.w	r2, #4
 8002b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2202      	movs	r2, #2
 8002b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f972 	bl	8002e3c <HAL_TIM_IC_CaptureCallback>
 8002b58:	e005      	b.n	8002b66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f965 	bl	8002e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f974 	bl	8002e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d020      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d01b      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0208 	mvn.w	r2, #8
 8002b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2204      	movs	r2, #4
 8002b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f94c 	bl	8002e3c <HAL_TIM_IC_CaptureCallback>
 8002ba4:	e005      	b.n	8002bb2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f93f 	bl	8002e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f94e 	bl	8002e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d020      	beq.n	8002c04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d01b      	beq.n	8002c04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0210 	mvn.w	r2, #16
 8002bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2208      	movs	r2, #8
 8002bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f926 	bl	8002e3c <HAL_TIM_IC_CaptureCallback>
 8002bf0:	e005      	b.n	8002bfe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f919 	bl	8002e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f928 	bl	8002e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00c      	beq.n	8002c28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d007      	beq.n	8002c28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0201 	mvn.w	r2, #1
 8002c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fe fd6e 	bl	8001704 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00c      	beq.n	8002c4c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d007      	beq.n	8002c4c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fa6f 	bl	800312a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00c      	beq.n	8002c70 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d007      	beq.n	8002c70 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f8f8 	bl	8002e60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00c      	beq.n	8002c94 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d007      	beq.n	8002c94 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0220 	mvn.w	r2, #32
 8002c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fa42 	bl	8003118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_TIM_ConfigClockSource+0x1c>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e0b4      	b.n	8002e22 <HAL_TIM_ConfigClockSource+0x186>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cf0:	d03e      	beq.n	8002d70 <HAL_TIM_ConfigClockSource+0xd4>
 8002cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cf6:	f200 8087 	bhi.w	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
 8002cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cfe:	f000 8086 	beq.w	8002e0e <HAL_TIM_ConfigClockSource+0x172>
 8002d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d06:	d87f      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
 8002d08:	2b70      	cmp	r3, #112	; 0x70
 8002d0a:	d01a      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0xa6>
 8002d0c:	2b70      	cmp	r3, #112	; 0x70
 8002d0e:	d87b      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
 8002d10:	2b60      	cmp	r3, #96	; 0x60
 8002d12:	d050      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x11a>
 8002d14:	2b60      	cmp	r3, #96	; 0x60
 8002d16:	d877      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
 8002d18:	2b50      	cmp	r3, #80	; 0x50
 8002d1a:	d03c      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0xfa>
 8002d1c:	2b50      	cmp	r3, #80	; 0x50
 8002d1e:	d873      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
 8002d20:	2b40      	cmp	r3, #64	; 0x40
 8002d22:	d058      	beq.n	8002dd6 <HAL_TIM_ConfigClockSource+0x13a>
 8002d24:	2b40      	cmp	r3, #64	; 0x40
 8002d26:	d86f      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
 8002d28:	2b30      	cmp	r3, #48	; 0x30
 8002d2a:	d064      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d2c:	2b30      	cmp	r3, #48	; 0x30
 8002d2e:	d86b      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	d060      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	d867      	bhi.n	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d05c      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d3c:	2b10      	cmp	r3, #16
 8002d3e:	d05a      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d40:	e062      	b.n	8002e08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6899      	ldr	r1, [r3, #8]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f000 f96a 	bl	800302a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	609a      	str	r2, [r3, #8]
      break;
 8002d6e:	e04f      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6818      	ldr	r0, [r3, #0]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	6899      	ldr	r1, [r3, #8]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f000 f953 	bl	800302a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d92:	609a      	str	r2, [r3, #8]
      break;
 8002d94:	e03c      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6859      	ldr	r1, [r3, #4]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	461a      	mov	r2, r3
 8002da4:	f000 f8ca 	bl	8002f3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2150      	movs	r1, #80	; 0x50
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 f921 	bl	8002ff6 <TIM_ITRx_SetConfig>
      break;
 8002db4:	e02c      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6859      	ldr	r1, [r3, #4]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f000 f8e8 	bl	8002f98 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2160      	movs	r1, #96	; 0x60
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 f911 	bl	8002ff6 <TIM_ITRx_SetConfig>
      break;
 8002dd4:	e01c      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6818      	ldr	r0, [r3, #0]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	6859      	ldr	r1, [r3, #4]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	461a      	mov	r2, r3
 8002de4:	f000 f8aa 	bl	8002f3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2140      	movs	r1, #64	; 0x40
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 f901 	bl	8002ff6 <TIM_ITRx_SetConfig>
      break;
 8002df4:	e00c      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4610      	mov	r0, r2
 8002e02:	f000 f8f8 	bl	8002ff6 <TIM_ITRx_SetConfig>
      break;
 8002e06:	e003      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e0c:	e000      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr

08002e3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr

08002e4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr

08002e60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr
	...

08002e74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a2b      	ldr	r2, [pc, #172]	; (8002f34 <TIM_Base_SetConfig+0xc0>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d007      	beq.n	8002e9c <TIM_Base_SetConfig+0x28>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e92:	d003      	beq.n	8002e9c <TIM_Base_SetConfig+0x28>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a28      	ldr	r2, [pc, #160]	; (8002f38 <TIM_Base_SetConfig+0xc4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d108      	bne.n	8002eae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a20      	ldr	r2, [pc, #128]	; (8002f34 <TIM_Base_SetConfig+0xc0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d007      	beq.n	8002ec6 <TIM_Base_SetConfig+0x52>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ebc:	d003      	beq.n	8002ec6 <TIM_Base_SetConfig+0x52>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a1d      	ldr	r2, [pc, #116]	; (8002f38 <TIM_Base_SetConfig+0xc4>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d108      	bne.n	8002ed8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ecc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a0d      	ldr	r2, [pc, #52]	; (8002f34 <TIM_Base_SetConfig+0xc0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d103      	bne.n	8002f0c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d005      	beq.n	8002f2a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f023 0201 	bic.w	r2, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	611a      	str	r2, [r3, #16]
  }
}
 8002f2a:	bf00      	nop
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr
 8002f34:	40012c00 	.word	0x40012c00
 8002f38:	40000400 	.word	0x40000400

08002f3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	f023 0201 	bic.w	r2, r3, #1
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f023 030a 	bic.w	r3, r3, #10
 8002f78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	621a      	str	r2, [r3, #32]
}
 8002f8e:	bf00      	nop
 8002f90:	371c      	adds	r7, #28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr

08002f98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	f023 0210 	bic.w	r2, r3, #16
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	031b      	lsls	r3, r3, #12
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	621a      	str	r2, [r3, #32]
}
 8002fec:	bf00      	nop
 8002fee:	371c      	adds	r7, #28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr

08002ff6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b085      	sub	sp, #20
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
 8002ffe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	f043 0307 	orr.w	r3, r3, #7
 8003018:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	609a      	str	r2, [r3, #8]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr

0800302a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800302a:	b480      	push	{r7}
 800302c:	b087      	sub	sp, #28
 800302e:	af00      	add	r7, sp, #0
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003044:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	021a      	lsls	r2, r3, #8
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	431a      	orrs	r2, r3
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	4313      	orrs	r3, r2
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	609a      	str	r2, [r3, #8]
}
 800305e:	bf00      	nop
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800307c:	2302      	movs	r3, #2
 800307e:	e041      	b.n	8003104 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a14      	ldr	r2, [pc, #80]	; (8003110 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d009      	beq.n	80030d8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030cc:	d004      	beq.n	80030d8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a10      	ldr	r2, [pc, #64]	; (8003114 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d10c      	bne.n	80030f2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40012c00 	.word	0x40012c00
 8003114:	40000400 	.word	0x40000400

08003118 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr

0800312a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <__libc_init_array>:
 800313c:	b570      	push	{r4, r5, r6, lr}
 800313e:	2600      	movs	r6, #0
 8003140:	4d0c      	ldr	r5, [pc, #48]	; (8003174 <__libc_init_array+0x38>)
 8003142:	4c0d      	ldr	r4, [pc, #52]	; (8003178 <__libc_init_array+0x3c>)
 8003144:	1b64      	subs	r4, r4, r5
 8003146:	10a4      	asrs	r4, r4, #2
 8003148:	42a6      	cmp	r6, r4
 800314a:	d109      	bne.n	8003160 <__libc_init_array+0x24>
 800314c:	f000 f822 	bl	8003194 <_init>
 8003150:	2600      	movs	r6, #0
 8003152:	4d0a      	ldr	r5, [pc, #40]	; (800317c <__libc_init_array+0x40>)
 8003154:	4c0a      	ldr	r4, [pc, #40]	; (8003180 <__libc_init_array+0x44>)
 8003156:	1b64      	subs	r4, r4, r5
 8003158:	10a4      	asrs	r4, r4, #2
 800315a:	42a6      	cmp	r6, r4
 800315c:	d105      	bne.n	800316a <__libc_init_array+0x2e>
 800315e:	bd70      	pop	{r4, r5, r6, pc}
 8003160:	f855 3b04 	ldr.w	r3, [r5], #4
 8003164:	4798      	blx	r3
 8003166:	3601      	adds	r6, #1
 8003168:	e7ee      	b.n	8003148 <__libc_init_array+0xc>
 800316a:	f855 3b04 	ldr.w	r3, [r5], #4
 800316e:	4798      	blx	r3
 8003170:	3601      	adds	r6, #1
 8003172:	e7f2      	b.n	800315a <__libc_init_array+0x1e>
 8003174:	080031d0 	.word	0x080031d0
 8003178:	080031d0 	.word	0x080031d0
 800317c:	080031d0 	.word	0x080031d0
 8003180:	080031d4 	.word	0x080031d4

08003184 <memset>:
 8003184:	4603      	mov	r3, r0
 8003186:	4402      	add	r2, r0
 8003188:	4293      	cmp	r3, r2
 800318a:	d100      	bne.n	800318e <memset+0xa>
 800318c:	4770      	bx	lr
 800318e:	f803 1b01 	strb.w	r1, [r3], #1
 8003192:	e7f9      	b.n	8003188 <memset+0x4>

08003194 <_init>:
 8003194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003196:	bf00      	nop
 8003198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800319a:	bc08      	pop	{r3}
 800319c:	469e      	mov	lr, r3
 800319e:	4770      	bx	lr

080031a0 <_fini>:
 80031a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a2:	bf00      	nop
 80031a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a6:	bc08      	pop	{r3}
 80031a8:	469e      	mov	lr, r3
 80031aa:	4770      	bx	lr
